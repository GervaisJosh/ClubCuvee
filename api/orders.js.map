{
  "version": 3,
  "sources": ["orders.ts", "../src/supabase.ts"],
  "sourcesContent": ["import { supabase } from '../src/supabase';\r\n\r\nexport interface Order {\r\n  id: string;\r\n  user_id: string;\r\n  order_date: string;\r\n  status: 'pending' | 'fulfilled' | 'shipped' | 'cancelled';\r\n  total_amount: number;\r\n  created_at: string;\r\n}\r\n\r\nexport interface OrderWine {\r\n  id: string;\r\n  order_id: string;\r\n  wine_id: string;\r\n  quantity: number;\r\n}\r\n\r\nexport const createOrder = async (\r\n  userId: string,\r\n  wines: { id: string; quantity: number }[],\r\n  totalAmount: number\r\n): Promise<Order | null> => {\r\n  // Cast the result of supabase.from('orders') to any to bypass type issues.\r\n  const { data: order, error: orderError } = await (supabase.from('orders') as any)\r\n    .insert({ user_id: userId, total_amount: totalAmount, status: 'pending' })\r\n    .single();\r\n\r\n  if (orderError) {\r\n    console.error('Error creating order:', orderError);\r\n    return null;\r\n  }\r\n\r\n  if (!order) {\r\n    console.error('No order data returned');\r\n    return null;\r\n  }\r\n\r\n  const orderWines = wines.map((wine) => ({\r\n    order_id: order.id,\r\n    wine_id: wine.id,\r\n    quantity: wine.quantity,\r\n  }));\r\n\r\n  const { error: orderWinesError } = await (supabase.from('order_wines') as any)\r\n    .insert(orderWines);\r\n\r\n  if (orderWinesError) {\r\n    console.error('Error adding wines to order:', orderWinesError);\r\n    // Optionally, delete the created order here if needed.\r\n    return null;\r\n  }\r\n\r\n  return order;\r\n};\r\n\r\nexport const getOrderHistory = async (userId: string): Promise<Order[]> => {\r\n  const { data, error } = await (supabase.from('orders') as any)\r\n    .select(\r\n      `\r\n      *,\r\n      order_wines (\r\n        quantity,\r\n        wine_inventory (id, name, price)\r\n      )\r\n      `\r\n    )\r\n    .eq('user_id', userId);\r\n\r\n  if (error) {\r\n    console.error('Error fetching order history:', error);\r\n    return [];\r\n  }\r\n\r\n  return data || [];\r\n};\r\n\r\nexport const updateOrderStatus = async (\r\n  orderId: string,\r\n  status: Order['status']\r\n): Promise<Order | null> => {\r\n  const { data, error } = await (supabase.from('orders') as any)\r\n    .update({ status })\r\n    .eq('id', orderId)\r\n    .single();\r\n\r\n  if (error) {\r\n    console.error('Error updating order status:', error);\r\n    return null;\r\n  }\r\n\r\n  return data;\r\n};\r\n", "// supabase.ts\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport type { Database } from './types/supabase';\r\n\r\n// Use a singleton pattern to prevent multiple GoTrueClient instances\r\n// https://supabase.com/docs/reference/javascript/initializing\r\n\r\n// Fix for \"Multiple GoTrueClient instances detected\" warning:\r\n// 1. Ensure we use the exact same URL and key in all imports\r\n// 2. Use a global singleton that's only instantiated once\r\n// 3. Add a global window property to ensure browser contexts share the instance\r\n\r\nconst SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL!;\r\nconst SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY!;\r\n\r\n// Create a global type for the window object to include our supabase instance\r\ndeclare global {\r\n  interface Window {\r\n    __SUPABASE_INSTANCE?: ReturnType<typeof createClient<Database>>;\r\n  }\r\n}\r\n\r\n// Use a function that checks for an existing instance in the global window object\r\nconst createSupabaseClient = () => {\r\n  // For SSR (server-side rendering) environments without window\r\n  if (typeof window === 'undefined') {\r\n    return createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY);\r\n  }\r\n  \r\n  // For browser environments, check window for existing instance\r\n  if (window.__SUPABASE_INSTANCE) {\r\n    return window.__SUPABASE_INSTANCE;\r\n  }\r\n  \r\n  // Create a new instance and store it on the window\r\n  const instance = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY);\r\n  window.__SUPABASE_INSTANCE = instance;\r\n  \r\n  return instance;\r\n};\r\n\r\n// Export the singleton instance\r\nexport const supabase = createSupabaseClient();"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACCA,yBAA6B;AAD7B;AAYA,IAAM,eAAe,YAAY,IAAI;AACrC,IAAM,oBAAoB,YAAY,IAAI;AAU1C,IAAM,uBAAuB,MAAM;AAEjC,MAAI,OAAO,WAAW,aAAa;AACjC,eAAO,iCAAuB,cAAc,iBAAiB;AAAA,EAC/D;AAGA,MAAI,OAAO,qBAAqB;AAC9B,WAAO,OAAO;AAAA,EAChB;AAGA,QAAM,eAAW,iCAAuB,cAAc,iBAAiB;AACvE,SAAO,sBAAsB;AAE7B,SAAO;AACT;AAGO,IAAM,WAAW,qBAAqB;;;ADxBtC,IAAM,cAAc,OACzB,QACA,OACA,gBAC0B;AAE1B,QAAM,EAAE,MAAM,OAAO,OAAO,WAAW,IAAI,MAAO,SAAS,KAAK,QAAQ,EACrE,OAAO,EAAE,SAAS,QAAQ,cAAc,aAAa,QAAQ,UAAU,CAAC,EACxE,OAAO;AAEV,MAAI,YAAY;AACd,YAAQ,MAAM,yBAAyB,UAAU;AACjD,WAAO;AAAA,EACT;AAEA,MAAI,CAAC,OAAO;AACV,YAAQ,MAAM,wBAAwB;AACtC,WAAO;AAAA,EACT;AAEA,QAAM,aAAa,MAAM,IAAI,CAAC,UAAU;AAAA,IACtC,UAAU,MAAM;AAAA,IAChB,SAAS,KAAK;AAAA,IACd,UAAU,KAAK;AAAA,EACjB,EAAE;AAEF,QAAM,EAAE,OAAO,gBAAgB,IAAI,MAAO,SAAS,KAAK,aAAa,EAClE,OAAO,UAAU;AAEpB,MAAI,iBAAiB;AACnB,YAAQ,MAAM,gCAAgC,eAAe;AAE7D,WAAO;AAAA,EACT;AAEA,SAAO;AACT;AAEO,IAAM,kBAAkB,OAAO,WAAqC;AACzE,QAAM,EAAE,MAAM,MAAM,IAAI,MAAO,SAAS,KAAK,QAAQ,EAClD;AAAA,IACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOF,EACC,GAAG,WAAW,MAAM;AAEvB,MAAI,OAAO;AACT,YAAQ,MAAM,iCAAiC,KAAK;AACpD,WAAO,CAAC;AAAA,EACV;AAEA,SAAO,QAAQ,CAAC;AAClB;AAEO,IAAM,oBAAoB,OAC/B,SACA,WAC0B;AAC1B,QAAM,EAAE,MAAM,MAAM,IAAI,MAAO,SAAS,KAAK,QAAQ,EAClD,OAAO,EAAE,OAAO,CAAC,EACjB,GAAG,MAAM,OAAO,EAChB,OAAO;AAEV,MAAI,OAAO;AACT,YAAQ,MAAM,gCAAgC,KAAK;AACnD,WAAO;AAAA,EACT;AAEA,SAAO;AACT;",
  "names": []
}

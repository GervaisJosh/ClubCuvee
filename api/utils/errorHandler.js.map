{
  "version": 3,
  "sources": ["errorHandler.ts"],
  "sourcesContent": ["import type { VercelResponse } from '@vercel/node';\r\n\r\nexport interface ApiErrorResponse {\r\n  status: 'error';\r\n  error: string;\r\n  code?: number;\r\n  type?: string;\r\n  details?: any;\r\n  deployment_url?: string;\r\n  errorDetails?: any;\r\n}\r\n\r\n/**\r\n * Formats an error into a consistent API error response\r\n * \r\n * @param error The error object to format\r\n * @param includeDetails Whether to include detailed error information (default: false)\r\n * @returns A structured API error response object\r\n */\r\nexport function formatApiError(error: any, includeDetails = false): ApiErrorResponse {\r\n  // Extract common error properties\r\n  const errorResponse: ApiErrorResponse = {\r\n    status: 'error',\r\n    error: error.message || 'Internal server error',\r\n  };\r\n\r\n  // Add error type if available\r\n  if (error.type) {\r\n    errorResponse.type = error.type;\r\n  }\r\n\r\n  // Add error code if available\r\n  if (error.code || error.statusCode) {\r\n    errorResponse.code = error.code || error.statusCode;\r\n  }\r\n\r\n  // Include deployment context to help with debugging\r\n  const deployUrl = process.env.VERCEL_URL || process.env.FRONTEND_URL;\r\n  if (deployUrl) {\r\n    errorResponse.deployment_url = deployUrl.startsWith('http') ? deployUrl : `https://${deployUrl}`;\r\n  }\r\n\r\n  // Include detailed error information in development mode\r\n  if (includeDetails || process.env.NODE_ENV === 'development') {\r\n    errorResponse.errorDetails = {\r\n      message: error.message,\r\n      code: error.code,\r\n      type: error.type,\r\n      stack: error.stack,\r\n      // Additional properties that might be useful\r\n      name: error.name,\r\n      cause: error.cause,\r\n    };\r\n  }\r\n\r\n  return errorResponse;\r\n}\r\n\r\n/**\r\n * Sends a formatted error response\r\n * \r\n * @param res The Vercel response object\r\n * @param error The error to format and send\r\n * @param statusCode The HTTP status code to use (default: 500)\r\n * @param includeDetails Whether to include detailed error information (default: false)\r\n */\r\nexport function sendApiError(\r\n  res: VercelResponse,\r\n  error: any,\r\n  statusCode = 500,\r\n  includeDetails = false\r\n): void {\r\n  // Log the error for server-side debugging\r\n  console.error(`API Error (${statusCode}):`, error);\r\n  \r\n  // Send the formatted error response\r\n  res.status(statusCode).json(formatApiError(error, includeDetails));\r\n}\r\n\r\n/**\r\n * Returns common error status codes based on error types\r\n * \r\n * @param error The error to analyze\r\n * @returns An appropriate HTTP status code\r\n */\r\nexport function getErrorStatusCode(error: any): number {\r\n  // Authentication errors\r\n  if (\r\n    error.type === 'StripeAuthenticationError' ||\r\n    error.message?.toLowerCase().includes('authentication') ||\r\n    error.message?.toLowerCase().includes('api key') ||\r\n    error.code === 'auth_error'\r\n  ) {\r\n    return 401;\r\n  }\r\n\r\n  // Validation errors\r\n  if (\r\n    error.type === 'StripeInvalidRequestError' || \r\n    error.message?.toLowerCase().includes('validation') ||\r\n    error.message?.toLowerCase().includes('invalid')\r\n  ) {\r\n    return 400;\r\n  }\r\n\r\n  // Resource not found\r\n  if (\r\n    error.type === 'StripeInvalidRequestError' && \r\n    error.message?.toLowerCase().includes('no such') ||\r\n    error.code === 'resource_missing'\r\n  ) {\r\n    return 404;\r\n  }\r\n\r\n  // Rate limiting errors\r\n  if (\r\n    error.type === 'StripeRateLimitError' ||\r\n    error.code === 'rate_limit_exceeded'\r\n  ) {\r\n    return 429;\r\n  }\r\n\r\n  // External service errors\r\n  if (\r\n    error.type === 'StripeAPIError' ||\r\n    error.type === 'StripeConnectionError'\r\n  ) {\r\n    return 502;\r\n  }\r\n\r\n  // Default to internal server error\r\n  return 500;\r\n}\r\n\r\n/**\r\n * Wrapper for API handler functions to catch and format errors consistently\r\n * \r\n * @param handler The API handler function to wrap\r\n * @returns A wrapped handler function with error handling\r\n */\r\nexport function withErrorHandling(\r\n  handler: (req: any, res: any) => Promise<any>\r\n) {\r\n  return async (req: any, res: any) => {\r\n    try {\r\n      return await handler(req, res);\r\n    } catch (error: any) {\r\n      const statusCode = getErrorStatusCode(error);\r\n      sendApiError(res, error, statusCode);\r\n    }\r\n  };\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBO,SAAS,eAAe,OAAY,iBAAiB,OAAyB;AAEnF,QAAM,gBAAkC;AAAA,IACtC,QAAQ;AAAA,IACR,OAAO,MAAM,WAAW;AAAA,EAC1B;AAGA,MAAI,MAAM,MAAM;AACd,kBAAc,OAAO,MAAM;AAAA,EAC7B;AAGA,MAAI,MAAM,QAAQ,MAAM,YAAY;AAClC,kBAAc,OAAO,MAAM,QAAQ,MAAM;AAAA,EAC3C;AAGA,QAAM,YAAY,QAAQ,IAAI,cAAc,QAAQ,IAAI;AACxD,MAAI,WAAW;AACb,kBAAc,iBAAiB,UAAU,WAAW,MAAM,IAAI,YAAY,WAAW,SAAS;AAAA,EAChG;AAGA,MAAI,kBAAkB,OAAwC;AAC5D,kBAAc,eAAe;AAAA,MAC3B,SAAS,MAAM;AAAA,MACf,MAAM,MAAM;AAAA,MACZ,MAAM,MAAM;AAAA,MACZ,OAAO,MAAM;AAAA;AAAA,MAEb,MAAM,MAAM;AAAA,MACZ,OAAO,MAAM;AAAA,IACf;AAAA,EACF;AAEA,SAAO;AACT;AAUO,SAAS,aACd,KACA,OACA,aAAa,KACb,iBAAiB,OACX;AAEN,UAAQ,MAAM,cAAc,UAAU,MAAM,KAAK;AAGjD,MAAI,OAAO,UAAU,EAAE,KAAK,eAAe,OAAO,cAAc,CAAC;AACnE;AAQO,SAAS,mBAAmB,OAAoB;AAErD,MACE,MAAM,SAAS,+BACf,MAAM,SAAS,YAAY,EAAE,SAAS,gBAAgB,KACtD,MAAM,SAAS,YAAY,EAAE,SAAS,SAAS,KAC/C,MAAM,SAAS,cACf;AACA,WAAO;AAAA,EACT;AAGA,MACE,MAAM,SAAS,+BACf,MAAM,SAAS,YAAY,EAAE,SAAS,YAAY,KAClD,MAAM,SAAS,YAAY,EAAE,SAAS,SAAS,GAC/C;AACA,WAAO;AAAA,EACT;AAGA,MACE,MAAM,SAAS,+BACf,MAAM,SAAS,YAAY,EAAE,SAAS,SAAS,KAC/C,MAAM,SAAS,oBACf;AACA,WAAO;AAAA,EACT;AAGA,MACE,MAAM,SAAS,0BACf,MAAM,SAAS,uBACf;AACA,WAAO;AAAA,EACT;AAGA,MACE,MAAM,SAAS,oBACf,MAAM,SAAS,yBACf;AACA,WAAO;AAAA,EACT;AAGA,SAAO;AACT;AAQO,SAAS,kBACd,SACA;AACA,SAAO,OAAO,KAAU,QAAa;AACnC,QAAI;AACF,aAAO,MAAM,QAAQ,KAAK,GAAG;AAAA,IAC/B,SAAS,OAAY;AACnB,YAAM,aAAa,mBAAmB,KAAK;AAC3C,mBAAa,KAAK,OAAO,UAAU;AAAA,IACrC;AAAA,EACF;AACF;",
  "names": []
}

{
  "version": 3,
  "sources": ["supabase.ts", "error-handler.ts"],
  "sourcesContent": ["import { createClient } from '@supabase/supabase-js';\r\nimport { APIError } from './error-handler';\r\n\r\nif (!process.env.SUPABASE_URL) {\r\n  throw new Error('SUPABASE_URL is required');\r\n}\r\n\r\nif (!process.env.SUPABASE_SERVICE_ROLE_KEY) {\r\n  throw new Error('SUPABASE_SERVICE_ROLE_KEY is required');\r\n}\r\n\r\nexport const supabase = createClient(\r\n  process.env.SUPABASE_URL,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false,\r\n    },\r\n  }\r\n);\r\n\r\nexport const getRestaurantInvite = async (token: string) => {\r\n  const { data, error } = await supabase\r\n    .from('restaurant_invitations')\r\n    .select('*')\r\n    .eq('token', token)\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new APIError(500, 'Failed to fetch restaurant invitation', 'DATABASE_ERROR');\r\n  }\r\n\r\n  if (!data) {\r\n    throw new APIError(404, 'Invitation not found', 'INVITATION_NOT_FOUND');\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\nexport const createRestaurant = async (data: {\r\n  name: string;\r\n  email: string;\r\n  subscription_id: string;\r\n  membership_tier: string;\r\n}) => {\r\n  const { data: restaurant, error } = await supabase\r\n    .from('restaurants')\r\n    .insert([data])\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new APIError(500, 'Failed to create restaurant', 'DATABASE_ERROR');\r\n  }\r\n\r\n  return restaurant;\r\n};\r\n\r\nexport const updateRestaurantInvite = async (token: string, data: {\r\n  status: 'accepted' | 'expired' | 'in_progress';\r\n  accepted_at?: string;\r\n}) => {\r\n  const { error } = await supabase\r\n    .from('restaurant_invitations')\r\n    .update(data)\r\n    .eq('token', token);\r\n\r\n  if (error) {\r\n    throw new APIError(500, 'Failed to update restaurant invitation', 'DATABASE_ERROR');\r\n  }\r\n}; ", "import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { ZodError } from 'zod';\r\n\r\nexport class APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\n// Helper to set common headers for all responses\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nexport const errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  // Handle preflight requests\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof ZodError) {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: 'Validation error',\r\n        code: 'VALIDATION_ERROR',\r\n        details: error.errors,\r\n      },\r\n    });\r\n  }\r\n\r\n  // Handle Stripe errors\r\n  if (error instanceof Error && error.name === 'StripeError') {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: 'STRIPE_ERROR',\r\n      },\r\n    });\r\n  }\r\n\r\n  // Default error\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nexport const withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      // Handle preflight requests\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n}; "],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAA6B;;;ACC7B,iBAAyB;AAElB,IAAM,WAAN,cAAuB,MAAM;AAAA,EAClC,YACS,YACP,SACO,MACP;AACA,UAAM,OAAO;AAJN;AAEA;AAGP,SAAK,OAAO;AAAA,EACd;AACF;;;ADTA,IAAI,CAAC,QAAQ,IAAI,cAAc;AAC7B,QAAM,IAAI,MAAM,0BAA0B;AAC5C;AAEA,IAAI,CAAC,QAAQ,IAAI,2BAA2B;AAC1C,QAAM,IAAI,MAAM,uCAAuC;AACzD;AAEO,IAAM,eAAW;AAAA,EACtB,QAAQ,IAAI;AAAA,EACZ,QAAQ,IAAI;AAAA,EACZ;AAAA,IACE,MAAM;AAAA,MACJ,kBAAkB;AAAA,MAClB,gBAAgB;AAAA,IAClB;AAAA,EACF;AACF;AAEO,IAAM,sBAAsB,OAAO,UAAkB;AAC1D,QAAM,EAAE,MAAM,MAAM,IAAI,MAAM,SAC3B,KAAK,wBAAwB,EAC7B,OAAO,GAAG,EACV,GAAG,SAAS,KAAK,EACjB,OAAO;AAEV,MAAI,OAAO;AACT,UAAM,IAAI,SAAS,KAAK,yCAAyC,gBAAgB;AAAA,EACnF;AAEA,MAAI,CAAC,MAAM;AACT,UAAM,IAAI,SAAS,KAAK,wBAAwB,sBAAsB;AAAA,EACxE;AAEA,SAAO;AACT;AAEO,IAAM,mBAAmB,OAAO,SAKjC;AACJ,QAAM,EAAE,MAAM,YAAY,MAAM,IAAI,MAAM,SACvC,KAAK,aAAa,EAClB,OAAO,CAAC,IAAI,CAAC,EACb,OAAO,EACP,OAAO;AAEV,MAAI,OAAO;AACT,UAAM,IAAI,SAAS,KAAK,+BAA+B,gBAAgB;AAAA,EACzE;AAEA,SAAO;AACT;AAEO,IAAM,yBAAyB,OAAO,OAAe,SAGtD;AACJ,QAAM,EAAE,MAAM,IAAI,MAAM,SACrB,KAAK,wBAAwB,EAC7B,OAAO,IAAI,EACX,GAAG,SAAS,KAAK;AAEpB,MAAI,OAAO;AACT,UAAM,IAAI,SAAS,KAAK,0CAA0C,gBAAgB;AAAA,EACpF;AACF;",
  "names": []
}

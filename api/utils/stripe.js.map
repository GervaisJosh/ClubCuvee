{
  "version": 3,
  "sources": ["stripe.ts", "error-handler.ts"],
  "sourcesContent": ["import Stripe from 'stripe';\r\nimport { APIError } from './error-handler';\r\n\r\nif (!process.env.STRIPE_SECRET_KEY) {\r\n  throw new Error('STRIPE_SECRET_KEY is required');\r\n}\r\n\r\nif (!process.env.STRIPE_WEBHOOK_SECRET) {\r\n  throw new Error('STRIPE_WEBHOOK_SECRET is required');\r\n}\r\n\r\nexport const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\r\n  apiVersion: '2025-02-24.acacia',\r\n  typescript: true,\r\n});\r\n\r\nexport const verifyStripeWebhook = (signature: string, payload: string) => {\r\n  try {\r\n    return stripe.webhooks.constructEvent(\r\n      payload,\r\n      signature,\r\n      process.env.STRIPE_WEBHOOK_SECRET!\r\n    );\r\n  } catch (err) {\r\n    throw new APIError(400, 'Invalid webhook signature', 'INVALID_SIGNATURE');\r\n  }\r\n};\r\n\r\nexport const createCheckoutSession = async (data: {\r\n  restaurantName: string;\r\n  email: string;\r\n  membershipTier: string;\r\n  successUrl: string;\r\n  cancelUrl: string;\r\n}) => {\r\n  try {\r\n    const session = await stripe.checkout.sessions.create({\r\n      mode: 'subscription',\r\n      payment_method_types: ['card'],\r\n      line_items: [\r\n        {\r\n          price: process.env[`STRIPE_PRICE_ID_${data.membershipTier.toUpperCase()}`],\r\n          quantity: 1,\r\n        },\r\n      ],\r\n      customer_email: data.email,\r\n      metadata: {\r\n        restaurantName: data.restaurantName,\r\n        membershipTier: data.membershipTier,\r\n      },\r\n      success_url: data.successUrl,\r\n      cancel_url: data.cancelUrl,\r\n    });\r\n\r\n    return session;\r\n  } catch (err) {\r\n    if (err instanceof Stripe.errors.StripeError) {\r\n      throw new APIError(400, err.message, 'STRIPE_ERROR');\r\n    }\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getSubscription = async (subscriptionId: string) => {\r\n  try {\r\n    return await stripe.subscriptions.retrieve(subscriptionId);\r\n  } catch (err) {\r\n    if (err instanceof Stripe.errors.StripeError) {\r\n      throw new APIError(400, err.message, 'STRIPE_ERROR');\r\n    }\r\n    throw err;\r\n  }\r\n}; ", "import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { ZodError } from 'zod';\r\n\r\nexport class APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nexport const errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof ZodError) {\r\n    return res.status(400).json({\r\n      error: {\r\n        message: 'Validation error',\r\n        code: 'VALIDATION_ERROR',\r\n        details: error.errors,\r\n      },\r\n    });\r\n  }\r\n\r\n  // Handle Stripe errors\r\n  if (error instanceof Error && error.name === 'StripeError') {\r\n    return res.status(400).json({\r\n      error: {\r\n        message: error.message,\r\n        code: 'STRIPE_ERROR',\r\n      },\r\n    });\r\n  }\r\n\r\n  // Default error\r\n  return res.status(500).json({\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nexport const withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n}; "],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAmB;;;ACCnB,iBAAyB;AAElB,IAAM,WAAN,cAAuB,MAAM;AAAA,EAClC,YACS,YACP,SACO,MACP;AACA,UAAM,OAAO;AAJN;AAEA;AAGP,SAAK,OAAO;AAAA,EACd;AACF;;;ADTA,IAAI,CAAC,QAAQ,IAAI,mBAAmB;AAClC,QAAM,IAAI,MAAM,+BAA+B;AACjD;AAEA,IAAI,CAAC,QAAQ,IAAI,uBAAuB;AACtC,QAAM,IAAI,MAAM,mCAAmC;AACrD;AAEO,IAAM,SAAS,IAAI,cAAAA,QAAO,QAAQ,IAAI,mBAAmB;AAAA,EAC9D,YAAY;AAAA,EACZ,YAAY;AACd,CAAC;AAEM,IAAM,sBAAsB,CAAC,WAAmB,YAAoB;AACzE,MAAI;AACF,WAAO,OAAO,SAAS;AAAA,MACrB;AAAA,MACA;AAAA,MACA,QAAQ,IAAI;AAAA,IACd;AAAA,EACF,SAAS,KAAK;AACZ,UAAM,IAAI,SAAS,KAAK,6BAA6B,mBAAmB;AAAA,EAC1E;AACF;AAEO,IAAM,wBAAwB,OAAO,SAMtC;AACJ,MAAI;AACF,UAAM,UAAU,MAAM,OAAO,SAAS,SAAS,OAAO;AAAA,MACpD,MAAM;AAAA,MACN,sBAAsB,CAAC,MAAM;AAAA,MAC7B,YAAY;AAAA,QACV;AAAA,UACE,OAAO,QAAQ,IAAI,mBAAmB,KAAK,eAAe,YAAY,CAAC,EAAE;AAAA,UACzE,UAAU;AAAA,QACZ;AAAA,MACF;AAAA,MACA,gBAAgB,KAAK;AAAA,MACrB,UAAU;AAAA,QACR,gBAAgB,KAAK;AAAA,QACrB,gBAAgB,KAAK;AAAA,MACvB;AAAA,MACA,aAAa,KAAK;AAAA,MAClB,YAAY,KAAK;AAAA,IACnB,CAAC;AAED,WAAO;AAAA,EACT,SAAS,KAAK;AACZ,QAAI,eAAe,cAAAA,QAAO,OAAO,aAAa;AAC5C,YAAM,IAAI,SAAS,KAAK,IAAI,SAAS,cAAc;AAAA,IACrD;AACA,UAAM;AAAA,EACR;AACF;AAEO,IAAM,kBAAkB,OAAO,mBAA2B;AAC/D,MAAI;AACF,WAAO,MAAM,OAAO,cAAc,SAAS,cAAc;AAAA,EAC3D,SAAS,KAAK;AACZ,QAAI,eAAe,cAAAA,QAAO,OAAO,aAAa;AAC5C,YAAM,IAAI,SAAS,KAAK,IAAI,SAAS,cAAc;AAAA,IACrD;AACA,UAAM;AAAA,EACR;AACF;",
  "names": ["Stripe"]
}

{
  "version": 3,
  "sources": ["adminUtils.ts", "../../lib/supabaseAdmin.ts"],
  "sourcesContent": ["import { supabaseAdmin } from '../../lib/supabaseAdmin';\r\n\r\n/**\r\n * Sets the is_admin flag for a user\r\n * @param userId The user ID to update\r\n * @param isAdmin Boolean indicating whether the user should be an admin\r\n * @returns Object with success status and data/error message\r\n */\r\nexport const setUserAdminStatus = async (userId: string, isAdmin: boolean) => {\r\n  try {\r\n    // Update the user profile\r\n    const { data, error } = await supabaseAdmin\r\n      .from('users')\r\n      .update({ is_admin: isAdmin })\r\n      .eq('local_id', userId) // Changed from 'id' to 'local_id'\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) {\r\n      return { \r\n        success: false, \r\n        error: `Failed to update admin status: ${error.message}` \r\n      };\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      data\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      error: `An unexpected error occurred: ${error.message}`\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Checks if a user is an admin by auth ID\r\n * @param authId The auth user ID to check\r\n * @returns Object with isAdmin status and error message if applicable\r\n */\r\nexport const checkUserAdminStatus = async (authId: string) => {\r\n  try {\r\n    const { data, error } = await supabaseAdmin\r\n      .from('users')\r\n      .select('is_admin')\r\n      .eq('auth_id', authId) // Use auth_id to match the auth user\r\n      .single();\r\n    \r\n    if (error) {\r\n      return { \r\n        success: false, \r\n        isAdmin: false,\r\n        error: `Failed to check admin status: ${error.message}` \r\n      };\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      isAdmin: !!data?.is_admin\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      isAdmin: false,\r\n      error: `An unexpected error occurred: ${error.message}`\r\n    };\r\n  }\r\n};", "import { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase with service role key for admin operations\nexport const supabaseAdmin = createClient(\n  process.env.SUPABASE_URL as string,\n  process.env.SUPABASE_SERVICE_ROLE_KEY as string,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n); "],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,yBAA6B;AAGtB,IAAM,oBAAgB;AAAA,EAC3B,QAAQ,IAAI;AAAA,EACZ,QAAQ,IAAI;AAAA,EACZ;AAAA,IACE,MAAM;AAAA,MACJ,kBAAkB;AAAA,MAClB,gBAAgB;AAAA,IAClB;AAAA,EACF;AACF;;;ADJO,IAAM,qBAAqB,OAAO,QAAgB,YAAqB;AAC5E,MAAI;AAEF,UAAM,EAAE,MAAM,MAAM,IAAI,MAAM,cAC3B,KAAK,OAAO,EACZ,OAAO,EAAE,UAAU,QAAQ,CAAC,EAC5B,GAAG,YAAY,MAAM,EACrB,OAAO,EACP,OAAO;AAEV,QAAI,OAAO;AACT,aAAO;AAAA,QACL,SAAS;AAAA,QACT,OAAO,kCAAkC,MAAM,OAAO;AAAA,MACxD;AAAA,IACF;AAEA,WAAO;AAAA,MACL,SAAS;AAAA,MACT;AAAA,IACF;AAAA,EACF,SAAS,OAAY;AACnB,WAAO;AAAA,MACL,SAAS;AAAA,MACT,OAAO,iCAAiC,MAAM,OAAO;AAAA,IACvD;AAAA,EACF;AACF;AAOO,IAAM,uBAAuB,OAAO,WAAmB;AAC5D,MAAI;AACF,UAAM,EAAE,MAAM,MAAM,IAAI,MAAM,cAC3B,KAAK,OAAO,EACZ,OAAO,UAAU,EACjB,GAAG,WAAW,MAAM,EACpB,OAAO;AAEV,QAAI,OAAO;AACT,aAAO;AAAA,QACL,SAAS;AAAA,QACT,SAAS;AAAA,QACT,OAAO,iCAAiC,MAAM,OAAO;AAAA,MACvD;AAAA,IACF;AAEA,WAAO;AAAA,MACL,SAAS;AAAA,MACT,SAAS,CAAC,CAAC,MAAM;AAAA,IACnB;AAAA,EACF,SAAS,OAAY;AACnB,WAAO;AAAA,MACL,SAAS;AAAA,MACT,SAAS;AAAA,MACT,OAAO,iCAAiC,MAAM,OAAO;AAAA,IACvD;AAAA,EACF;AACF;",
  "names": []
}

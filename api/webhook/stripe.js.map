{
  "version": 3,
  "sources": ["stripe.ts"],
  "sourcesContent": ["import type { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport Stripe from 'stripe';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport type { Database } from '../../src/types/supabase';\r\n\r\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\r\n  apiVersion: '2025-02-24.acacia',\r\n});\r\n\r\nconst supabaseUrl = process.env.VITE_SUPABASE_URL;\r\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\r\nconst webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\r\n\r\nif (!supabaseUrl || !supabaseServiceKey || !webhookSecret) {\r\n  throw new Error('Missing required environment variables');\r\n}\r\n\r\nconst supabase = createClient<Database>(supabaseUrl, supabaseServiceKey);\r\n\r\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\r\n  if (req.method !== 'POST') {\r\n    return res.status(405).json({ error: 'Method not allowed' });\r\n  }\r\n\r\n  const signature = req.headers['stripe-signature'];\r\n  \r\n  if (!signature || typeof signature !== 'string') {\r\n    return res.status(400).json({ error: 'Missing stripe-signature header' });\r\n  }\r\n\r\n  let event: Stripe.Event;\r\n\r\n  try {\r\n    // Verify webhook signature\r\n    event = stripe.webhooks.constructEvent(req.body, signature, webhookSecret);\r\n  } catch (error: any) {\r\n    console.error('Webhook signature verification failed:', error.message);\r\n    return res.status(400).json({ error: 'Invalid signature' });\r\n  }\r\n\r\n  try {\r\n    // Handle the event\r\n    switch (event.type) {\r\n      case 'checkout.session.completed':\r\n        await handleCheckoutSessionCompleted(event.data.object as Stripe.Checkout.Session);\r\n        break;\r\n\r\n      case 'invoice.payment_succeeded':\r\n        await handleInvoicePaymentSucceeded(event.data.object as Stripe.Invoice);\r\n        break;\r\n\r\n      case 'invoice.payment_failed':\r\n        await handleInvoicePaymentFailed(event.data.object as Stripe.Invoice);\r\n        break;\r\n\r\n      case 'customer.subscription.created':\r\n        await handleSubscriptionCreated(event.data.object as Stripe.Subscription);\r\n        break;\r\n\r\n      case 'customer.subscription.updated':\r\n        await handleSubscriptionUpdated(event.data.object as Stripe.Subscription);\r\n        break;\r\n\r\n      case 'customer.subscription.deleted':\r\n        await handleSubscriptionDeleted(event.data.object as Stripe.Subscription);\r\n        break;\r\n\r\n      default:\r\n        console.log(`Unhandled event type: ${event.type}`);\r\n    }\r\n\r\n    res.status(200).json({ received: true });\r\n  } catch (error: any) {\r\n    console.error('Error processing webhook:', error);\r\n    res.status(500).json({ error: 'Webhook processing failed' });\r\n  }\r\n}\r\n\r\nasync function handleCheckoutSessionCompleted(session: Stripe.Checkout.Session) {\r\n  console.log('Processing checkout.session.completed:', session.id);\r\n\r\n  if (session.mode === 'subscription' && session.subscription) {\r\n    const metadata = session.metadata || {};\r\n    \r\n    // Handle business onboarding checkout\r\n    if (metadata.onboarding_token) {\r\n      await handleBusinessOnboardingCheckout(session, metadata.onboarding_token);\r\n    }\r\n    \r\n    // Handle customer membership checkout\r\n    else if (metadata.business_id && metadata.tier_id) {\r\n      await handleCustomerMembershipCheckout(session, metadata.business_id, metadata.tier_id);\r\n    }\r\n  }\r\n}\r\n\r\nasync function handleBusinessOnboardingCheckout(session: Stripe.Checkout.Session, token: string) {\r\n  try {\r\n    // Update onboarding token status\r\n    const { error: tokenError } = await supabase\r\n      .from('onboarding_tokens')\r\n      .update({\r\n        status: 'payment_completed',\r\n        stripe_session_id: session.id,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('token', token);\r\n\r\n    if (tokenError) {\r\n      console.error('Error updating onboarding token:', tokenError);\r\n    }\r\n\r\n    console.log(`Business onboarding payment completed for token: ${token}`);\r\n  } catch (error) {\r\n    console.error('Error handling business onboarding checkout:', error);\r\n  }\r\n}\r\n\r\nasync function handleCustomerMembershipCheckout(session: Stripe.Checkout.Session, businessId: string, tierId: string) {\r\n  try {\r\n    const subscription = await stripe.subscriptions.retrieve(session.subscription as string);\r\n    const metadata = session.metadata || {};\r\n    \r\n    // Handle private invitation flow\r\n    if (metadata.invitation_token) {\r\n      await handlePrivateInvitationCheckout(session, metadata.invitation_token, businessId, tierId);\r\n    } else {\r\n      // Legacy public checkout (deprecated)\r\n      const { error: membershipError } = await supabase\r\n        .from('customer_memberships')\r\n        .insert({\r\n          business_id: businessId,\r\n          tier_id: tierId,\r\n          stripe_subscription_id: subscription.id,\r\n          status: 'active'\r\n        });\r\n\r\n      if (membershipError) {\r\n        console.error('Error creating customer membership:', membershipError);\r\n      } else {\r\n        console.log(`Customer membership created for business: ${businessId}, tier: ${tierId}`);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error handling customer membership checkout:', error);\r\n  }\r\n}\r\n\r\nasync function handlePrivateInvitationCheckout(session: Stripe.Checkout.Session, invitationToken: string, businessId: string, tierId: string) {\r\n  try {\r\n    const subscription = await stripe.subscriptions.retrieve(session.subscription as string);\r\n    \r\n    // Get the invitation details\r\n    const { data: invitation, error: inviteError } = await supabase\r\n      .from('customer_invitations')\r\n      .select('*')\r\n      .eq('token', invitationToken)\r\n      .single();\r\n\r\n    if (inviteError || !invitation) {\r\n      console.error('Error finding invitation:', inviteError);\r\n      return;\r\n    }\r\n\r\n    // Mark invitation as used\r\n    const { error: updateInviteError } = await supabase\r\n      .from('customer_invitations')\r\n      .update({\r\n        status: 'used',\r\n        used_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('id', invitation.id);\r\n\r\n    if (updateInviteError) {\r\n      console.error('Error updating invitation status:', updateInviteError);\r\n    }\r\n\r\n    // Find the customer user by email from auth.users\r\n    const { data: authUsers, error: userError } = await supabase.auth.admin.listUsers();\r\n    \r\n    if (userError || !authUsers.users) {\r\n      console.error('Error finding customer user:', userError);\r\n      return;\r\n    }\r\n\r\n    const customerUser = authUsers.users.find(user => user.email === invitation.email);\r\n    \r\n    if (!customerUser) {\r\n      console.error('Customer user not found for email:', invitation.email);\r\n      return;\r\n    }\r\n\r\n    // Create customer membership record\r\n    const { error: membershipError } = await supabase\r\n      .from('customer_memberships')\r\n      .insert({\r\n        customer_user_id: customerUser.id,\r\n        business_id: businessId,\r\n        tier_id: tierId,\r\n        stripe_subscription_id: subscription.id,\r\n        invitation_token: invitationToken,\r\n        status: 'active'\r\n      });\r\n\r\n    if (membershipError) {\r\n      console.error('Error creating customer membership:', membershipError);\r\n    } else {\r\n      console.log(`Private customer membership created for invitation: ${invitationToken}`);\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Error handling private invitation checkout:', error);\r\n  }\r\n}\r\n\r\nasync function handleInvoicePaymentSucceeded(invoice: Stripe.Invoice) {\r\n  console.log('Processing invoice.payment_succeeded:', invoice.id);\r\n\r\n  if (invoice.subscription) {\r\n    // Update subscription status to active\r\n    await updateSubscriptionStatus(invoice.subscription as string, 'active');\r\n    \r\n    // Update customer membership status if applicable\r\n    await updateCustomerMembershipStatus(invoice.subscription as string, 'active');\r\n  }\r\n}\r\n\r\nasync function handleInvoicePaymentFailed(invoice: Stripe.Invoice) {\r\n  console.log('Processing invoice.payment_failed:', invoice.id);\r\n\r\n  if (invoice.subscription) {\r\n    // Update subscription status to past_due\r\n    await updateSubscriptionStatus(invoice.subscription as string, 'past_due');\r\n    \r\n    // Update customer membership status if applicable\r\n    await updateCustomerMembershipStatus(invoice.subscription as string, 'past_due');\r\n  }\r\n}\r\n\r\nasync function handleSubscriptionCreated(subscription: Stripe.Subscription) {\r\n  console.log('Processing customer.subscription.created:', subscription.id);\r\n\r\n  // Create or update subscription record\r\n  await upsertSubscriptionRecord(subscription);\r\n}\r\n\r\nasync function handleSubscriptionUpdated(subscription: Stripe.Subscription) {\r\n  console.log('Processing customer.subscription.updated:', subscription.id);\r\n\r\n  // Update subscription record\r\n  await upsertSubscriptionRecord(subscription);\r\n  \r\n  // Update customer membership if status changed\r\n  if (subscription.status === 'active') {\r\n    await updateCustomerMembershipStatus(subscription.id, 'active');\r\n  } else if (['past_due', 'canceled', 'unpaid'].includes(subscription.status)) {\r\n    await updateCustomerMembershipStatus(subscription.id, subscription.status);\r\n  }\r\n}\r\n\r\nasync function handleSubscriptionDeleted(subscription: Stripe.Subscription) {\r\n  console.log('Processing customer.subscription.deleted:', subscription.id);\r\n\r\n  // Mark subscription as canceled\r\n  await updateSubscriptionStatus(subscription.id, 'canceled');\r\n  \r\n  // Update customer membership status\r\n  await updateCustomerMembershipStatus(subscription.id, 'canceled');\r\n}\r\n\r\nasync function updateSubscriptionStatus(subscriptionId: string, status: string) {\r\n  try {\r\n    // Update business subscriptions\r\n    const { error: businessSubError } = await supabase\r\n      .from('subscriptions')\r\n      .update({\r\n        status,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('stripe_subscription_id', subscriptionId);\r\n\r\n    if (businessSubError) {\r\n      console.error('Error updating business subscription status:', businessSubError);\r\n    }\r\n\r\n    // Update business status based on subscription\r\n    if (status === 'active') {\r\n      // First get the business IDs\r\n      const { data: subscriptionData } = await supabase\r\n        .from('subscriptions')\r\n        .select('business_id')\r\n        .eq('stripe_subscription_id', subscriptionId);\r\n\r\n      if (subscriptionData && subscriptionData.length > 0) {\r\n        const businessIds = subscriptionData.map(sub => sub.business_id);\r\n        \r\n        const { error: businessError } = await supabase\r\n          .from('businesses')\r\n          .update({\r\n            subscription_status: 'active',\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .in('id', businessIds);\r\n\r\n        if (businessError) {\r\n          console.error('Error updating business status:', businessError);\r\n        }\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating subscription status:', error);\r\n  }\r\n}\r\n\r\nasync function updateCustomerMembershipStatus(subscriptionId: string, status: string) {\r\n  try {\r\n    const { error } = await supabase\r\n      .from('customer_memberships')\r\n      .update({\r\n        status,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('stripe_subscription_id', subscriptionId);\r\n\r\n    if (error) {\r\n      console.error('Error updating customer membership status:', error);\r\n    }\r\n  } catch (error) {\r\n    console.error('Error updating customer membership status:', error);\r\n  }\r\n}\r\n\r\nasync function upsertSubscriptionRecord(subscription: Stripe.Subscription) {\r\n  try {\r\n    const metadata = subscription.metadata || {};\r\n    \r\n    // For business subscriptions\r\n    if (metadata.business_id) {\r\n      const { error } = await supabase\r\n        .from('subscriptions')\r\n        .upsert({\r\n          business_id: metadata.business_id,\r\n          stripe_subscription_id: subscription.id,\r\n          stripe_customer_id: subscription.customer as string,\r\n          stripe_price_id: subscription.items.data[0]?.price.id || '',\r\n          status: subscription.status,\r\n          current_period_start: new Date(subscription.current_period_start * 1000).toISOString(),\r\n          current_period_end: new Date(subscription.current_period_end * 1000).toISOString(),\r\n          updated_at: new Date().toISOString()\r\n        });\r\n\r\n      if (error) {\r\n        console.error('Error upserting business subscription:', error);\r\n      }\r\n    }\r\n  } catch (error) {\r\n    console.error('Error upserting subscription record:', error);\r\n  }\r\n}"],
  "mappings": "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",
  "names": ["Stripe"]
}

{
  "version": 3,
  "sources": ["create-customer-record.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport Stripe from 'stripe';\r\n\r\n// Initialize Stripe\r\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\r\n  apiVersion: '2025-02-24.acacia',\r\n  typescript: true,\r\n});\r\n\r\n// Initialize Supabase with service role key to bypass RLS\r\nconst supabaseAdmin = createClient(\r\n  process.env.SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false\r\n    }\r\n  }\r\n);\r\n\r\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\r\n  // Enable CORS\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\r\n\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (req.method !== 'POST') {\r\n    return res.status(405).json({ error: 'Method not allowed' });\r\n  }\r\n\r\n  try {\r\n    const { sessionId } = req.body;\r\n\r\n    if (!sessionId) {\r\n      return res.status(400).json({ \r\n        error: 'Missing required parameter: sessionId' \r\n      });\r\n    }\r\n\r\n    console.log('Creating customer record for session:', sessionId);\r\n\r\n    // Retrieve the checkout session from Stripe\r\n    const session = await stripe.checkout.sessions.retrieve(sessionId, {\r\n      expand: ['subscription', 'customer']\r\n    });\r\n\r\n    // Verify payment was successful\r\n    if (session.payment_status !== 'paid') {\r\n      return res.status(400).json({ \r\n        error: 'Payment not completed' \r\n      });\r\n    }\r\n\r\n    // Get subscription and customer details\r\n    const subscription = session.subscription as Stripe.Subscription;\r\n    const customer = session.customer as Stripe.Customer;\r\n\r\n    if (!subscription || !customer) {\r\n      return res.status(400).json({ \r\n        error: 'Invalid subscription or customer data' \r\n      });\r\n    }\r\n\r\n    // Get metadata from the session\r\n    const metadata = session.metadata || {};\r\n    \r\n    // Validate required metadata\r\n    if (!metadata.businessId || !metadata.tierId) {\r\n      return res.status(400).json({ \r\n        error: 'Missing required metadata: businessId and tierId' \r\n      });\r\n    }\r\n\r\n    console.log('Stripe data retrieved:', {\r\n      customerId: customer.id,\r\n      subscriptionId: subscription.id,\r\n      email: customer.email || session.customer_email,\r\n      metadata\r\n    });\r\n\r\n    // Check if customer already exists\r\n    const { data: existingCustomer, error: checkError } = await supabaseAdmin\r\n      .from('customers')\r\n      .select('id')\r\n      .eq('stripe_customer_id', customer.id)\r\n      .single();\r\n\r\n    if (existingCustomer) {\r\n      console.log('Customer already exists:', existingCustomer.id);\r\n      \r\n      // Return existing customer data\r\n      const { data: customerData, error: fetchError } = await supabaseAdmin\r\n        .from('customers')\r\n        .select('*')\r\n        .eq('id', existingCustomer.id)\r\n        .single();\r\n\r\n      if (fetchError) {\r\n        console.error('Error fetching existing customer:', fetchError);\r\n        return res.status(500).json({ \r\n          error: 'Failed to fetch existing customer' \r\n        });\r\n      }\r\n\r\n      return res.status(200).json({ \r\n        success: true,\r\n        customer: customerData,\r\n        isNew: false\r\n      });\r\n    }\r\n\r\n    // Create new customer record with correct column names\r\n    const customerData = {\r\n      business_id: metadata.businessId,\r\n      tier_id: metadata.tierId,\r\n      auth_id: null, // Will be set when customer creates account\r\n      name: metadata.customerName || 'Unknown',\r\n      email: customer.email || session.customer_email || '',\r\n      phone: metadata.customerPhone || '',\r\n      address: metadata.customerAddress || '',\r\n      city: metadata.customerCity || '',\r\n      state: metadata.customerState || '',\r\n      zip_code: metadata.customerZipCode || '',\r\n      wine_preferences: metadata.customerWinePreferences || null,\r\n      special_requests: metadata.customerSpecialRequests || null,\r\n      stripe_customer_id: customer.id,\r\n      stripe_subscription_id: subscription.id,\r\n      subscription_status: 'active', // Using subscription_status instead of status\r\n      subscription_start_date: new Date().toISOString(),\r\n      has_completed_survey: false,\r\n      has_seen_tutorial: false\r\n    };\r\n\r\n    console.log('Creating customer with data:', customerData);\r\n\r\n    const { data: newCustomer, error: insertError } = await supabaseAdmin\r\n      .from('customers')\r\n      .insert(customerData)\r\n      .select()\r\n      .single();\r\n\r\n    if (insertError) {\r\n      console.error('Error creating customer:', insertError);\r\n      return res.status(500).json({ \r\n        error: 'Failed to create customer record',\r\n        details: insertError.message\r\n      });\r\n    }\r\n\r\n    console.log('Customer created successfully:', newCustomer.id);\r\n\r\n    return res.status(200).json({ \r\n      success: true,\r\n      customer: newCustomer,\r\n      isNew: true\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error in create-customer-record:', error);\r\n    \r\n    if (error instanceof Stripe.errors.StripeError) {\r\n      return res.status(400).json({ \r\n        error: error.message \r\n      });\r\n    }\r\n    \r\n    return res.status(500).json({ \r\n      error: 'Failed to process customer creation',\r\n      message: error instanceof Error ? error.message : 'Unknown error'\r\n    });\r\n  }\r\n}"],
  "mappings": "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",
  "names": ["Stripe", "customerData"]
}

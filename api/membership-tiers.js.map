{
  "version": 3,
  "sources": ["membership-tiers.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport Stripe from 'stripe';\r\nimport { ZodError } from 'zod';\r\n\r\n// Inline error handling (no external dependencies)\r\nclass APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nconst errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof ZodError) {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: 'Validation error',\r\n        code: 'VALIDATION_ERROR',\r\n        details: error.errors,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof Error && error.name === 'StripeError') {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: 'STRIPE_ERROR',\r\n      },\r\n    });\r\n  }\r\n\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nconst withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n};\r\n\r\nconst handler = async (req: VercelRequest, res: VercelResponse) => {\r\n  // Create Supabase admin client directly in the API (no external dependencies)\r\n  const supabaseAdmin = createClient(\r\n    process.env.SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false\r\n      }\r\n    }\r\n  );\r\n\r\n  // Initialize Stripe client directly in the API\r\n  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\r\n    apiVersion: '2025-02-24.acacia',\r\n    typescript: true,\r\n  });\r\n\r\n  // Only allow POST (create) and PUT (update) requests\r\n  if (req.method !== 'POST' && req.method !== 'PUT') {\r\n    throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n  }\r\n\r\n  const {\r\n    id,               // Optional: If updating an existing tier\r\n    name,             // Required: Tier name\r\n    price,            // Required: Monthly price\r\n    description,      // Optional: Tier description\r\n    restaurant_id,    // Required: ID of the parent restaurant\r\n  } = req.body;\r\n\r\n  // Validate required fields\r\n  if (!name || !price || !restaurant_id) {\r\n    throw new APIError(400, 'Missing required fields: name, price, and restaurant_id are required', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Validate price format\r\n  const priceNumber = parseFloat(price);\r\n  if (isNaN(priceNumber) || priceNumber <= 0) {\r\n    throw new APIError(400, 'Price must be a positive number', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Get restaurant info for product metadata/description\r\n  const { data: restaurant, error: restaurantError } = await supabaseAdmin\r\n    .from('restaurants')\r\n    .select('name')\r\n    .eq('id', restaurant_id)\r\n    .single();\r\n\r\n  if (restaurantError) {\r\n    console.error('Error fetching restaurant:', restaurantError);\r\n    throw new APIError(404, `Restaurant not found: ${restaurantError.message}`, 'NOT_FOUND');\r\n  }\r\n\r\n  // If restaurant doesn't exist, return error\r\n  if (!restaurant) {\r\n    throw new APIError(404, `Restaurant with ID ${restaurant_id} not found`, 'NOT_FOUND');\r\n  }\r\n\r\n  // Prepare tier data for database\r\n  const tierData = {\r\n    name,\r\n    price: priceNumber.toString(), // Store as string in database\r\n    description: description || '',\r\n    restaurant_id,\r\n    updated_at: new Date().toISOString()\r\n  };\r\n\r\n  let tier: any;\r\n  let existingTier: any = null;\r\n\r\n  // UPDATE FLOW: If ID is provided, update an existing tier\r\n  if (id) {\r\n    // First fetch the existing tier\r\n    const { data: fetchedTier, error: fetchError } = await supabaseAdmin\r\n      .from('membership_tiers')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .eq('restaurant_id', restaurant_id) // Security check\r\n      .single();\r\n      \r\n    if (fetchError) {\r\n      throw new APIError(404, `Tier not found: ${fetchError.message}`, 'NOT_FOUND');\r\n    }\r\n    \r\n    existingTier = fetchedTier;\r\n    \r\n    // Update the tier in Supabase\r\n    const { data: updatedTier, error: updateError } = await supabaseAdmin\r\n      .from('membership_tiers')\r\n      .update(tierData)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n    \r\n    if (updateError) {\r\n      throw new APIError(500, `Failed to update tier: ${updateError.message}`, 'DATABASE_ERROR');\r\n    }\r\n    \r\n    tier = updatedTier;\r\n  } \r\n  // CREATE FLOW: Insert a new tier\r\n  else {\r\n    // Create a new tier in Supabase\r\n    const { data: newTier, error: insertError } = await supabaseAdmin\r\n      .from('membership_tiers')\r\n      .insert([{\r\n        ...tierData,\r\n        created_at: new Date().toISOString()\r\n      }])\r\n      .select()\r\n      .single();\r\n    \r\n    if (insertError) {\r\n      throw new APIError(500, `Failed to create tier: ${insertError.message}`, 'DATABASE_ERROR');\r\n    }\r\n    \r\n    tier = newTier;\r\n  }\r\n\r\n  // STRIPE INTEGRATION LOGIC\r\n  try {\r\n    // Case 1: Tier already has Stripe IDs\r\n    if (existingTier && existingTier.stripe_product_id && existingTier.stripe_price_id) {\r\n      // Check if we need to update Stripe product\r\n      const hasNameChanged = existingTier.name !== name;\r\n      const hasDescriptionChanged = existingTier.description !== description;\r\n      \r\n      if (hasNameChanged || hasDescriptionChanged) {\r\n        // Update the product details in Stripe\r\n        await stripe.products.update(existingTier.stripe_product_id, {\r\n          name: `${restaurant.name} - ${name}`,\r\n          description: description || `${name} membership tier`\r\n        });\r\n      }\r\n      \r\n      // Check if price has changed\r\n      const hasPriceChanged = parseFloat(existingTier.price) !== priceNumber;\r\n      \r\n      if (hasPriceChanged) {\r\n        // Stripe doesn't allow updating prices, so we create a new one\r\n        // and mark the old one as inactive\r\n        \r\n        // 1. Archive the old price (don't delete it for history)\r\n        await stripe.prices.update(existingTier.stripe_price_id, {\r\n          active: false\r\n        });\r\n        \r\n        // 2. Create new price\r\n        const newPrice = await stripe.prices.create({\r\n          product: existingTier.stripe_product_id,\r\n          unit_amount: Math.round(priceNumber * 100), // Convert to cents\r\n          currency: 'usd',\r\n          recurring: { interval: 'month' },\r\n          metadata: {\r\n            restaurant_id,\r\n            tier_id: tier.id\r\n          }\r\n        });\r\n        \r\n        // 3. Update the tier with the new price ID\r\n        const { error: priceUpdateError } = await supabaseAdmin\r\n          .from('membership_tiers')\r\n          .update({ \r\n            stripe_price_id: newPrice.id,\r\n            updated_at: new Date().toISOString()\r\n          })\r\n          .eq('id', tier.id);\r\n          \r\n        if (priceUpdateError) {\r\n          console.error('Error updating tier with new price ID:', priceUpdateError);\r\n        }\r\n        \r\n        // Update our return object\r\n        tier.stripe_price_id = newPrice.id;\r\n      }\r\n    }\r\n    // Case 2: Tier needs new Stripe product and price\r\n    else {\r\n      // Create a product in Stripe\r\n      const product = await stripe.products.create({\r\n        name: `${restaurant.name} - ${name}`,\r\n        description: description || `${name} membership tier`,\r\n        metadata: {\r\n          tier_id: tier.id,\r\n          restaurant_id\r\n        }\r\n      });\r\n\r\n      // Create a price for the product\r\n      const price = await stripe.prices.create({\r\n        product: product.id,\r\n        unit_amount: Math.round(priceNumber * 100), // Convert to cents\r\n        currency: 'usd',\r\n        recurring: { interval: 'month' },\r\n        metadata: {\r\n          tier_id: tier.id,\r\n          restaurant_id\r\n        }\r\n      });\r\n\r\n      // Update the tier with the Stripe IDs\r\n      const { data: updatedTier, error: updateError } = await supabaseAdmin\r\n        .from('membership_tiers')\r\n        .update({ \r\n          stripe_product_id: product.id,\r\n          stripe_price_id: price.id,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', tier.id)\r\n        .select()\r\n        .single();\r\n        \r\n      if (updateError) {\r\n        console.error('Error updating tier with Stripe IDs:', updateError);\r\n      } else {\r\n        // Update our return object\r\n        tier = updatedTier;\r\n      }\r\n    }\r\n  } catch (stripeError: any) {\r\n    console.error('Stripe integration error:', stripeError);\r\n    \r\n    // Don't fail the request, but include the error in the response\r\n    return res.status(200).json({\r\n      tier,\r\n      warning: `Tier saved but Stripe integration failed: ${stripeError.message}`\r\n    });\r\n  }\r\n\r\n  // Return the tier with stripe_price_id & stripe_product_id\r\n  return res.status(200).json(tier);\r\n};\r\n\r\nexport default withErrorHandler(handler);"],
  "mappings": "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",
  "names": ["handler", "Stripe", "price"]
}

{
  "version": 3,
  "sources": ["validate-business-invitation.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { ZodError } from 'zod';\r\n\r\n// Inline error handling and supabase client (no external dependencies)\r\nclass APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nconst errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof ZodError) {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: 'Validation error',\r\n        code: 'VALIDATION_ERROR',\r\n        details: error.errors,\r\n      },\r\n    });\r\n  }\r\n\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nconst withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n};\r\n\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  // Create Supabase admin client directly in the API (no external dependencies)\r\n  const supabaseAdmin = createClient(\r\n    process.env.SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false\r\n      }\r\n    }\r\n  );\r\n\r\n  // Support both GET and POST methods for frontend compatibility\r\n  if (!['GET', 'POST'].includes(req.method!)) {\r\n    throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n  }\r\n\r\n  // Get token from query params (GET) or body (POST)\r\n  const token = req.method === 'GET' ? req.query.token as string : req.body?.token;\r\n\r\n  if (!token) {\r\n    throw new APIError(400, 'Token is required', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Query restaurant_invitations table directly (the correct table)\r\n  const { data: inviteDetails, error: detailsError } = await supabaseAdmin\r\n    .from('restaurant_invitations')\r\n    .select('restaurant_name, email, tier, expires_at, status')\r\n    .eq('token', token)\r\n    .single();\r\n\r\n  if (detailsError || !inviteDetails) {\r\n    console.error('Error fetching invitation details:', detailsError);\r\n    throw new APIError(404, 'Invalid or expired invitation token', 'NOT_FOUND');\r\n  }\r\n\r\n  // Check if token is expired\r\n  if (new Date(inviteDetails.expires_at) < new Date()) {\r\n    throw new APIError(400, 'This invitation has expired', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Check if token is already used\r\n  if (inviteDetails.status === 'completed') {\r\n    throw new APIError(400, 'This invitation has already been used', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Get pricing tier UUID if tier name is provided\r\n  let pricing_tier_id = null;\r\n  if (inviteDetails.tier && inviteDetails.tier !== 'standard') {\r\n    const { data: tierData, error: tierError } = await supabaseAdmin\r\n      .from('business_pricing_tiers')\r\n      .select('id')\r\n      .eq('name', inviteDetails.tier)\r\n      .eq('is_active', true)\r\n      .single();\r\n    \r\n    if (!tierError && tierData) {\r\n      pricing_tier_id = tierData.id;\r\n    }\r\n  }\r\n\r\n  // Return data in the format expected by OnboardToken.tsx\r\n  res.status(200).json({\r\n    success: true,\r\n    data: {\r\n      is_valid: true,\r\n      business_name: inviteDetails.restaurant_name,  // Frontend expects business_name\r\n      business_email: inviteDetails.email,           // Frontend expects business_email  \r\n      pricing_tier: pricing_tier_id,                 // Frontend expects UUID, not tier name\r\n      expires_at: inviteDetails.expires_at\r\n    }\r\n  });\r\n});"],
  "mappings": "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",
  "names": []
}

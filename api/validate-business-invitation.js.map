{
  "version": 3,
  "sources": ["validate-business-invitation.ts", "../lib/supabaseAdmin.ts", "utils/error-handler.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { supabaseAdmin } from '../lib/supabaseAdmin';\r\nimport { withErrorHandler, APIError } from './utils/error-handler';\r\n\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  if (req.method !== 'POST') {\r\n    throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n  }\r\n\r\n  // Parse request body\r\n  const { token } = req.body;\r\n\r\n  if (!token) {\r\n    throw new APIError(400, 'Token is required', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Validate token format (should be UUID)\r\n  const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n  if (!uuidRegex.test(token)) {\r\n    throw new APIError(400, 'Invalid token format', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Call the database function to validate business invitation token\r\n  const { data, error } = await supabaseAdmin.rpc('validate_business_invitation_token', {\r\n    p_token: token\r\n  });\r\n\r\n  if (error) {\r\n    console.error('Error validating business invitation token:', error);\r\n    throw new APIError(500, 'Failed to validate invitation token', 'DATABASE_ERROR');\r\n  }\r\n\r\n  if (!data || data.length === 0) {\r\n    throw new APIError(404, 'Invalid or expired invitation token', 'NOT_FOUND');\r\n  }\r\n\r\n  const tokenData = data[0];\r\n\r\n  // Check if token is valid\r\n  if (!tokenData.is_valid) {\r\n    let reason = 'Invalid invitation token';\r\n    \r\n    if (tokenData.used) {\r\n      reason = 'This invitation has already been used';\r\n    } else if (new Date(tokenData.expires_at) < new Date()) {\r\n      reason = 'This invitation has expired';\r\n    }\r\n\r\n    throw new APIError(400, reason, 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Get additional invitation details\r\n  const { data: inviteDetails, error: detailsError } = await supabaseAdmin\r\n    .from('business_invites')\r\n    .select('business_name, business_email, pricing_tier, expires_at')\r\n    .eq('token', token)\r\n    .single();\r\n\r\n  if (detailsError) {\r\n    console.error('Error fetching invitation details:', detailsError);\r\n    throw new APIError(500, 'Failed to fetch invitation details', 'DATABASE_ERROR');\r\n  }\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    data: {\r\n      is_valid: true,\r\n      business_name: inviteDetails.business_name,\r\n      business_email: inviteDetails.business_email,\r\n      pricing_tier: inviteDetails.pricing_tier,\r\n      expires_at: inviteDetails.expires_at\r\n    }\r\n  });\r\n});", "import { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase with service role key for admin operations\nexport const supabaseAdmin = createClient(\n  process.env.SUPABASE_URL as string,\n  process.env.SUPABASE_SERVICE_ROLE_KEY as string,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n); ", "import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { ZodError } from 'zod';\r\n\r\nexport class APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\n// Helper to set common headers for all responses\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nexport const errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  // Handle preflight requests\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof ZodError) {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: 'Validation error',\r\n        code: 'VALIDATION_ERROR',\r\n        details: error.errors,\r\n      },\r\n    });\r\n  }\r\n\r\n  // Handle Stripe errors\r\n  if (error instanceof Error && error.name === 'StripeError') {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: 'STRIPE_ERROR',\r\n      },\r\n    });\r\n  }\r\n\r\n  // Default error\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nexport const withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      // Handle preflight requests\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n}; "],
  "mappings": "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",
  "names": []
}

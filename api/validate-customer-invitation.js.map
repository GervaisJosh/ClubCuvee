{
  "version": 3,
  "sources": ["validate-customer-invitation.ts"],
  "sourcesContent": ["import type { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// INLINE Supabase client (no external imports)\r\nconst supabaseAdmin = createClient(\r\n  process.env.SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false\r\n    }\r\n  }\r\n);\r\n\r\n// INLINE error handling (no external imports)\r\nclass APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nconst errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nconst withErrorHandling = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n};\r\n\r\nconst handler = async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  if (req.method !== 'POST') {\r\n    res.status(405).json({ error: 'Method not allowed' });\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const { token } = req.body;\r\n\r\n    if (!token) {\r\n      res.status(400).json({ error: 'Token is required' });\r\n      return;\r\n    }\r\n\r\n    // Get customer invitation with business and tier data\r\n    const { data: invitation, error: invitationError } = await supabaseAdmin\r\n      .from('customer_invitations')\r\n      .select(`\r\n        *,\r\n        businesses!inner (\r\n          id,\r\n          name,\r\n          website,\r\n          logo_url\r\n        )\r\n      `)\r\n      .eq('token', token)\r\n      .eq('status', 'pending')\r\n      .single();\r\n\r\n    if (invitationError || !invitation) {\r\n      res.status(404).json({ \r\n        error: 'Invalid or expired customer invitation' \r\n      });\r\n      return;\r\n    }\r\n\r\n    // Check if invitation has expired\r\n    const now = new Date();\r\n    const expiryDate = new Date(invitation.expires_at);\r\n\r\n    if (now > expiryDate) {\r\n      // Update status to expired\r\n      await supabaseAdmin\r\n        .from('customer_invitations')\r\n        .update({ \r\n          status: 'expired',\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('token', token);\r\n        \r\n      res.status(410).json({ \r\n        error: 'This invitation has expired' \r\n      });\r\n      return;\r\n    }\r\n\r\n    const business = invitation.businesses;\r\n\r\n    // Get membership tiers for this business\r\n    const { data: membershipTiers, error: tiersError } = await supabaseAdmin\r\n      .from('membership_tiers')\r\n      .select('*')\r\n      .eq('business_id', business.id)\r\n      .eq('is_active', true)\r\n      .order('monthly_price_cents', { ascending: true });\r\n\r\n    if (tiersError) {\r\n      console.error('Error fetching membership tiers:', tiersError);\r\n      res.status(500).json({ \r\n        error: 'Failed to fetch membership tiers' \r\n      });\r\n      return;\r\n    }\r\n\r\n    // Format the response\r\n    const response = {\r\n      business: {\r\n        id: business.id,\r\n        name: business.name,\r\n        website: business.website,\r\n        logo_url: business.logo_url\r\n      },\r\n      membershipTiers: membershipTiers?.map(tier => ({\r\n        id: tier.id,\r\n        name: tier.name,\r\n        price: (tier.monthly_price_cents / 100).toFixed(2),\r\n        description: tier.description,\r\n        stripe_price_id: tier.stripe_price_id\r\n      })) || [],\r\n      invitation: {\r\n        id: invitation.id,\r\n        expires_at: invitation.expires_at,\r\n        status: invitation.status\r\n      }\r\n    };\r\n\r\n    res.status(200).json(response);\r\n    return;\r\n  } catch (error: any) {\r\n    console.error('Error in validate-customer-invitation:', error);\r\n    res.status(500).json({ \r\n      error: 'Internal server error',\r\n      message: error.message \r\n    });\r\n    return;\r\n  }\r\n};\r\n\r\nexport default withErrorHandling(handler);"],
  "mappings": "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",
  "names": ["handler"]
}

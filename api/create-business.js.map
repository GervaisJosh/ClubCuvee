{
  "version": 3,
  "sources": ["create-business.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport Stripe from 'stripe';\r\nimport { ZodError } from 'zod';\r\nimport { randomUUID } from 'crypto';\r\n\r\n// Inline error handling (no external dependencies)\r\nclass APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nconst errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof ZodError) {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: 'Validation error',\r\n        code: 'VALIDATION_ERROR',\r\n        details: error.errors,\r\n      },\r\n    });\r\n  }\r\n\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nconst withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n};\r\n\r\ninterface CustomerTierData {\r\n  name: string;\r\n  description: string;\r\n  monthlyPrice: number;\r\n  benefits: string[];\r\n}\r\n\r\ninterface StripeProductUpdate {\r\n  tierId: string;\r\n  stripeProductId: string;\r\n  stripePriceId: string;\r\n}\r\n\r\ninterface BusinessFormData {\r\n  businessName: string;\r\n  businessOwnerName: string;\r\n  email: string;\r\n  password: string;\r\n  confirmPassword: string;\r\n  businessAddress: string;\r\n  city: string;\r\n  state: string;\r\n  zipCode: string;\r\n  phone: string;\r\n  website: string;\r\n  description: string;\r\n  customerTiers: CustomerTierData[];\r\n}\r\n\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  // Create Supabase admin client directly in the API (no external dependencies)\r\n  const supabaseAdmin = createClient(\r\n    process.env.SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false\r\n      }\r\n    }\r\n  );\r\n\r\n  // Initialize Stripe client\r\n  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\r\n    apiVersion: '2025-02-24.acacia',\r\n    typescript: true,\r\n  });\r\n\r\n  if (req.method !== 'POST') {\r\n    throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n  }\r\n\r\n  const { token, sessionId, businessData }: {\r\n    token: string;\r\n    sessionId: string;\r\n    businessData: BusinessFormData;\r\n  } = req.body;\r\n\r\n  if (!token || !sessionId || !businessData) {\r\n    throw new APIError(400, 'Token, sessionId, and businessData are required', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  try {\r\n    // 1. Validate the invitation token and verify payment was completed\r\n    const { data: invite, error: inviteError } = await supabaseAdmin\r\n      .from('restaurant_invitations')\r\n      .select('id, restaurant_name, email, tier, expires_at, status, payment_session_id')\r\n      .eq('token', token)\r\n      .single();\r\n\r\n    if (inviteError || !invite) {\r\n      console.error('Error fetching invitation details:', inviteError);\r\n      throw new APIError(404, 'Invalid invitation token', 'NOT_FOUND');\r\n    }\r\n\r\n    if (invite.status !== 'paid') {\r\n      throw new APIError(400, 'Payment must be completed before creating business', 'PAYMENT_REQUIRED');\r\n    }\r\n\r\n    if (invite.payment_session_id !== sessionId) {\r\n      throw new APIError(400, 'Session ID does not match invitation', 'VALIDATION_ERROR');\r\n    }\r\n\r\n    // 2. Verify the Stripe session exists and subscription is active\r\n    const session = await stripe.checkout.sessions.retrieve(sessionId);\r\n    if (!session || session.payment_status !== 'paid') {\r\n      throw new APIError(400, 'Invalid or incomplete payment session', 'PAYMENT_INCOMPLETE');\r\n    }\r\n\r\n    const subscriptionId = session.subscription as string;\r\n    if (!subscriptionId) {\r\n      throw new APIError(400, 'No subscription found for this session', 'NO_SUBSCRIPTION');\r\n    }\r\n\r\n    const subscription = await stripe.subscriptions.retrieve(subscriptionId);\r\n    if (subscription.status !== 'active') {\r\n      throw new APIError(400, 'Subscription is not active', 'SUBSCRIPTION_INACTIVE');\r\n    }\r\n\r\n    // 3. Get the pricing tier information\r\n    const { data: pricingTier, error: tierError } = await supabaseAdmin\r\n      .from('business_pricing_tiers')\r\n      .select('id, name, stripe_price_id')\r\n      .eq('stripe_price_id', subscription.items.data[0]?.price.id)\r\n      .eq('is_active', true)\r\n      .single();\r\n\r\n    if (tierError || !pricingTier) {\r\n      console.error('Error fetching pricing tier:', tierError);\r\n      throw new APIError(400, 'Unable to determine pricing tier', 'TIER_NOT_FOUND');\r\n    }\r\n\r\n    // 4. Validate business data\r\n    if (!businessData.businessName?.trim() || !businessData.businessOwnerName?.trim() || \r\n        !businessData.email?.trim() || !businessData.password?.trim()) {\r\n      throw new APIError(400, 'Missing required business information', 'VALIDATION_ERROR');\r\n    }\r\n\r\n    if (businessData.password !== businessData.confirmPassword) {\r\n      throw new APIError(400, 'Passwords do not match', 'VALIDATION_ERROR');\r\n    }\r\n\r\n    if (!businessData.customerTiers || businessData.customerTiers.length === 0) {\r\n      throw new APIError(400, 'At least one customer tier is required', 'VALIDATION_ERROR');\r\n    }\r\n\r\n    // Validate each customer tier\r\n    for (const tier of businessData.customerTiers) {\r\n      if (!tier.name?.trim() || !tier.description?.trim()) {\r\n        throw new APIError(400, 'Customer tier name and description are required', 'VALIDATION_ERROR');\r\n      }\r\n      if (tier.monthlyPrice < 10 || tier.monthlyPrice > 999) {\r\n        throw new APIError(400, 'Customer tier price must be between $10 and $999', 'VALIDATION_ERROR');\r\n      }\r\n      if (!tier.benefits || tier.benefits.filter(b => b.trim()).length === 0) {\r\n        throw new APIError(400, 'Each customer tier must have at least one benefit', 'VALIDATION_ERROR');\r\n      }\r\n    }\r\n\r\n    // 5. Create an auth account for the BUSINESS EMAIL (not the admin)\r\n    // This gives them an auth_id immediately\r\n    console.log('Creating auth account for business email:', businessData.email);\r\n    \r\n    let businessAuthUser: any;\r\n    \r\n    // First, create an auth user for the business email\r\n    const { data: newAuthUser, error: authError } = await supabaseAdmin.auth.admin.createUser({\r\n      email: businessData.email.trim(),\r\n      email_confirm: true, // Auto-confirm since admin is creating\r\n      password: businessData.password, // Set the password they provided\r\n    });\r\n\r\n    if (authError) {\r\n      // Check if user already exists\r\n      if (authError.message?.includes('already exists')) {\r\n        console.log('Auth user already exists for email, fetching existing user...');\r\n        // Get existing user\r\n        const { data: { users } } = await supabaseAdmin.auth.admin.listUsers();\r\n        const existingUser = users.find(u => u.email === businessData.email.trim());\r\n        \r\n        if (existingUser) {\r\n          // Use existing user's ID\r\n          businessAuthUser = existingUser;\r\n          console.log('Using existing auth user:', businessAuthUser.id);\r\n        } else {\r\n          throw new APIError(400, 'Email already in use', 'EMAIL_EXISTS');\r\n        }\r\n      } else {\r\n        console.error('Error creating auth user:', authError);\r\n        throw new APIError(500, 'Failed to create business account', 'AUTH_ERROR');\r\n      }\r\n    } else {\r\n      businessAuthUser = newAuthUser;\r\n      console.log('Created new auth user:', businessAuthUser.id);\r\n    }\r\n\r\n    // 6. Create the business record with slug\r\n    const businessId = randomUUID();\r\n    \r\n    // Generate URL-friendly slug from business name\r\n    const baseSlug = businessData.businessName.trim()\r\n      .toLowerCase()\r\n      .replace(/[^a-z0-9]+/g, '-')\r\n      .replace(/(^-|-$)/g, '');\r\n    \r\n    // Make slug unique by adding a random suffix if needed\r\n    const businessSlug = `${baseSlug}-${businessId.substring(0, 4)}`;\r\n    \r\n    const { error: businessError } = await supabaseAdmin\r\n      .from('businesses')\r\n      .insert({\r\n        id: businessId,\r\n        name: businessData.businessName.trim(),\r\n        slug: businessSlug,\r\n        owner_id: businessAuthUser.id, // The business email's auth ID, not the admin's\r\n        email: businessData.email.trim(),\r\n        phone: businessData.phone?.trim() || null,\r\n        website: businessData.website?.trim() || null,\r\n        description: businessData.description?.trim() || null,\r\n        business_address: businessData.businessAddress?.trim() || null,\r\n        city: businessData.city?.trim() || null,\r\n        state: businessData.state?.trim() || null,\r\n        zip_code: businessData.zipCode?.trim() || null,\r\n        pricing_tier_id: pricingTier.id,\r\n        stripe_customer_id: subscription.customer as string,\r\n        stripe_subscription_id: subscriptionId,\r\n        status: 'active',\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .select('id')\r\n      .single();\r\n\r\n    if (businessError) {\r\n      console.error('Error creating business:', businessError);\r\n      throw new APIError(500, 'Failed to create business record', 'DATABASE_ERROR');\r\n    }\r\n\r\n    // 7. Create the business admin user profile with the new auth_id\r\n    const { error: profileError } = await supabaseAdmin\r\n      .from('business_users')\r\n      .insert({\r\n        auth_id: businessAuthUser.id, // The business email's auth ID\r\n        business_id: businessId,\r\n        email: businessData.email.trim(),\r\n        full_name: businessData.businessOwnerName.trim(),\r\n        role: 'business_admin',\r\n        is_active: true,\r\n        created_at: new Date().toISOString()\r\n      });\r\n\r\n    if (profileError && !profileError.message?.includes('already exists')) {\r\n      console.error('Error creating business user profile:', profileError);\r\n      // Clean up business record if profile creation fails\r\n      await supabaseAdmin.from('businesses').delete().eq('id', businessId);\r\n      throw new APIError(500, 'Failed to create business user profile', 'DATABASE_ERROR');\r\n    }\r\n\r\n    // 8. Create membership tiers for this business\r\n    const tierInserts = businessData.customerTiers.map((tier, index) => ({\r\n      business_id: businessId,\r\n      name: tier.name.trim(),\r\n      description: tier.description.trim(),\r\n      monthly_price_cents: Math.round(tier.monthlyPrice * 100),\r\n      benefits: tier.benefits.filter(b => b.trim()).map(b => b.trim()), // Store benefits as JSONB array\r\n      is_active: true\r\n    }));\r\n\r\n    console.log('\uD83D\uDCDD Creating membership tiers:', tierInserts);\r\n\r\n    const { data: createdTiers, error: tiersError } = await supabaseAdmin\r\n      .from('membership_tiers')\r\n      .insert(tierInserts)\r\n      .select();\r\n\r\n    if (tiersError || !createdTiers) {\r\n      console.error('\u274C Error creating membership tiers:', tiersError);\r\n      // Clean up created records if tier creation fails (don't delete the user)\r\n      await supabaseAdmin.from('businesses').delete().eq('id', businessId);\r\n      throw new APIError(500, 'Failed to create membership tiers', 'DATABASE_ERROR');\r\n    }\r\n    \r\n    console.log('\u2705 Created tiers:', createdTiers);\r\n\r\n    // 9. Create Stripe products and prices for each tier\r\n    const stripeProductUpdates: StripeProductUpdate[] = [];\r\n    console.log('\uD83D\uDD04 Creating Stripe products for', createdTiers.length, 'tiers');\r\n    \r\n    for (const tier of createdTiers) {\r\n      try {\r\n        console.log(`\uD83D\uDCE6 Creating Stripe product for tier: ${tier.name} (ID: ${tier.id})`);\r\n        \r\n        // Create branded Stripe product\r\n        const product = await stripe.products.create({\r\n          name: `${businessData.businessName.trim()} Wine Club - ${tier.name}`,\r\n          description: `${tier.description} | Curated by ${businessData.businessName.trim()}`,\r\n          metadata: {\r\n            platform: 'Club Cuv\u00E9e',\r\n            business_id: tier.business_id,\r\n            tier_id: tier.id,\r\n            business_name: businessData.businessName.trim()\r\n          }\r\n        });\r\n        \r\n        console.log(`\u2705 Created Stripe product: ${product.id}`);\r\n\r\n        // Create recurring monthly price\r\n        const price = await stripe.prices.create({\r\n          product: product.id,\r\n          unit_amount: tier.monthly_price_cents,\r\n          currency: 'usd',\r\n          recurring: {\r\n            interval: 'month',\r\n          },\r\n          metadata: {\r\n            business_id: tier.business_id,\r\n            tier_name: tier.name,\r\n            business_name: businessData.businessName.trim()\r\n          }\r\n        });\r\n        \r\n        console.log(`\u2705 Created Stripe price: ${price.id}`);\r\n\r\n        // Queue update for Supabase record\r\n        stripeProductUpdates.push({\r\n          tierId: tier.id,\r\n          stripeProductId: product.id,\r\n          stripePriceId: price.id\r\n        });\r\n\r\n      } catch (stripeError) {\r\n        console.error(`\u274C Stripe product creation failed for tier ${tier.name}:`, stripeError);\r\n        // Continue with business creation - allow manual Stripe setup later\r\n        // Don't throw error to avoid blocking the entire onboarding process\r\n      }\r\n    }\r\n\r\n    // 10. Update Supabase records with Stripe IDs\r\n    console.log('\uD83D\uDD04 Updating', stripeProductUpdates.length, 'tiers with Stripe IDs');\r\n    \r\n    for (const update of stripeProductUpdates) {\r\n      try {\r\n        console.log(`\uD83D\uDCDD Updating tier ${update.tierId} with Stripe IDs:`, {\r\n          stripe_product_id: update.stripeProductId,\r\n          stripe_price_id: update.stripePriceId\r\n        });\r\n        \r\n        const { data: updateData, error: updateError } = await supabaseAdmin\r\n          .from('membership_tiers')\r\n          .update({\r\n            stripe_product_id: update.stripeProductId,\r\n            stripe_price_id: update.stripePriceId\r\n          })\r\n          .eq('id', update.tierId)\r\n          .select();\r\n          \r\n        if (updateError) {\r\n          console.error(`\u274C Failed to update tier ${update.tierId} with Stripe IDs:`, updateError);\r\n          console.error('Update error details:', updateError);\r\n        } else {\r\n          console.log(`\u2705 Successfully updated tier ${update.tierId}:`, updateData);\r\n        }\r\n      } catch (updateError) {\r\n        console.error(`\u274C Exception updating tier ${update.tierId}:`, updateError);\r\n        // Log but continue - the tier exists, just without Stripe integration\r\n      }\r\n    }\r\n\r\n    // 11. Mark the invitation as completed\r\n    console.log('\uD83D\uDD04 Updating invitation status to completed for token:', token);\r\n    const { error: invitationUpdateError } = await supabaseAdmin\r\n      .from('restaurant_invitations')\r\n      .update({\r\n        status: 'completed',\r\n        business_id: businessId,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('token', token);\r\n\r\n    if (invitationUpdateError) {\r\n      console.error('\u274C Error updating invitation status:', invitationUpdateError);\r\n      // Don't throw error - business was created successfully, just log the issue\r\n    } else {\r\n      console.log('\u2705 Successfully updated invitation status to completed');\r\n    }\r\n\r\n    // 12. Return success response\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        businessId: businessId,\r\n        businessSlug: businessSlug,\r\n        businessAuthUserId: businessAuthUser.id, // The business email's auth ID\r\n        businessEmail: businessData.email,\r\n        businessName: businessData.businessName,\r\n        customerTiersCreated: tierInserts.length,\r\n        stripeProductsCreated: stripeProductUpdates.length,\r\n        stripeIntegrationComplete: stripeProductUpdates.length === createdTiers.length\r\n      }\r\n    });\r\n\r\n  } catch (err) {\r\n    if (err instanceof Stripe.errors.StripeError) {\r\n      throw new APIError(400, err.message, 'STRIPE_ERROR');\r\n    }\r\n    throw err;\r\n  }\r\n});"],
  "mappings": "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",
  "names": ["Stripe"]
}

{
  "version": 3,
  "sources": ["create-business.ts", "utils/stripe.ts", "utils/error-handler.ts", "../lib/supabaseAdmin.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { stripe } from './utils/stripe';\r\nimport { supabaseAdmin } from '../lib/supabaseAdmin';\r\nimport { withErrorHandler, APIError } from './utils/error-handler';\r\n\r\ninterface BusinessFormData {\r\n  businessName: string;\r\n  adminName: string;\r\n  adminEmail: string;\r\n  adminPassword: string;\r\n  confirmPassword: string;\r\n  tiers: TierFormData[];\r\n}\r\n\r\ninterface TierFormData {\r\n  name: string;\r\n  description: string;\r\n  priceMarkupPercentage: number;\r\n}\r\n\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  if (req.method !== 'POST') {\r\n    throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n  }\r\n\r\n  const { token, sessionId, businessData: formData }: { \r\n    token: string; \r\n    sessionId: string; \r\n    businessData: BusinessFormData; \r\n  } = req.body;\r\n\r\n  if (!token || !sessionId || !formData) {\r\n    throw new APIError(400, 'Token, session ID, and business data are required', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Validate the business invitation token\r\n  const { data: tokenValidation, error: validationError } = await supabaseAdmin.rpc('validate_business_invitation_token', {\r\n    p_token: token\r\n  });\r\n\r\n  if (validationError || !tokenValidation || tokenValidation.length === 0) {\r\n    throw new APIError(400, 'Invalid or expired business invitation token', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  const tokenData = tokenValidation[0];\r\n  if (!tokenData.is_valid) {\r\n    throw new APIError(400, 'Business invitation token is not valid', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Get temp business setup data to get Stripe details\r\n  const { data: tempSetupData, error: tempError } = await supabaseAdmin\r\n    .from('temp_business_setup')\r\n    .select('stripe_customer_id, stripe_subscription_id, pricing_tier')\r\n    .eq('invitation_token', token)\r\n    .single();\r\n\r\n  if (tempError || !tempSetupData) {\r\n    throw new APIError(400, 'Business setup data not found. Please restart the process.', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Get invitation details for business email\r\n  const { data: inviteDetails, error: inviteError } = await supabaseAdmin\r\n    .from('business_invites')\r\n    .select('business_name, business_email, pricing_tier')\r\n    .eq('token', token)\r\n    .single();\r\n\r\n  if (inviteError || !inviteDetails) {\r\n    throw new APIError(400, 'Invitation details not found', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Validate business data\r\n  if (!formData.businessName?.trim()) {\r\n    throw new APIError(400, 'Business name is required', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  if (!formData.adminName?.trim()) {\r\n    throw new APIError(400, 'Admin name is required', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  if (!formData.adminEmail?.trim()) {\r\n    throw new APIError(400, 'Admin email is required', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  if (!formData.adminPassword) {\r\n    throw new APIError(400, 'Admin password is required', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  if (formData.adminPassword.length < 8) {\r\n    throw new APIError(400, 'Password must be at least 8 characters long', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  if (formData.adminPassword !== formData.confirmPassword) {\r\n    throw new APIError(400, 'Passwords do not match', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Create admin user in Supabase Auth\r\n  const { data: authData, error: authError } = await supabaseAdmin.auth.admin.createUser({\r\n    email: formData.adminEmail,\r\n    password: formData.adminPassword,\r\n    user_metadata: {\r\n      name: formData.adminName,\r\n      role: 'business_admin'\r\n    },\r\n    email_confirm: true\r\n  });\r\n\r\n  if (authError || !authData.user) {\r\n    console.error('Error creating admin user:', authError);\r\n    throw new APIError(500, 'Failed to create admin user account', 'DATABASE_ERROR');\r\n  }\r\n\r\n  // Get the pricing tier ID for the business\r\n  const { data: pricingTierData, error: tierError } = await supabaseAdmin\r\n    .from('business_pricing_tiers')\r\n    .select('id')\r\n    .eq('stripe_product_id', (await stripe.subscriptions.retrieve(tempSetupData.stripe_subscription_id)).items.data[0].price.product)\r\n    .single();\r\n\r\n  let pricingTierId = null;\r\n  if (!tierError && pricingTierData) {\r\n    pricingTierId = pricingTierData.id;\r\n  }\r\n\r\n  // Create business record\r\n  const { data: newBusiness, error: businessError } = await supabaseAdmin\r\n    .from('businesses')\r\n    .insert({\r\n      name: formData.businessName,\r\n      email: inviteDetails.business_email,\r\n      owner_id: authData.user.id,\r\n      stripe_customer_id: tempSetupData.stripe_customer_id,\r\n      stripe_subscription_id: tempSetupData.stripe_subscription_id,\r\n      subscription_status: 'active',\r\n      pricing_tier_id: pricingTierId,\r\n      created_at: new Date().toISOString()\r\n    })\r\n    .select()\r\n    .single();\r\n\r\n  if (businessError || !newBusiness) {\r\n    console.error('Error creating business:', businessError);\r\n    \r\n    // Clean up the auth user if business creation failed\r\n    await supabaseAdmin.auth.admin.deleteUser(authData.user.id);\r\n    \r\n    throw new APIError(500, 'Failed to create business record', 'DATABASE_ERROR');\r\n  }\r\n\r\n  // Create restaurant membership tiers for customers\r\n  const tierInserts = formData.tiers.map((tier) => ({\r\n    business_id: newBusiness.id,\r\n    name: tier.name,\r\n    description: tier.description,\r\n    price_cents: Math.round(2999 * (1 + tier.priceMarkupPercentage / 100)), // Base price $29.99 with markup\r\n    interval: 'month',\r\n    is_ready: false, // Will be set to true when Stripe products are created\r\n    created_at: new Date().toISOString()\r\n  }));\r\n\r\n  const { error: tiersError } = await supabaseAdmin\r\n    .from('restaurant_membership_tiers')\r\n    .insert(tierInserts);\r\n\r\n  if (tiersError) {\r\n    console.error('Error creating membership tiers:', tiersError);\r\n    // Don't fail the whole process for this\r\n  }\r\n\r\n  // Mark business invitation as used\r\n  const { error: markUsedError } = await supabaseAdmin.rpc('mark_business_invitation_used', {\r\n    p_token: token,\r\n    p_business_id: newBusiness.id\r\n  });\r\n\r\n  if (markUsedError) {\r\n    console.error('Error marking invitation as used:', markUsedError);\r\n    // Don't fail for this\r\n  }\r\n\r\n  // Mark temp setup as completed\r\n  await supabaseAdmin\r\n    .from('temp_business_setup')\r\n    .update({ setup_completed: true })\r\n    .eq('invitation_token', token);\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    data: {\r\n      businessId: newBusiness.id,\r\n      adminUserId: authData.user.id,\r\n      business: newBusiness\r\n    }\r\n  });\r\n});", "import Stripe from 'stripe';\r\nimport { APIError } from './error-handler';\r\n\r\nif (!process.env.STRIPE_SECRET_KEY) {\r\n  throw new Error('STRIPE_SECRET_KEY is required');\r\n}\r\n\r\nif (!process.env.STRIPE_WEBHOOK_SECRET) {\r\n  throw new Error('STRIPE_WEBHOOK_SECRET is required');\r\n}\r\n\r\nexport const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\r\n  apiVersion: '2025-02-24.acacia',\r\n  typescript: true,\r\n});\r\n\r\nexport const verifyStripeWebhook = (signature: string, payload: string) => {\r\n  try {\r\n    return stripe.webhooks.constructEvent(\r\n      payload,\r\n      signature,\r\n      process.env.STRIPE_WEBHOOK_SECRET!\r\n    );\r\n  } catch (err) {\r\n    throw new APIError(400, 'Invalid webhook signature', 'INVALID_SIGNATURE');\r\n  }\r\n};\r\n\r\nexport const createCheckoutSession = async (data: {\r\n  restaurantName: string;\r\n  email: string;\r\n  membershipTier: string;\r\n  successUrl: string;\r\n  cancelUrl: string;\r\n}) => {\r\n  try {\r\n    const session = await stripe.checkout.sessions.create({\r\n      mode: 'subscription',\r\n      payment_method_types: ['card'],\r\n      line_items: [\r\n        {\r\n          price: process.env[`STRIPE_PRICE_ID_${data.membershipTier.toUpperCase()}`],\r\n          quantity: 1,\r\n        },\r\n      ],\r\n      customer_email: data.email,\r\n      metadata: {\r\n        restaurantName: data.restaurantName,\r\n        membershipTier: data.membershipTier,\r\n      },\r\n      success_url: data.successUrl,\r\n      cancel_url: data.cancelUrl,\r\n    });\r\n\r\n    return session;\r\n  } catch (err) {\r\n    if (err instanceof Stripe.errors.StripeError) {\r\n      throw new APIError(400, err.message, 'STRIPE_ERROR');\r\n    }\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getSubscription = async (subscriptionId: string) => {\r\n  try {\r\n    return await stripe.subscriptions.retrieve(subscriptionId);\r\n  } catch (err) {\r\n    if (err instanceof Stripe.errors.StripeError) {\r\n      throw new APIError(400, err.message, 'STRIPE_ERROR');\r\n    }\r\n    throw err;\r\n  }\r\n}; ", "import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { ZodError } from 'zod';\r\n\r\nexport class APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\n// Helper to set common headers for all responses\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nexport const errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  // Handle preflight requests\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof ZodError) {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: 'Validation error',\r\n        code: 'VALIDATION_ERROR',\r\n        details: error.errors,\r\n      },\r\n    });\r\n  }\r\n\r\n  // Handle Stripe errors\r\n  if (error instanceof Error && error.name === 'StripeError') {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: 'STRIPE_ERROR',\r\n      },\r\n    });\r\n  }\r\n\r\n  // Default error\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nexport const withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      // Handle preflight requests\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n}; ", "import { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase with service role key for admin operations\nexport const supabaseAdmin = createClient(\n  process.env.SUPABASE_URL as string,\n  process.env.SUPABASE_SERVICE_ROLE_KEY as string,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n); "],
  "mappings": "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",
  "names": ["Stripe"]
}

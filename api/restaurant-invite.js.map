{
  "version": 3,
  "sources": ["restaurant-invite.ts", "utils/error-handler.ts", "../src/lib/supabase.ts", "../src/lib/services/inviteService.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { z } from 'zod';\r\nimport { withErrorHandler, APIError } from './utils/error-handler';\r\nimport { createInvite } from '../src/lib/services/inviteService';\r\n\r\nconst createInviteSchema = z.object({\r\n  email: z.string().email(),\r\n  tier: z.string().min(1),\r\n});\r\n\r\nconst ALLOWED_TIERS = ['Neighborhood Cellar', 'World Class'];\r\n\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  if (req.method !== 'POST') {\r\n    throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n  }\r\n\r\n  // TODO: Replace with your actual admin authentication check\r\n  const isAdmin = req.headers['x-admin-auth'] === process.env.ADMIN_SECRET;\r\n  if (!isAdmin) {\r\n    throw new APIError(401, 'Unauthorized', 'UNAUTHORIZED');\r\n  }\r\n\r\n  const body = createInviteSchema.safeParse(req.body);\r\n  if (!body.success) {\r\n    throw new APIError(400, 'Invalid request data', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  const { email, tier } = body.data;\r\n  if (!ALLOWED_TIERS.includes(tier)) {\r\n    throw new APIError(400, 'Invalid tier', 'INVALID_TIER');\r\n  }\r\n\r\n  const invite = await createInvite(email, tier);\r\n  const inviteLink = `https://clubcuvee.com/restaurant/register?token=${invite.token}`;\r\n  res.status(201).json({ success: true, inviteLink, expiresAt: invite.expires_at });\r\n});", "import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { ZodError } from 'zod';\r\n\r\nexport class APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\n// Helper to set common headers for all responses\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nexport const errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  // Handle preflight requests\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof ZodError) {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: 'Validation error',\r\n        code: 'VALIDATION_ERROR',\r\n        details: error.errors,\r\n      },\r\n    });\r\n  }\r\n\r\n  // Handle Stripe errors\r\n  if (error instanceof Error && error.name === 'StripeError') {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: 'STRIPE_ERROR',\r\n      },\r\n    });\r\n  }\r\n\r\n  // Default error\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nexport const withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      // Handle preflight requests\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n}; ", "import { createClient } from '@supabase/supabase-js';\r\nimport type { Database } from '../types/supabase';\r\n\r\n// Validate required environment variables\r\nconst requiredEnvVars = {\r\n  VITE_SUPABASE_URL: import.meta.env.VITE_SUPABASE_URL,\r\n  VITE_SUPABASE_ANON_KEY: import.meta.env.VITE_SUPABASE_ANON_KEY,\r\n};\r\n\r\nObject.entries(requiredEnvVars).forEach(([key, value]) => {\r\n  if (!value) {\r\n    throw new Error(`Missing required environment variable: ${key}`);\r\n  }\r\n});\r\n\r\n// Create a global type for the window object to include our supabase instance\r\ndeclare global {\r\n  interface Window {\r\n    __SUPABASE_INSTANCE?: ReturnType<typeof createClient<Database>>;\r\n  }\r\n}\r\n\r\n// Use a function that checks for an existing instance in the global window object\r\nconst createSupabaseClient = () => {\r\n  // For SSR (server-side rendering) environments without window\r\n  if (typeof window === 'undefined') {\r\n    return createClient<Database>(\r\n      requiredEnvVars.VITE_SUPABASE_URL,\r\n      requiredEnvVars.VITE_SUPABASE_ANON_KEY,\r\n      {\r\n        auth: {\r\n          autoRefreshToken: true,\r\n          persistSession: true,\r\n          detectSessionInUrl: true\r\n        }\r\n      }\r\n    );\r\n  }\r\n  \r\n  // For browser environments, check window for existing instance\r\n  if (window.__SUPABASE_INSTANCE) {\r\n    return window.__SUPABASE_INSTANCE;\r\n  }\r\n  \r\n  // Create a new instance and store it on the window\r\n  const instance = createClient<Database>(\r\n    requiredEnvVars.VITE_SUPABASE_URL,\r\n    requiredEnvVars.VITE_SUPABASE_ANON_KEY,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: true,\r\n        persistSession: true,\r\n        detectSessionInUrl: true\r\n      }\r\n    }\r\n  );\r\n  window.__SUPABASE_INSTANCE = instance;\r\n  \r\n  return instance;\r\n};\r\n\r\n// Export the singleton instance\r\nexport const supabase = createSupabaseClient(); ", "import { supabase } from '../../lib/supabase';\r\nimport { randomUUID } from 'crypto';\r\n\r\nexport interface InviteMetadata {\r\n  token: string;\r\n  email: string;\r\n  tier: string;\r\n  created_at: string;\r\n  expires_at: string;\r\n  used: boolean;\r\n}\r\n\r\nexport async function createInvite(email: string, tier: string): Promise<InviteMetadata> {\r\n  const token = randomUUID();\r\n  const created_at = new Date();\r\n  const expires_at = new Date(created_at.getTime() + 24 * 60 * 60 * 1000); // 24h\r\n\r\n  const { error } = await supabase\r\n    .from('restaurant_invites')\r\n    .insert([\r\n      {\r\n        token,\r\n        email,\r\n        tier,\r\n        created_at: created_at.toISOString(),\r\n        expires_at: expires_at.toISOString(),\r\n        used: false,\r\n      },\r\n    ]);\r\n\r\n  if (error) {\r\n    throw new Error('Failed to create invite: ' + error.message);\r\n  }\r\n\r\n  return {\r\n    token,\r\n    email,\r\n    tier,\r\n    created_at: created_at.toISOString(),\r\n    expires_at: expires_at.toISOString(),\r\n    used: false,\r\n  };\r\n}\r\n\r\nexport async function validateInviteToken(token: string): Promise<InviteMetadata> {\r\n  const { data, error } = await supabase\r\n    .from('restaurant_invites')\r\n    .select('*')\r\n    .eq('token', token)\r\n    .single();\r\n\r\n  if (error || !data) {\r\n    throw new Error('Invalid or missing invite token');\r\n  }\r\n\r\n  if (data.used) {\r\n    throw new Error('Invite token has already been used');\r\n  }\r\n\r\n  if (new Date(data.expires_at) < new Date()) {\r\n    throw new Error('Invite token has expired');\r\n  }\r\n\r\n  return data as InviteMetadata;\r\n}\r\n\r\nexport async function markInviteUsed(token: string): Promise<void> {\r\n  const { error } = await supabase\r\n    .from('restaurant_invites')\r\n    .update({ used: true })\r\n    .eq('token', token);\r\n\r\n  if (error) {\r\n    throw new Error('Failed to mark invite as used: ' + error.message);\r\n  }\r\n} "],
  "mappings": "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",
  "names": ["import_zod"]
}

{
  "version": 3,
  "sources": ["restaurant-invite.ts", "utils/error-handler.ts", "utils/supabase.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { z } from 'zod';\r\nimport { withErrorHandler } from './utils/error-handler';\r\nimport { supabase } from './utils/supabase';\r\nimport { APIError } from './utils/error-handler';\r\nimport { randomUUID } from 'crypto';\r\n\r\nconst createInviteSchema = z.object({\r\n  email: z.string().email(),\r\n  restaurantName: z.string().min(1),\r\n  invitedBy: z.string().email(),\r\n});\r\n\r\nconst validateInviteSchema = z.object({\r\n  token: z.string().uuid(),\r\n});\r\n\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  if (req.method === 'POST') {\r\n    // Create new invite\r\n    const body = createInviteSchema.parse(req.body);\r\n    \r\n    const token = randomUUID();\r\n    const expiresAt = new Date();\r\n    expiresAt.setDate(expiresAt.getDate() + 7); // 7 days expiry\r\n\r\n    const { error } = await supabase\r\n      .from('restaurant_invites')\r\n      .insert([{\r\n        token,\r\n        email: body.email,\r\n        restaurant_name: body.restaurantName,\r\n        invited_by: body.invitedBy,\r\n        status: 'pending',\r\n        expires_at: expiresAt.toISOString(),\r\n      }]);\r\n\r\n    if (error) {\r\n      throw new APIError(500, 'Failed to create invite', 'DATABASE_ERROR');\r\n    }\r\n\r\n    res.status(201).json({ token });\r\n    return;\r\n  }\r\n\r\n  if (req.method === 'GET') {\r\n    // Validate invite token\r\n    const { token } = validateInviteSchema.parse(req.query);\r\n\r\n    const { data, error } = await supabase\r\n      .from('restaurant_invites')\r\n      .select('*')\r\n      .eq('token', token)\r\n      .single();\r\n\r\n    if (error) {\r\n      throw new APIError(500, 'Failed to fetch invite', 'DATABASE_ERROR');\r\n    }\r\n\r\n    if (!data) {\r\n      throw new APIError(404, 'Invite not found', 'INVITE_NOT_FOUND');\r\n    }\r\n\r\n    if (data.status !== 'pending') {\r\n      throw new APIError(400, 'Invite has already been used', 'INVITE_USED');\r\n    }\r\n\r\n    if (new Date(data.expires_at) < new Date()) {\r\n      throw new APIError(400, 'Invite has expired', 'INVITE_EXPIRED');\r\n    }\r\n\r\n    res.status(200).json({\r\n      email: data.email,\r\n      restaurantName: data.restaurant_name,\r\n      invitedBy: data.invited_by,\r\n    });\r\n    return;\r\n  }\r\n\r\n  throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n});", "import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { ZodError } from 'zod';\r\n\r\nexport class APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nexport const errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof ZodError) {\r\n    return res.status(400).json({\r\n      error: {\r\n        message: 'Validation error',\r\n        code: 'VALIDATION_ERROR',\r\n        details: error.errors,\r\n      },\r\n    });\r\n  }\r\n\r\n  // Handle Stripe errors\r\n  if (error instanceof Error && error.name === 'StripeError') {\r\n    return res.status(400).json({\r\n      error: {\r\n        message: error.message,\r\n        code: 'STRIPE_ERROR',\r\n      },\r\n    });\r\n  }\r\n\r\n  // Default error\r\n  return res.status(500).json({\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nexport const withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n}; ", "import { createClient } from '@supabase/supabase-js';\r\nimport { APIError } from './error-handler';\r\n\r\nif (!process.env.SUPABASE_URL) {\r\n  throw new Error('SUPABASE_URL is required');\r\n}\r\n\r\nif (!process.env.SUPABASE_SERVICE_ROLE_KEY) {\r\n  throw new Error('SUPABASE_SERVICE_ROLE_KEY is required');\r\n}\r\n\r\nexport const supabase = createClient(\r\n  process.env.SUPABASE_URL,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false,\r\n    },\r\n  }\r\n);\r\n\r\nexport const getRestaurantInvite = async (token: string) => {\r\n  const { data, error } = await supabase\r\n    .from('restaurant_invites')\r\n    .select('*')\r\n    .eq('token', token)\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new APIError(500, 'Failed to fetch restaurant invite', 'DATABASE_ERROR');\r\n  }\r\n\r\n  if (!data) {\r\n    throw new APIError(404, 'Invite not found', 'INVITE_NOT_FOUND');\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\nexport const createRestaurant = async (data: {\r\n  name: string;\r\n  email: string;\r\n  subscription_id: string;\r\n  membership_tier: string;\r\n}) => {\r\n  const { data: restaurant, error } = await supabase\r\n    .from('restaurants')\r\n    .insert([data])\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new APIError(500, 'Failed to create restaurant', 'DATABASE_ERROR');\r\n  }\r\n\r\n  return restaurant;\r\n};\r\n\r\nexport const updateRestaurantInvite = async (token: string, data: {\r\n  status: 'accepted' | 'expired' | 'in_progress';\r\n  accepted_at?: string;\r\n}) => {\r\n  const { error } = await supabase\r\n    .from('restaurant_invites')\r\n    .update(data)\r\n    .eq('token', token);\r\n\r\n  if (error) {\r\n    throw new APIError(500, 'Failed to update restaurant invite', 'DATABASE_ERROR');\r\n  }\r\n}; "],
  "mappings": "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",
  "names": ["import_zod"]
}

{
  "version": 3,
  "sources": ["restaurant-invite.ts", "../lib/supabaseAdmin.ts"],
  "sourcesContent": ["import type { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { randomUUID } from 'crypto';\r\nimport { supabaseAdmin } from '@/lib/supabaseAdmin';\r\n\r\ninterface InvitationData {\r\n  email: string;\r\n  restaurant_name: string;\r\n  website?: string;\r\n  admin_name?: string;\r\n  tier?: string;\r\n}\r\n\r\ninterface JsonResponse {\r\n  status: 'success' | 'error';\r\n  message?: string;\r\n  error?: string;\r\n  details?: any;\r\n  [key: string]: any;\r\n}\r\n\r\n/**\r\n * Helper function to send JSON response with proper error handling\r\n */\r\nfunction sendJsonResponse(res: VercelResponse, status: number, data: JsonResponse) {\r\n  try {\r\n    if (!res.headersSent) {\r\n      res.setHeader('Content-Type', 'application/json');\r\n    }\r\n    return res.status(status).send(JSON.stringify(data));\r\n  } catch (error) {\r\n    console.error('Error sending JSON response:', error);\r\n    if (!res.headersSent) {\r\n      res.setHeader('Content-Type', 'application/json');\r\n      return res.status(500).send(JSON.stringify({\r\n        status: 'error',\r\n        error: 'Failed to send response',\r\n        message: 'Internal server error'\r\n      }));\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Restaurant invitation API endpoint\r\n * \r\n * Creates a secure, time-limited invitation token for restaurant onboarding\r\n * Production-ready with comprehensive error handling and consistent JSON responses\r\n */\r\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\r\n  try {\r\n    // Set CORS headers\r\n    res.setHeader('Access-Control-Allow-Origin', '*');\r\n    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');\r\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n    \r\n    // Handle preflight OPTIONS requests\r\n    if (req.method === 'OPTIONS') {\r\n      return sendJsonResponse(res, 200, { status: 'success' });\r\n    }\r\n    \r\n    // Ensure method is POST\r\n    if (req.method !== 'POST') {\r\n      return sendJsonResponse(res, 405, {\r\n        status: 'error',\r\n        error: 'Method not allowed',\r\n        allowed_methods: ['POST', 'OPTIONS']\r\n      });\r\n    }\r\n    \r\n    // Check if req.body exists and is an object\r\n    if (!req.body || typeof req.body !== 'object') {\r\n      return sendJsonResponse(res, 400, {\r\n        status: 'error',\r\n        error: 'Invalid request body',\r\n        message: 'Request body must be a valid JSON object'\r\n      });\r\n    }\r\n    \r\n    // Safely extract and validate required request body fields\r\n    let { email, restaurant_name, website, admin_name, tier } = req.body as Partial<InvitationData>;\r\n    \r\n    // Set default value for tier\r\n    tier = tier || 'standard';\r\n    \r\n    const validationErrors: Record<string, string> = {};\r\n    \r\n    // Validate email\r\n    if (!email) {\r\n      validationErrors.email = 'Email is required';\r\n    } else if (typeof email !== 'string') {\r\n      validationErrors.email = 'Email must be a string';\r\n    } else if (!/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(email)) {\r\n      validationErrors.email = 'Invalid email format';\r\n    }\r\n    \r\n    // Validate restaurant_name\r\n    if (!restaurant_name) {\r\n      validationErrors.restaurant_name = 'Restaurant name is required';\r\n    } else if (typeof restaurant_name !== 'string') {\r\n      validationErrors.restaurant_name = 'Restaurant name must be a string';\r\n    }\r\n    \r\n    if (Object.keys(validationErrors).length > 0) {\r\n      return sendJsonResponse(res, 400, {\r\n        status: 'error',\r\n        error: 'Validation failed',\r\n        details: validationErrors\r\n      });\r\n    }\r\n    \r\n    // Check if email is already registered\r\n    const { data: existingUser, error: userError } = await supabaseAdmin\r\n      .from('restaurants')\r\n      .select('id')\r\n      .eq('admin_email', email)\r\n      .maybeSingle();\r\n    \r\n    if (userError) {\r\n      console.error('Database error checking existing user:', userError);\r\n      return sendJsonResponse(res, 500, {\r\n        status: 'error',\r\n        error: 'Failed to verify email',\r\n        message: 'Internal database error'\r\n      });\r\n    }\r\n    \r\n    if (existingUser) {\r\n      return sendJsonResponse(res, 400, {\r\n        status: 'error',\r\n        error: 'Email already in use',\r\n        message: 'This email is already associated with a restaurant account'\r\n      });\r\n    }\r\n    \r\n    // Generate a secure token using UUID\r\n    const token = randomUUID();\r\n    const expiresAt = new Date();\r\n    expiresAt.setDate(expiresAt.getDate() + 7); // Token valid for 7 days\r\n    \r\n    // Create invitation data\r\n    const invitationData = {\r\n      token,\r\n      email,\r\n      restaurant_name,\r\n      website: website || '',\r\n      admin_name: admin_name || '',\r\n      tier,\r\n      created_at: new Date().toISOString(),\r\n      expires_at: expiresAt.toISOString(),\r\n      status: 'pending'\r\n    };\r\n    \r\n    // Store invitation in the database\r\n    const { data: invitation, error: inviteError } = await supabaseAdmin\r\n      .from('restaurant_invitations')\r\n      .insert([invitationData])\r\n      .select()\r\n      .single();\r\n    \r\n    if (inviteError) {\r\n      console.error('Database error creating invitation:', inviteError);\r\n      return sendJsonResponse(res, 500, {\r\n        status: 'error',\r\n        error: 'Failed to create invitation',\r\n        message: inviteError.message || 'Internal database error'\r\n      });\r\n    }\r\n    \r\n    // Generate invitation URL\r\n    const deployUrl = process.env.VERCEL_URL || process.env.FRONTEND_URL;\r\n    const baseUrl = deployUrl \r\n      ? (deployUrl.startsWith('http') ? deployUrl : `https://${deployUrl}`) \r\n      : 'https://clubcuvee.com';\r\n    \r\n    const invitationUrl = `${baseUrl}/onboarding/${token}`;\r\n    \r\n    // Return successful response with invitation details\r\n    return sendJsonResponse(res, 200, {\r\n      status: 'success',\r\n      message: 'Invitation created successfully',\r\n      invitation: {\r\n        id: invitation.id,\r\n        token: invitation.token,\r\n        email: invitation.email,\r\n        restaurant_name: invitation.restaurant_name,\r\n        status: invitation.status,\r\n        expires_at: invitation.expires_at,\r\n        created_at: invitation.created_at\r\n      },\r\n      invitation_url: invitationUrl\r\n    });\r\n    \r\n  } catch (error: any) {\r\n    // Log error for server-side debugging\r\n    console.error('Error in restaurant-invite endpoint:', error);\r\n    \r\n    // Always return a properly formatted JSON error response\r\n    return sendJsonResponse(res, 500, {\r\n      status: 'error',\r\n      error: 'Internal server error',\r\n      message: error.message || 'An unexpected error occurred',\r\n      details: process.env.NODE_ENV === 'development' ? {\r\n        error: error.message,\r\n        name: error.name,\r\n        code: error.code,\r\n        hint: error.hint,\r\n      } : undefined\r\n    });\r\n  }\r\n}", "import { createClient } from '@supabase/supabase-js';\r\n\r\n// Initialize Supabase with service role key for admin operations\r\nexport const supabaseAdmin = createClient(\r\n  process.env.SUPABASE_URL as string,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY as string,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false\r\n    }\r\n  }\r\n); "],
  "mappings": "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",
  "names": []
}

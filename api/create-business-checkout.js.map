{
  "version": 3,
  "sources": ["create-business-checkout.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport Stripe from 'stripe';\r\nimport { ZodError } from 'zod';\r\n\r\n// Inline error handling (no external dependencies)\r\nclass APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nconst errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof ZodError) {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: 'Validation error',\r\n        code: 'VALIDATION_ERROR',\r\n        details: error.errors,\r\n      },\r\n    });\r\n  }\r\n\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nconst withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n};\r\n\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  // Create Supabase admin client directly in the API (no external dependencies)\r\n  const supabaseAdmin = createClient(\r\n    process.env.SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false\r\n      }\r\n    }\r\n  );\r\n\r\n  // Initialize Stripe client\r\n  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\r\n    apiVersion: '2025-02-24.acacia',\r\n    typescript: true,\r\n  });\r\n\r\n  if (req.method !== 'POST') {\r\n    throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n  }\r\n\r\n  const { token, tier_id } = req.body;\r\n\r\n  // DEBUG: Log incoming request data\r\n  console.log('\uD83D\uDD0D DEBUG - Incoming request data:', { token, tier_id, body: req.body });\r\n\r\n  if (!token || !tier_id) {\r\n    console.log('\u274C DEBUG - Missing required fields:', { token: !!token, tier_id: !!tier_id });\r\n    throw new APIError(400, 'Token and tier_id are required', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Validate invite token\r\n  const { data: invite, error: inviteError } = await supabaseAdmin\r\n    .from('restaurant_invitations')\r\n    .select('restaurant_name, email, tier, expires_at, status')\r\n    .eq('token', token)\r\n    .single();\r\n\r\n  if (inviteError || !invite) {\r\n    console.error('Error fetching invitation details:', inviteError);\r\n    throw new APIError(404, 'Invalid or expired invitation token', 'NOT_FOUND');\r\n  }\r\n\r\n  // Check if token is expired\r\n  if (new Date(invite.expires_at) < new Date()) {\r\n    throw new APIError(400, 'This invitation has expired', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Check if token is already used\r\n  if (invite.status === 'completed') {\r\n    throw new APIError(400, 'This invitation has already been used', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Get pricing tier details from database using tier_id (UUID)\r\n  console.log('\uD83D\uDD0D DEBUG - Querying pricing tier with ID:', tier_id);\r\n  \r\n  const { data: pricingTier, error: tierError } = await supabaseAdmin\r\n    .from('business_pricing_tiers')\r\n    .select('id, name, stripe_price_id, price_cents')\r\n    .eq('id', tier_id)\r\n    .eq('is_active', true)\r\n    .single();\r\n\r\n  console.log('\uD83D\uDD0D DEBUG - Pricing tier query result:', { \r\n    pricingTier, \r\n    tierError, \r\n    queryParams: { id: tier_id, is_active: true }\r\n  });\r\n\r\n  if (tierError || !pricingTier) {\r\n    console.error('\u274C DEBUG - Error fetching pricing tier:', tierError);\r\n    console.log('\u274C DEBUG - Query failed with tier_id:', tier_id);\r\n    \r\n    // Check if any tiers exist at all\r\n    const { data: allTiers, error: allTiersError } = await supabaseAdmin\r\n      .from('business_pricing_tiers')\r\n      .select('id, name, is_active')\r\n      .limit(10);\r\n    \r\n    console.log('\uD83D\uDD0D DEBUG - All available tiers in database:', { allTiers, allTiersError });\r\n    \r\n    throw new APIError(400, 'Invalid pricing tier selected', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  console.log('\uD83D\uDD0D DEBUG - Found pricing tier:', {\r\n    id: pricingTier.id,\r\n    name: pricingTier.name,\r\n    stripe_price_id: pricingTier.stripe_price_id,\r\n    price_cents: pricingTier.price_cents\r\n  });\r\n\r\n  if (!pricingTier.stripe_price_id) {\r\n    console.log('\u274C DEBUG - Pricing tier validation failed:', {\r\n      has_stripe_price_id: !!pricingTier.stripe_price_id,\r\n      stripe_price_id: pricingTier.stripe_price_id\r\n    });\r\n    throw new APIError(400, 'This tier is not available for online signup', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Create Stripe checkout session - use consistent URL logic\r\n  const baseUrl = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || 'https://club-cuvee.com';\r\n  \r\n  try {\r\n    const session = await stripe.checkout.sessions.create({\r\n      mode: 'subscription',\r\n      payment_method_types: ['card'],\r\n      line_items: [\r\n        {\r\n          price: pricingTier.stripe_price_id,\r\n          quantity: 1,\r\n        },\r\n      ],\r\n      customer_email: invite.email,\r\n      metadata: {\r\n        restaurantName: invite.restaurant_name,\r\n        membershipTier: pricingTier.name,\r\n        invitationToken: token,\r\n        pricingTierId: pricingTier.id,\r\n      },\r\n      success_url: `${baseUrl}/onboard/${token}?success=true&session_id={CHECKOUT_SESSION_ID}`,\r\n      cancel_url: `${baseUrl}/onboard/${token}?canceled=true`,\r\n    });\r\n\r\n    // Mark invite as accepted and store session ID\r\n    await supabaseAdmin\r\n      .from('restaurant_invitations')\r\n      .update({\r\n        status: 'accepted',\r\n        payment_session_id: session.id,\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('token', token);\r\n\r\n    // Return response in format expected by OnboardToken.tsx\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        sessionId: session.id,\r\n        checkoutUrl: session.url\r\n      }\r\n    });\r\n  } catch (err) {\r\n    if (err instanceof Stripe.errors.StripeError) {\r\n      throw new APIError(400, err.message, 'STRIPE_ERROR');\r\n    }\r\n    throw err;\r\n  }\r\n});"],
  "mappings": "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",
  "names": ["Stripe"]
}

{
  "version": 3,
  "sources": ["admin.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { ZodError } from 'zod';\r\n\r\n// Inline error handling (no external dependencies)\r\nclass APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\n\r\n// Inline admin utilities\r\nconst setUserAdminStatus = async (userId: string, isAdmin: boolean) => {\r\n  const supabaseAdmin = createClient(\r\n    process.env.SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false,\r\n      },\r\n    }\r\n  );\r\n\r\n  try {\r\n    // Update the user profile\r\n    const { data, error } = await supabaseAdmin\r\n      .from('users')\r\n      .update({ is_admin: isAdmin })\r\n      .eq('local_id', userId) // Changed from 'id' to 'local_id'\r\n      .select()\r\n      .single();\r\n    \r\n    if (error) {\r\n      return { \r\n        success: false, \r\n        error: `Failed to update admin status: ${error.message}` \r\n      };\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      data\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      error: `An unexpected error occurred: ${error.message}`\r\n    };\r\n  }\r\n};\r\n\r\nconst checkUserAdminStatus = async (authId: string) => {\r\n  const supabaseAdmin = createClient(\r\n    process.env.SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false,\r\n      },\r\n    }\r\n  );\r\n\r\n  try {\r\n    const { data, error } = await supabaseAdmin\r\n      .from('users')\r\n      .select('is_admin')\r\n      .eq('auth_id', authId) // Use auth_id to match the auth user\r\n      .single();\r\n    \r\n    if (error) {\r\n      return { \r\n        success: false, \r\n        isAdmin: false,\r\n        error: `Failed to check admin status: ${error.message}` \r\n      };\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      isAdmin: !!data?.is_admin\r\n    };\r\n  } catch (error: any) {\r\n    return {\r\n      success: false,\r\n      isAdmin: false,\r\n      error: `An unexpected error occurred: ${error.message}`\r\n    };\r\n  }\r\n};\r\n\r\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\r\n  // Create Supabase admin client directly in the API (no external dependencies)\r\n  const supabaseAdmin = createClient(\r\n    process.env.SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false\r\n      }\r\n    }\r\n  );\r\n\r\n  try {\r\n    setCommonHeaders(res);\r\n\r\n    if (req.method === 'OPTIONS') {\r\n      return res.status(204).end();\r\n    }\r\n\r\n    // Check if the request has a valid auth token\r\n    const authHeader = req.headers.authorization;\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      return res.status(401).json({ error: 'Unauthorized: Missing authentication token' });\r\n    }\r\n\r\n    const token = authHeader.split(' ')[1];\r\n    if (!token) {\r\n      return res.status(401).json({ error: 'Unauthorized: Invalid token format' });\r\n    }\r\n    \r\n    // Verify the JWT token and get the user\r\n    const { data: { user }, error: authError } = await supabaseAdmin.auth.getUser(token);\r\n    \r\n    if (authError || !user) {\r\n      return res.status(401).json({ error: 'Unauthorized: Invalid token' });\r\n    }\r\n\r\n    // Handle different HTTP methods\r\n    switch (req.method) {\r\n      case 'GET':\r\n        // Check admin status\r\n        const checkResult = await checkUserAdminStatus(user.id);\r\n        return res.status(checkResult.success ? 200 : 400).json(checkResult);\r\n        \r\n      case 'POST':\r\n        // Ensure only current admins can set admin status (except for the first admin)\r\n        const { userId, isAdmin } = req.body;\r\n        \r\n        if (!userId || isAdmin === undefined) {\r\n          return res.status(400).json({ error: 'Bad Request: Missing userId or isAdmin parameter' });\r\n        }\r\n        \r\n        // Check if this is the first admin being created (check if any admin exists)\r\n        const { data: existingAdmins } = await supabaseAdmin\r\n          .from('users')\r\n          .select('local_id') // Changed from 'id' to 'local_id'\r\n          .eq('is_admin', true)\r\n          .limit(1);\r\n        \r\n        const isFirstAdmin = existingAdmins?.length === 0;\r\n        \r\n        // Check if the requestor is an admin (unless this is the first admin being created)\r\n        if (!isFirstAdmin) {\r\n          const adminCheck = await checkUserAdminStatus(user.id);\r\n          if (!adminCheck.isAdmin) {\r\n            return res.status(403).json({ error: 'Forbidden: Only admins can modify admin status' });\r\n          }\r\n        }\r\n        \r\n        // Set the admin status\r\n        const result = await setUserAdminStatus(userId, isAdmin);\r\n        return res.status(result.success ? 200 : 400).json(result);\r\n        \r\n      default:\r\n        return res.status(405).json({ error: 'Method not allowed' });\r\n    }\r\n  } catch (error: any) {\r\n    console.error('Error in admin endpoint:', error);\r\n    return res.status(500).json({ error: `Server error: ${error.message}` });\r\n  }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,yBAA6B;AAe7B,IAAM,mBAAmB,CAAC,QAAwB;AAChD,MAAI,UAAU,gBAAgB,kBAAkB;AAChD,MAAI,UAAU,+BAA+B,GAAG;AAChD,MAAI,UAAU,gCAAgC,iCAAiC;AAC/E,MAAI,UAAU,gCAAgC,6BAA6B;AAC7E;AAIA,IAAM,qBAAqB,OAAO,QAAgB,YAAqB;AACrE,QAAM,oBAAgB;AAAA,IACpB,QAAQ,IAAI;AAAA,IACZ,QAAQ,IAAI;AAAA,IACZ;AAAA,MACE,MAAM;AAAA,QACJ,kBAAkB;AAAA,QAClB,gBAAgB;AAAA,MAClB;AAAA,IACF;AAAA,EACF;AAEA,MAAI;AAEF,UAAM,EAAE,MAAM,MAAM,IAAI,MAAM,cAC3B,KAAK,OAAO,EACZ,OAAO,EAAE,UAAU,QAAQ,CAAC,EAC5B,GAAG,YAAY,MAAM,EACrB,OAAO,EACP,OAAO;AAEV,QAAI,OAAO;AACT,aAAO;AAAA,QACL,SAAS;AAAA,QACT,OAAO,kCAAkC,MAAM,OAAO;AAAA,MACxD;AAAA,IACF;AAEA,WAAO;AAAA,MACL,SAAS;AAAA,MACT;AAAA,IACF;AAAA,EACF,SAAS,OAAY;AACnB,WAAO;AAAA,MACL,SAAS;AAAA,MACT,OAAO,iCAAiC,MAAM,OAAO;AAAA,IACvD;AAAA,EACF;AACF;AAEA,IAAM,uBAAuB,OAAO,WAAmB;AACrD,QAAM,oBAAgB;AAAA,IACpB,QAAQ,IAAI;AAAA,IACZ,QAAQ,IAAI;AAAA,IACZ;AAAA,MACE,MAAM;AAAA,QACJ,kBAAkB;AAAA,QAClB,gBAAgB;AAAA,MAClB;AAAA,IACF;AAAA,EACF;AAEA,MAAI;AACF,UAAM,EAAE,MAAM,MAAM,IAAI,MAAM,cAC3B,KAAK,OAAO,EACZ,OAAO,UAAU,EACjB,GAAG,WAAW,MAAM,EACpB,OAAO;AAEV,QAAI,OAAO;AACT,aAAO;AAAA,QACL,SAAS;AAAA,QACT,SAAS;AAAA,QACT,OAAO,iCAAiC,MAAM,OAAO;AAAA,MACvD;AAAA,IACF;AAEA,WAAO;AAAA,MACL,SAAS;AAAA,MACT,SAAS,CAAC,CAAC,MAAM;AAAA,IACnB;AAAA,EACF,SAAS,OAAY;AACnB,WAAO;AAAA,MACL,SAAS;AAAA,MACT,SAAS;AAAA,MACT,OAAO,iCAAiC,MAAM,OAAO;AAAA,IACvD;AAAA,EACF;AACF;AAEA,eAAO,QAA+B,KAAoB,KAAqB;AAE7E,QAAM,oBAAgB;AAAA,IACpB,QAAQ,IAAI;AAAA,IACZ,QAAQ,IAAI;AAAA,IACZ;AAAA,MACE,MAAM;AAAA,QACJ,kBAAkB;AAAA,QAClB,gBAAgB;AAAA,MAClB;AAAA,IACF;AAAA,EACF;AAEA,MAAI;AACF,qBAAiB,GAAG;AAEpB,QAAI,IAAI,WAAW,WAAW;AAC5B,aAAO,IAAI,OAAO,GAAG,EAAE,IAAI;AAAA,IAC7B;AAGA,UAAM,aAAa,IAAI,QAAQ;AAC/B,QAAI,CAAC,cAAc,CAAC,WAAW,WAAW,SAAS,GAAG;AACpD,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,6CAA6C,CAAC;AAAA,IACrF;AAEA,UAAM,QAAQ,WAAW,MAAM,GAAG,EAAE,CAAC;AACrC,QAAI,CAAC,OAAO;AACV,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qCAAqC,CAAC;AAAA,IAC7E;AAGA,UAAM,EAAE,MAAM,EAAE,KAAK,GAAG,OAAO,UAAU,IAAI,MAAM,cAAc,KAAK,QAAQ,KAAK;AAEnF,QAAI,aAAa,CAAC,MAAM;AACtB,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,8BAA8B,CAAC;AAAA,IACtE;AAGA,YAAQ,IAAI,QAAQ;AAAA,MAClB,KAAK;AAEH,cAAM,cAAc,MAAM,qBAAqB,KAAK,EAAE;AACtD,eAAO,IAAI,OAAO,YAAY,UAAU,MAAM,GAAG,EAAE,KAAK,WAAW;AAAA,MAErE,KAAK;AAEH,cAAM,EAAE,QAAQ,QAAQ,IAAI,IAAI;AAEhC,YAAI,CAAC,UAAU,YAAY,QAAW;AACpC,iBAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,mDAAmD,CAAC;AAAA,QAC3F;AAGA,cAAM,EAAE,MAAM,eAAe,IAAI,MAAM,cACpC,KAAK,OAAO,EACZ,OAAO,UAAU,EACjB,GAAG,YAAY,IAAI,EACnB,MAAM,CAAC;AAEV,cAAM,eAAe,gBAAgB,WAAW;AAGhD,YAAI,CAAC,cAAc;AACjB,gBAAM,aAAa,MAAM,qBAAqB,KAAK,EAAE;AACrD,cAAI,CAAC,WAAW,SAAS;AACvB,mBAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,iDAAiD,CAAC;AAAA,UACzF;AAAA,QACF;AAGA,cAAM,SAAS,MAAM,mBAAmB,QAAQ,OAAO;AACvD,eAAO,IAAI,OAAO,OAAO,UAAU,MAAM,GAAG,EAAE,KAAK,MAAM;AAAA,MAE3D;AACE,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qBAAqB,CAAC;AAAA,IAC/D;AAAA,EACF,SAAS,OAAY;AACnB,YAAQ,MAAM,4BAA4B,KAAK;AAC/C,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,iBAAiB,MAAM,OAAO,GAAG,CAAC;AAAA,EACzE;AACF;",
  "names": []
}

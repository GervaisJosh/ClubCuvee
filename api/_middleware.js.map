{
  "version": 3,
  "sources": ["_middleware.ts", "utils/error-handler.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { withErrorHandler } from './utils/error-handler';\r\n\r\nconst ALLOWED_METHODS = ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'] as const;\r\nconst ALLOWED_ORIGINS = process.env.ALLOWED_ORIGINS?.split(',') || ['*'];\r\n\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  // Handle CORS\r\n  const origin = req.headers.origin || '';\r\n  if (origin && (ALLOWED_ORIGINS.includes('*') || ALLOWED_ORIGINS.includes(origin))) {\r\n    res.setHeader('Access-Control-Allow-Origin', origin);\r\n  }\r\n\r\n  res.setHeader('Access-Control-Allow-Methods', ALLOWED_METHODS.join(','));\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n  res.setHeader('Access-Control-Max-Age', '86400'); // 24 hours\r\n\r\n  // Handle preflight\r\n  if (req.method === 'OPTIONS') {\r\n    res.status(204).end();\r\n    return;\r\n  }\r\n\r\n  // Validate method\r\n  if (!ALLOWED_METHODS.includes(req.method as typeof ALLOWED_METHODS[number])) {\r\n    res.status(405).json({\r\n      error: {\r\n        message: `Method ${req.method} not allowed`,\r\n        code: 'METHOD_NOT_ALLOWED',\r\n      },\r\n    });\r\n    return;\r\n  }\r\n\r\n  // Set JSON content type for all responses\r\n  res.setHeader('Content-Type', 'application/json');\r\n});", "import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { ZodError } from 'zod';\r\n\r\nexport class APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\n// Helper to set common headers for all responses\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nexport const errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  // Handle preflight requests\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof ZodError) {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: 'Validation error',\r\n        code: 'VALIDATION_ERROR',\r\n        details: error.errors,\r\n      },\r\n    });\r\n  }\r\n\r\n  // Handle Stripe errors\r\n  if (error instanceof Error && error.name === 'StripeError') {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: 'STRIPE_ERROR',\r\n      },\r\n    });\r\n  }\r\n\r\n  // Default error\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nexport const withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      // Handle preflight requests\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n}; "],
  "mappings": "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",
  "names": []
}

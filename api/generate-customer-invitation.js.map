{
  "version": 3,
  "sources": ["generate-customer-invitation.ts"],
  "sourcesContent": ["import type { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport crypto from 'crypto';\r\n\r\n// INLINE Supabase client (no external imports)\r\nconst supabaseAdmin = createClient(\r\n  process.env.SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false\r\n    }\r\n  }\r\n);\r\n\r\n// INLINE error handling (no external imports)\r\nclass APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nconst errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nconst withErrorHandling = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n};\r\n\r\nconst handler = async (req: VercelRequest, res: VercelResponse) => {\r\n  if (req.method !== 'POST') {\r\n    return res.status(405).json({ error: 'Method not allowed' });\r\n  }\r\n\r\n  try {\r\n    const { businessId, customerEmail } = req.body;\r\n\r\n    if (!businessId) {\r\n      return res.status(400).json({ error: 'Business ID is required' });\r\n    }\r\n\r\n    // Verify that the business exists\r\n    const { data: business, error: businessError } = await supabaseAdmin\r\n      .from('businesses')\r\n      .select('id, name')\r\n      .eq('id', businessId)\r\n      .single();\r\n\r\n    if (businessError || !business) {\r\n      return res.status(404).json({ \r\n        error: 'Business not found' \r\n      });\r\n    }\r\n\r\n    // Generate a secure token\r\n    const token = crypto.randomBytes(32).toString('hex');\r\n\r\n    // Set expiration date (30 days from now)\r\n    const expiresAt = new Date();\r\n    expiresAt.setDate(expiresAt.getDate() + 30);\r\n\r\n    // Create the customer invitation\r\n    const invitationData = {\r\n      business_id: businessId,\r\n      token: token,\r\n      customer_email: customerEmail || null,\r\n      status: 'pending',\r\n      expires_at: expiresAt.toISOString(),\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n\r\n    const { data: invitation, error: insertError } = await supabaseAdmin\r\n      .from('customer_invitations')\r\n      .insert([invitationData])\r\n      .select()\r\n      .single();\r\n\r\n    if (insertError) {\r\n      console.error('Error creating customer invitation:', insertError);\r\n      return res.status(500).json({ \r\n        error: 'Failed to create customer invitation' \r\n      });\r\n    }\r\n\r\n    // Generate the customer registration URL\r\n    const baseUrl = process.env.VERCEL_URL \r\n      ? `https://${process.env.VERCEL_URL}` \r\n      : process.env.BASE_URL || 'http://localhost:3000';\r\n    \r\n    const customerUrl = `${baseUrl}/customer/join/${token}`;\r\n\r\n    return res.status(200).json({\r\n      success: true,\r\n      invitation: {\r\n        id: invitation.id,\r\n        token: invitation.token,\r\n        expires_at: invitation.expires_at,\r\n        status: invitation.status,\r\n        business: {\r\n          id: business.id,\r\n          name: business.name\r\n        }\r\n      },\r\n      customerUrl\r\n    });\r\n  } catch (error: any) {\r\n    console.error('Error in generate-customer-invitation:', error);\r\n    return res.status(500).json({ \r\n      error: 'Internal server error',\r\n      message: error.message \r\n    });\r\n  }\r\n};\r\n\r\nexport default withErrorHandling(handler);"],
  "mappings": "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",
  "names": ["handler", "crypto"]
}

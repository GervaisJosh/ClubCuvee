{
  "version": 3,
  "sources": ["stripe-webhook.ts", "utils/error-handler.ts", "utils/stripe.ts", "utils/supabase.ts", "../lib/supabaseAdmin.ts"],
  "sourcesContent": ["// File: /api/stripe-webhook.ts\r\nimport { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { withErrorHandler } from './utils/error-handler';\r\nimport { verifyStripeWebhook, getSubscription } from './utils/stripe';\r\nimport { createRestaurant, updateRestaurantInvite } from './utils/supabase';\r\nimport { supabaseAdmin } from '../lib/supabaseAdmin';\r\nimport { APIError } from './utils/error-handler';\r\nimport Stripe from 'stripe';\r\n\r\n/**\r\n * Stripe webhook endpoint - all logic is now contained in the modular webhookHandler\r\n * This provides a clean entry point for the Vercel serverless function\r\n * Uses the withErrorHandling wrapper for consistent error responses\r\n */\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  if (req.method !== 'POST') {\r\n    throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n  }\r\n\r\n  const signature = req.headers['stripe-signature'];\r\n  if (!signature || typeof signature !== 'string') {\r\n    throw new APIError(400, 'Missing stripe-signature header', 'MISSING_SIGNATURE');\r\n  }\r\n\r\n  // Verify webhook signature\r\n  const event = verifyStripeWebhook(signature, req.body);\r\n\r\n  // Handle the event\r\n  switch (event.type) {\r\n    case 'checkout.session.completed': {\r\n      const session = event.data.object as Stripe.Checkout.Session;\r\n      \r\n      // Handle business onboarding checkout\r\n      if (session.metadata?.type === 'business_onboarding') {\r\n        if (!session.subscription || !session.metadata?.business_invitation_token) {\r\n          throw new APIError(400, 'Invalid business onboarding session data', 'INVALID_SESSION');\r\n        }\r\n\r\n        // Get subscription details\r\n        const subscription = await getSubscription(session.subscription as string);\r\n\r\n        // Get the business invitation details to create the business\r\n        const { data: inviteData, error: inviteError } = await supabaseAdmin.rpc('validate_business_invitation_token', {\r\n          p_token: session.metadata.business_invitation_token\r\n        });\r\n\r\n        if (inviteError || !inviteData || inviteData.length === 0) {\r\n          throw new APIError(400, 'Invalid business invitation token', 'INVALID_TOKEN');\r\n        }\r\n\r\n        const businessData = inviteData[0];\r\n\r\n        // Create business record\r\n        await createRestaurant({\r\n          name: businessData.business_name,\r\n          email: businessData.business_email,\r\n          subscription_id: subscription.id,\r\n          membership_tier: session.metadata.pricing_tier_key,\r\n        });\r\n\r\n        // Mark business invitation as used\r\n        const { error: markUsedError } = await supabaseAdmin.rpc('mark_business_invitation_used', {\r\n          p_token: session.metadata.business_invitation_token\r\n        });\r\n\r\n        if (markUsedError) {\r\n          console.error('Error marking business invitation as used:', markUsedError);\r\n        }\r\n      } \r\n      // Handle legacy restaurant invitations (backward compatibility)\r\n      else if (session.metadata?.restaurantName) {\r\n        if (!session.subscription) {\r\n          throw new APIError(400, 'Invalid session data', 'INVALID_SESSION');\r\n        }\r\n\r\n        // Get subscription details\r\n        const subscription = await getSubscription(session.subscription as string);\r\n\r\n        // Create restaurant record\r\n        await createRestaurant({\r\n          name: session.metadata.restaurantName,\r\n          email: session.customer_email!,\r\n          subscription_id: subscription.id,\r\n          membership_tier: session.metadata.membershipTier,\r\n        });\r\n\r\n        // Mark invite as accepted\r\n        if (session.metadata.inviteToken) {\r\n          await updateRestaurantInvite(session.metadata.inviteToken, {\r\n            status: 'accepted',\r\n            accepted_at: new Date().toISOString(),\r\n          });\r\n        }\r\n      } \r\n      // Handle customer membership signup\r\n      else if (session.metadata?.type === 'customer_membership') {\r\n        if (!session.subscription || !session.metadata?.business_id || !session.metadata?.tier_id) {\r\n          throw new APIError(400, 'Invalid customer membership session data', 'INVALID_SESSION');\r\n        }\r\n\r\n        // Get subscription details\r\n        const subscription = await getSubscription(session.subscription as string);\r\n\r\n        // Create customer membership record\r\n        const { error: membershipError } = await supabaseAdmin\r\n          .from('customer_memberships')\r\n          .insert({\r\n            customer_email: session.metadata.customer_email,\r\n            customer_name: session.metadata.customer_name || null,\r\n            business_id: session.metadata.business_id,\r\n            tier_id: session.metadata.tier_id,\r\n            stripe_customer_id: subscription.customer as string,\r\n            stripe_subscription_id: subscription.id,\r\n            status: 'active',\r\n            started_at: new Date().toISOString()\r\n          });\r\n\r\n        if (membershipError) {\r\n          console.error('Error creating customer membership:', membershipError);\r\n          throw new APIError(500, 'Failed to create customer membership', 'MEMBERSHIP_CREATION_FAILED');\r\n        }\r\n      } else {\r\n        throw new APIError(400, 'Unknown checkout session type', 'INVALID_SESSION');\r\n      }\r\n\r\n      break;\r\n    }\r\n\r\n    default:\r\n      console.log(`Unhandled event type: ${event.type}`);\r\n  }\r\n\r\n  res.status(200).json({ received: true });\r\n});\r\n", "import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { ZodError } from 'zod';\r\n\r\nexport class APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\n// Helper to set common headers for all responses\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nexport const errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  // Handle preflight requests\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof ZodError) {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: 'Validation error',\r\n        code: 'VALIDATION_ERROR',\r\n        details: error.errors,\r\n      },\r\n    });\r\n  }\r\n\r\n  // Handle Stripe errors\r\n  if (error instanceof Error && error.name === 'StripeError') {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: 'STRIPE_ERROR',\r\n      },\r\n    });\r\n  }\r\n\r\n  // Default error\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nexport const withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      // Handle preflight requests\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n}; ", "import Stripe from 'stripe';\r\nimport { APIError } from './error-handler';\r\n\r\nif (!process.env.STRIPE_SECRET_KEY) {\r\n  throw new Error('STRIPE_SECRET_KEY is required');\r\n}\r\n\r\nif (!process.env.STRIPE_WEBHOOK_SECRET) {\r\n  throw new Error('STRIPE_WEBHOOK_SECRET is required');\r\n}\r\n\r\nexport const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\r\n  apiVersion: '2025-02-24.acacia',\r\n  typescript: true,\r\n});\r\n\r\nexport const verifyStripeWebhook = (signature: string, payload: string) => {\r\n  try {\r\n    return stripe.webhooks.constructEvent(\r\n      payload,\r\n      signature,\r\n      process.env.STRIPE_WEBHOOK_SECRET!\r\n    );\r\n  } catch (err) {\r\n    throw new APIError(400, 'Invalid webhook signature', 'INVALID_SIGNATURE');\r\n  }\r\n};\r\n\r\nexport const createCheckoutSession = async (data: {\r\n  restaurantName: string;\r\n  email: string;\r\n  membershipTier: string;\r\n  successUrl: string;\r\n  cancelUrl: string;\r\n}) => {\r\n  try {\r\n    const session = await stripe.checkout.sessions.create({\r\n      mode: 'subscription',\r\n      payment_method_types: ['card'],\r\n      line_items: [\r\n        {\r\n          price: process.env[`STRIPE_PRICE_ID_${data.membershipTier.toUpperCase()}`],\r\n          quantity: 1,\r\n        },\r\n      ],\r\n      customer_email: data.email,\r\n      metadata: {\r\n        restaurantName: data.restaurantName,\r\n        membershipTier: data.membershipTier,\r\n      },\r\n      success_url: data.successUrl,\r\n      cancel_url: data.cancelUrl,\r\n    });\r\n\r\n    return session;\r\n  } catch (err) {\r\n    if (err instanceof Stripe.errors.StripeError) {\r\n      throw new APIError(400, err.message, 'STRIPE_ERROR');\r\n    }\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getSubscription = async (subscriptionId: string) => {\r\n  try {\r\n    return await stripe.subscriptions.retrieve(subscriptionId);\r\n  } catch (err) {\r\n    if (err instanceof Stripe.errors.StripeError) {\r\n      throw new APIError(400, err.message, 'STRIPE_ERROR');\r\n    }\r\n    throw err;\r\n  }\r\n}; ", "import { createClient } from '@supabase/supabase-js';\r\nimport { APIError } from './error-handler';\r\n\r\nif (!process.env.SUPABASE_URL) {\r\n  throw new Error('SUPABASE_URL is required');\r\n}\r\n\r\nif (!process.env.SUPABASE_SERVICE_ROLE_KEY) {\r\n  throw new Error('SUPABASE_SERVICE_ROLE_KEY is required');\r\n}\r\n\r\nexport const supabase = createClient(\r\n  process.env.SUPABASE_URL,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false,\r\n    },\r\n  }\r\n);\r\n\r\nexport const getRestaurantInvite = async (token: string) => {\r\n  const { data, error } = await supabase\r\n    .from('restaurant_invitations')\r\n    .select('*')\r\n    .eq('token', token)\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new APIError(500, 'Failed to fetch restaurant invitation', 'DATABASE_ERROR');\r\n  }\r\n\r\n  if (!data) {\r\n    throw new APIError(404, 'Invitation not found', 'INVITATION_NOT_FOUND');\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\nexport const createRestaurant = async (data: {\r\n  name: string;\r\n  email: string;\r\n  subscription_id: string;\r\n  membership_tier: string;\r\n}) => {\r\n  const { data: restaurant, error } = await supabase\r\n    .from('restaurants')\r\n    .insert([data])\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new APIError(500, 'Failed to create restaurant', 'DATABASE_ERROR');\r\n  }\r\n\r\n  return restaurant;\r\n};\r\n\r\nexport const updateRestaurantInvite = async (token: string, data: {\r\n  status: 'accepted' | 'expired' | 'in_progress';\r\n  accepted_at?: string;\r\n}) => {\r\n  const { error } = await supabase\r\n    .from('restaurant_invitations')\r\n    .update(data)\r\n    .eq('token', token);\r\n\r\n  if (error) {\r\n    throw new APIError(500, 'Failed to update restaurant invitation', 'DATABASE_ERROR');\r\n  }\r\n}; ", "import { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase with service role key for admin operations\nexport const supabaseAdmin = createClient(\n  process.env.SUPABASE_URL as string,\n  process.env.SUPABASE_SERVICE_ROLE_KEY as string,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n); "],
  "mappings": "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",
  "names": ["Stripe", "Stripe", "import_supabase_js"]
}

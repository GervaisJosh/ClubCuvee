{
  "version": 3,
  "sources": ["stripe-webhook.ts", "utils/error-handler.ts", "utils/stripe.ts", "utils/supabase.ts"],
  "sourcesContent": ["// File: /api/stripe-webhook.ts\r\nimport { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { withErrorHandler } from './utils/error-handler';\r\nimport { verifyStripeWebhook, getSubscription } from './utils/stripe';\r\nimport { createRestaurant, getRestaurantInvite, updateRestaurantInvite } from './utils/supabase';\r\nimport { APIError } from './utils/error-handler';\r\nimport Stripe from 'stripe';\r\n\r\n/**\r\n * Stripe webhook endpoint - all logic is now contained in the modular webhookHandler\r\n * This provides a clean entry point for the Vercel serverless function\r\n * Uses the withErrorHandling wrapper for consistent error responses\r\n */\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  if (req.method !== 'POST') {\r\n    throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n  }\r\n\r\n  const signature = req.headers['stripe-signature'];\r\n  if (!signature || typeof signature !== 'string') {\r\n    throw new APIError(400, 'Missing stripe-signature header', 'MISSING_SIGNATURE');\r\n  }\r\n\r\n  // Verify webhook signature\r\n  const event = verifyStripeWebhook(signature, req.body);\r\n\r\n  // Handle the event\r\n  switch (event.type) {\r\n    case 'checkout.session.completed': {\r\n      const session = event.data.object as Stripe.Checkout.Session;\r\n      \r\n      if (!session.subscription || !session.metadata?.restaurantName) {\r\n        throw new APIError(400, 'Invalid session data', 'INVALID_SESSION');\r\n      }\r\n\r\n      // Get subscription details\r\n      const subscription = await getSubscription(session.subscription as string);\r\n\r\n      // Create restaurant record\r\n      await createRestaurant({\r\n        name: session.metadata.restaurantName,\r\n        email: session.customer_email!,\r\n        subscription_id: subscription.id,\r\n        membership_tier: session.metadata.membershipTier,\r\n      });\r\n\r\n      // Mark invite as accepted\r\n      if (session.metadata.inviteToken) {\r\n        await updateRestaurantInvite(session.metadata.inviteToken, {\r\n          status: 'accepted',\r\n          accepted_at: new Date().toISOString(),\r\n        });\r\n      }\r\n\r\n      break;\r\n    }\r\n\r\n    case 'customer.subscription.deleted': {\r\n      const subscription = event.data.object as Stripe.Subscription;\r\n      \r\n      // Update restaurant status if needed\r\n      // This could involve updating a status field in the restaurants table\r\n      // or handling the subscription cancellation in some other way\r\n      \r\n      break;\r\n    }\r\n\r\n    default:\r\n      console.log(`Unhandled event type: ${event.type}`);\r\n  }\r\n\r\n  res.status(200).json({ received: true });\r\n});\r\n", "import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { ZodError } from 'zod';\r\n\r\nexport class APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nexport const errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof ZodError) {\r\n    return res.status(400).json({\r\n      error: {\r\n        message: 'Validation error',\r\n        code: 'VALIDATION_ERROR',\r\n        details: error.errors,\r\n      },\r\n    });\r\n  }\r\n\r\n  // Handle Stripe errors\r\n  if (error instanceof Error && error.name === 'StripeError') {\r\n    return res.status(400).json({\r\n      error: {\r\n        message: error.message,\r\n        code: 'STRIPE_ERROR',\r\n      },\r\n    });\r\n  }\r\n\r\n  // Default error\r\n  return res.status(500).json({\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nexport const withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n}; ", "import Stripe from 'stripe';\r\nimport { APIError } from './error-handler';\r\n\r\nif (!process.env.STRIPE_SECRET_KEY) {\r\n  throw new Error('STRIPE_SECRET_KEY is required');\r\n}\r\n\r\nif (!process.env.STRIPE_WEBHOOK_SECRET) {\r\n  throw new Error('STRIPE_WEBHOOK_SECRET is required');\r\n}\r\n\r\nexport const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\r\n  apiVersion: '2025-02-24.acacia',\r\n  typescript: true,\r\n});\r\n\r\nexport const verifyStripeWebhook = (signature: string, payload: string) => {\r\n  try {\r\n    return stripe.webhooks.constructEvent(\r\n      payload,\r\n      signature,\r\n      process.env.STRIPE_WEBHOOK_SECRET!\r\n    );\r\n  } catch (err) {\r\n    throw new APIError(400, 'Invalid webhook signature', 'INVALID_SIGNATURE');\r\n  }\r\n};\r\n\r\nexport const createCheckoutSession = async (data: {\r\n  restaurantName: string;\r\n  email: string;\r\n  membershipTier: string;\r\n  successUrl: string;\r\n  cancelUrl: string;\r\n}) => {\r\n  try {\r\n    const session = await stripe.checkout.sessions.create({\r\n      mode: 'subscription',\r\n      payment_method_types: ['card'],\r\n      line_items: [\r\n        {\r\n          price: process.env[`STRIPE_PRICE_ID_${data.membershipTier.toUpperCase()}`],\r\n          quantity: 1,\r\n        },\r\n      ],\r\n      customer_email: data.email,\r\n      metadata: {\r\n        restaurantName: data.restaurantName,\r\n        membershipTier: data.membershipTier,\r\n      },\r\n      success_url: data.successUrl,\r\n      cancel_url: data.cancelUrl,\r\n    });\r\n\r\n    return session;\r\n  } catch (err) {\r\n    if (err instanceof Stripe.errors.StripeError) {\r\n      throw new APIError(400, err.message, 'STRIPE_ERROR');\r\n    }\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getSubscription = async (subscriptionId: string) => {\r\n  try {\r\n    return await stripe.subscriptions.retrieve(subscriptionId);\r\n  } catch (err) {\r\n    if (err instanceof Stripe.errors.StripeError) {\r\n      throw new APIError(400, err.message, 'STRIPE_ERROR');\r\n    }\r\n    throw err;\r\n  }\r\n}; ", "import { createClient } from '@supabase/supabase-js';\r\nimport { APIError } from './error-handler';\r\n\r\nif (!process.env.SUPABASE_URL) {\r\n  throw new Error('SUPABASE_URL is required');\r\n}\r\n\r\nif (!process.env.SUPABASE_SERVICE_ROLE_KEY) {\r\n  throw new Error('SUPABASE_SERVICE_ROLE_KEY is required');\r\n}\r\n\r\nexport const supabase = createClient(\r\n  process.env.SUPABASE_URL,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false,\r\n    },\r\n  }\r\n);\r\n\r\nexport const getRestaurantInvite = async (token: string) => {\r\n  const { data, error } = await supabase\r\n    .from('restaurant_invites')\r\n    .select('*')\r\n    .eq('token', token)\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new APIError(500, 'Failed to fetch restaurant invite', 'DATABASE_ERROR');\r\n  }\r\n\r\n  if (!data) {\r\n    throw new APIError(404, 'Invite not found', 'INVITE_NOT_FOUND');\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\nexport const createRestaurant = async (data: {\r\n  name: string;\r\n  email: string;\r\n  subscription_id: string;\r\n  membership_tier: string;\r\n}) => {\r\n  const { data: restaurant, error } = await supabase\r\n    .from('restaurants')\r\n    .insert([data])\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new APIError(500, 'Failed to create restaurant', 'DATABASE_ERROR');\r\n  }\r\n\r\n  return restaurant;\r\n};\r\n\r\nexport const updateRestaurantInvite = async (token: string, data: {\r\n  status: 'accepted' | 'expired' | 'in_progress';\r\n  accepted_at?: string;\r\n}) => {\r\n  const { error } = await supabase\r\n    .from('restaurant_invites')\r\n    .update(data)\r\n    .eq('token', token);\r\n\r\n  if (error) {\r\n    throw new APIError(500, 'Failed to update restaurant invite', 'DATABASE_ERROR');\r\n  }\r\n}; "],
  "mappings": "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",
  "names": ["Stripe", "Stripe"]
}

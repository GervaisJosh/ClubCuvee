{
  "version": 3,
  "sources": ["restaurant-tiers.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// Create Supabase admin client (inline, no external dependencies)\r\nconst supabaseAdmin = createClient(\r\n  process.env.SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false\r\n    }\r\n  }\r\n);\r\n\r\n// Inline error handling (no external dependencies)\r\nclass APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nconst errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nconst withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n};\r\n\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  const authHeader = req.headers.authorization;\r\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n    throw new APIError(401, 'Unauthorized', 'UNAUTHORIZED');\r\n  }\r\n\r\n  const business_id = req.query.business_id as string;\r\n\r\n  if (!business_id) {\r\n    throw new APIError(400, 'business_id parameter is required', 'MISSING_BUSINESS_ID');\r\n  }\r\n\r\n  switch (req.method) {\r\n    case 'GET':\r\n      await handleGetTiers(business_id, res);\r\n      break;\r\n    \r\n    case 'DELETE':\r\n      const tier_id = req.query.tier_id as string;\r\n      if (!tier_id) {\r\n        throw new APIError(400, 'tier_id parameter is required for DELETE', 'MISSING_TIER_ID');\r\n      }\r\n      await handleDeleteTier(business_id, tier_id, res);\r\n      break;\r\n    \r\n    default:\r\n      throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n  }\r\n});\r\n\r\nasync function handleGetTiers(business_id: string, res: VercelResponse) {\r\n  // Verify business exists\r\n  const { data: business, error: businessError } = await supabaseAdmin\r\n    .from('businesses')\r\n    .select('id, name')\r\n    .eq('id', business_id)\r\n    .single();\r\n\r\n  if (businessError || !business) {\r\n    throw new APIError(404, 'Business not found', 'BUSINESS_NOT_FOUND');\r\n  }\r\n\r\n  // Get all tiers for this business\r\n  const { data: tiers, error: tiersError } = await supabaseAdmin\r\n    .from('membership_tiers')\r\n    .select('*')\r\n    .eq('business_id', business_id)\r\n    .order('created_at', { ascending: true });\r\n\r\n  if (tiersError) {\r\n    throw new APIError(500, 'Failed to fetch tiers', 'FETCH_TIERS_FAILED');\r\n  }\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    data: {\r\n      business: business,\r\n      tiers: tiers || []\r\n    }\r\n  });\r\n}\r\n\r\nasync function handleDeleteTier(business_id: string, tier_id: string, res: VercelResponse) {\r\n  // Verify the tier exists and belongs to this business\r\n  const { data: tier, error: tierError } = await supabaseAdmin\r\n    .from('membership_tiers')\r\n    .select('*')\r\n    .eq('id', tier_id)\r\n    .eq('business_id', business_id)\r\n    .single();\r\n\r\n  if (tierError || !tier) {\r\n    throw new APIError(404, 'Tier not found or access denied', 'TIER_NOT_FOUND');\r\n  }\r\n\r\n  // TODO: Consider archiving Stripe products instead of deleting\r\n  // For now, we'll just delete the database record\r\n  // The Stripe products will remain (to preserve payment history)\r\n  \r\n  const { error: deleteError } = await supabaseAdmin\r\n    .from('membership_tiers')\r\n    .delete()\r\n    .eq('id', tier_id)\r\n    .eq('business_id', business_id);\r\n\r\n  if (deleteError) {\r\n    throw new APIError(500, 'Failed to delete tier', 'DELETE_TIER_FAILED');\r\n  }\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    data: {\r\n      message: 'Tier deleted successfully',\r\n      deleted_tier_id: tier_id\r\n    }\r\n  });\r\n}"],
  "mappings": "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",
  "names": []
}

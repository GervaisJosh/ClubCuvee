{
  "version": 3,
  "sources": ["get-business-by-token.ts"],
  "sourcesContent": ["import type { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { createClient } from '@supabase/supabase-js';\r\n\r\n// INLINE Supabase client (no external imports)\r\nconst supabaseAdmin = createClient(\r\n  process.env.SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false\r\n    }\r\n  }\r\n);\r\n\r\n// INLINE error handling (no external imports)\r\nclass APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nconst errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nconst withErrorHandling = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n};\r\n\r\nconst handler = async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  console.log('=== GET BUSINESS BY TOKEN DEBUG ===');\r\n  console.log('Request method:', req.method);\r\n  console.log('Request body:', JSON.stringify(req.body, null, 2));\r\n  console.log('Environment check:', {\r\n    hasSupabaseUrl: !!process.env.SUPABASE_URL,\r\n    hasServiceKey: !!process.env.SUPABASE_SERVICE_ROLE_KEY\r\n  });\r\n\r\n  if (req.method !== 'POST') {\r\n    console.log('\u274C Method not allowed:', req.method);\r\n    res.status(405).json({ error: 'Method not allowed' });\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const { token } = req.body;\r\n\r\n    console.log('Token received:', token);\r\n\r\n    if (!token) {\r\n      console.log('\u274C No token provided');\r\n      res.status(400).json({ error: 'Token is required' });\r\n      return;\r\n    }\r\n\r\n    // Get business data through the invitation token\r\n    console.log('\uD83D\uDD0D Querying restaurant_invitations for token:', token);\r\n    const { data: invitation, error: invitationError } = await supabaseAdmin\r\n      .from('restaurant_invitations')\r\n      .select('*')\r\n      .eq('token', token)\r\n      .in('status', ['paid', 'completed'])\r\n      .single();\r\n\r\n    console.log('Invitation query result:', {\r\n      invitation: invitation ? {\r\n        id: invitation.id,\r\n        restaurant_name: invitation.restaurant_name,\r\n        email: invitation.email,\r\n        status: invitation.status,\r\n        business_id: invitation.business_id,\r\n        token: invitation.token\r\n      } : null,\r\n      error: invitationError\r\n    });\r\n\r\n    if (invitationError || !invitation) {\r\n      console.log('\u274C Invitation not found or not completed');\r\n      \r\n      // Also try to find the invitation without status filter for debugging\r\n      const { data: anyInvitation, error: anyError } = await supabaseAdmin\r\n        .from('restaurant_invitations')\r\n        .select('*')\r\n        .eq('token', token)\r\n        .single();\r\n      \r\n      console.log('Debug - Any invitation with this token:', {\r\n        invitation: anyInvitation,\r\n        error: anyError\r\n      });\r\n\r\n      res.status(404).json({ \r\n        error: 'Invitation not found or not in paid/completed status',\r\n        debug: {\r\n          tokenProvided: token,\r\n          invitationFound: !!anyInvitation,\r\n          invitationStatus: anyInvitation?.status,\r\n          hasBusinessId: !!anyInvitation?.business_id,\r\n          expectedStatuses: ['paid', 'completed']\r\n        }\r\n      });\r\n      return;\r\n    }\r\n\r\n    console.log('\u2705 Found invitation, checking business_id:', invitation.business_id);\r\n\r\n    // Handle case where business hasn't been created yet\r\n    if (!invitation.business_id) {\r\n      console.log('\u26A0\uFE0F No business_id yet - invitation exists but business not created');\r\n      res.status(200).json({\r\n        invitation: {\r\n          id: invitation.id,\r\n          email: invitation.email,\r\n          restaurant_name: invitation.restaurant_name,\r\n          status: invitation.status,\r\n          created_at: invitation.created_at\r\n        },\r\n        business: null,\r\n        membershipTiers: [],\r\n        message: 'Invitation found but business not created yet'\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Get business data using business_id from invitation\r\n    console.log('\uD83D\uDD0D Querying businesses table for business_id:', invitation.business_id);\r\n    const { data: business, error: businessError } = await supabaseAdmin\r\n      .from('businesses')\r\n      .select('id, name, website, email, status, created_at, updated_at, pricing_tier_id')\r\n      .eq('id', invitation.business_id)\r\n      .single();\r\n\r\n    console.log('Business query result:', {\r\n      business: business ? {\r\n        id: business.id,\r\n        name: business.name,\r\n        email: business.email,\r\n        status: business.status\r\n      } : null,\r\n      error: businessError\r\n    });\r\n\r\n    if (businessError || !business) {\r\n      console.log('\u274C Business not found for business_id:', invitation.business_id);\r\n      res.status(404).json({ \r\n        error: 'Business not found',\r\n        debug: {\r\n          business_id: invitation.business_id,\r\n          businessError: businessError\r\n        }\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Get pricing tier details separately\r\n    let pricingTierName = 'Unknown';\r\n    if (business.pricing_tier_id) {\r\n      const { data: pricingTier, error: pricingTierError } = await supabaseAdmin\r\n        .from('business_pricing_tiers')\r\n        .select('name')\r\n        .eq('id', business.pricing_tier_id)\r\n        .single();\r\n      \r\n      if (!pricingTierError && pricingTier) {\r\n        pricingTierName = pricingTier.name;\r\n      }\r\n    }\r\n\r\n    // Get membership tiers for this business\r\n    console.log('\uD83D\uDD0D Querying membership_tiers for business_id:', business.id);\r\n    const { data: membershipTiers, error: tiersError } = await supabaseAdmin\r\n      .from('membership_tiers')\r\n      .select('id, name, description, monthly_price_cents, stripe_product_id, stripe_price_id, created_at')\r\n      .eq('business_id', business.id)\r\n      .order('created_at', { ascending: true });\r\n\r\n    console.log('Membership tiers query result:', {\r\n      tierCount: membershipTiers?.length || 0,\r\n      tiers: membershipTiers?.map(t => ({ id: t.id, name: t.name, price: t.monthly_price_cents })) || [],\r\n      error: tiersError\r\n    });\r\n\r\n    if (tiersError) {\r\n      console.error('\u274C Error fetching membership tiers:', tiersError);\r\n      res.status(500).json({ \r\n        error: 'Failed to fetch membership tiers',\r\n        debug: { tiersError }\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Format the response to match frontend interface\r\n    const response = {\r\n      business: {\r\n        id: business.id,\r\n        name: business.name,\r\n        website: business.website,\r\n        admin_email: business.email,\r\n        logo_url: null, // TODO: Add logo support later\r\n        subscription_tier: pricingTierName,\r\n        created_at: business.created_at\r\n      },\r\n      membershipTiers: (membershipTiers || []).map(tier => ({\r\n        id: tier.id,\r\n        name: tier.name,\r\n        price: (tier.monthly_price_cents / 100).toFixed(2), // Convert cents to dollars as string\r\n        description: tier.description,\r\n        stripe_product_id: tier.stripe_product_id || '',\r\n        stripe_price_id: tier.stripe_price_id || '',\r\n        created_at: tier.created_at\r\n      })),\r\n      invitation: {\r\n        id: invitation.id,\r\n        status: invitation.status,\r\n        created_at: invitation.created_at\r\n      }\r\n    };\r\n\r\n    console.log('\u2705 Sending successful response:', {\r\n      businessName: response.business.name,\r\n      tierCount: response.membershipTiers.length,\r\n      invitationStatus: response.invitation.status\r\n    });\r\n\r\n    res.status(200).json(response);\r\n    return;\r\n  } catch (error: any) {\r\n    console.error('\u274C Error in get-business-by-token:', error);\r\n    res.status(500).json({ \r\n      error: 'Internal server error',\r\n      message: error.message,\r\n      stack: error.stack\r\n    });\r\n    return;\r\n  }\r\n};\r\n\r\nexport default withErrorHandling(handler);"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,yBAA6B;AAG7B,IAAM,oBAAgB;AAAA,EACpB,QAAQ,IAAI;AAAA,EACZ,QAAQ,IAAI;AAAA,EACZ;AAAA,IACE,MAAM;AAAA,MACJ,kBAAkB;AAAA,MAClB,gBAAgB;AAAA,IAClB;AAAA,EACF;AACF;AAGA,IAAM,WAAN,cAAuB,MAAM;AAAA,EAC3B,YACS,YACP,SACO,MACP;AACA,UAAM,OAAO;AAJN;AAEA;AAGP,SAAK,OAAO;AAAA,EACd;AACF;AAEA,IAAM,mBAAmB,CAAC,QAAwB;AAChD,MAAI,UAAU,gBAAgB,kBAAkB;AAChD,MAAI,UAAU,+BAA+B,GAAG;AAChD,MAAI,UAAU,gCAAgC,iCAAiC;AAC/E,MAAI,UAAU,gCAAgC,6BAA6B;AAC7E;AAEA,IAAM,eAAe,CACnB,OACA,KACA,QACG;AACH,UAAQ,MAAM,cAAc,KAAK;AACjC,mBAAiB,GAAG;AAEpB,MAAI,IAAI,WAAW,WAAW;AAC5B,WAAO,IAAI,OAAO,GAAG,EAAE,IAAI;AAAA,EAC7B;AAEA,MAAI,iBAAiB,UAAU;AAC7B,WAAO,IAAI,OAAO,MAAM,UAAU,EAAE,KAAK;AAAA,MACvC,QAAQ;AAAA,MACR,OAAO;AAAA,QACL,SAAS,MAAM;AAAA,QACf,MAAM,MAAM;AAAA,MACd;AAAA,IACF,CAAC;AAAA,EACH;AAEA,SAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,IAC1B,QAAQ;AAAA,IACR,OAAO;AAAA,MACL,SAAS;AAAA,MACT,MAAM;AAAA,IACR;AAAA,EACF,CAAC;AACH;AAEA,IAAM,oBAAoB,CACxBA,aACG;AACH,SAAO,OAAO,KAAoB,QAAwB;AACxD,QAAI;AACF,uBAAiB,GAAG;AACpB,UAAI,IAAI,WAAW,WAAW;AAC5B,eAAO,IAAI,OAAO,GAAG,EAAE,IAAI;AAAA,MAC7B;AACA,YAAMA,SAAQ,KAAK,GAAG;AAAA,IACxB,SAAS,OAAO;AACd,mBAAa,OAAO,KAAK,GAAG;AAAA,IAC9B;AAAA,EACF;AACF;AAEA,IAAM,UAAU,OAAO,KAAoB,QAAuC;AAChF,UAAQ,IAAI,qCAAqC;AACjD,UAAQ,IAAI,mBAAmB,IAAI,MAAM;AACzC,UAAQ,IAAI,iBAAiB,KAAK,UAAU,IAAI,MAAM,MAAM,CAAC,CAAC;AAC9D,UAAQ,IAAI,sBAAsB;AAAA,IAChC,gBAAgB,CAAC,CAAC,QAAQ,IAAI;AAAA,IAC9B,eAAe,CAAC,CAAC,QAAQ,IAAI;AAAA,EAC/B,CAAC;AAED,MAAI,IAAI,WAAW,QAAQ;AACzB,YAAQ,IAAI,8BAAyB,IAAI,MAAM;AAC/C,QAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qBAAqB,CAAC;AACpD;AAAA,EACF;AAEA,MAAI;AACF,UAAM,EAAE,MAAM,IAAI,IAAI;AAEtB,YAAQ,IAAI,mBAAmB,KAAK;AAEpC,QAAI,CAAC,OAAO;AACV,cAAQ,IAAI,0BAAqB;AACjC,UAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,oBAAoB,CAAC;AACnD;AAAA,IACF;AAGA,YAAQ,IAAI,wDAAiD,KAAK;AAClE,UAAM,EAAE,MAAM,YAAY,OAAO,gBAAgB,IAAI,MAAM,cACxD,KAAK,wBAAwB,EAC7B,OAAO,GAAG,EACV,GAAG,SAAS,KAAK,EACjB,GAAG,UAAU,CAAC,QAAQ,WAAW,CAAC,EAClC,OAAO;AAEV,YAAQ,IAAI,4BAA4B;AAAA,MACtC,YAAY,aAAa;AAAA,QACvB,IAAI,WAAW;AAAA,QACf,iBAAiB,WAAW;AAAA,QAC5B,OAAO,WAAW;AAAA,QAClB,QAAQ,WAAW;AAAA,QACnB,aAAa,WAAW;AAAA,QACxB,OAAO,WAAW;AAAA,MACpB,IAAI;AAAA,MACJ,OAAO;AAAA,IACT,CAAC;AAED,QAAI,mBAAmB,CAAC,YAAY;AAClC,cAAQ,IAAI,8CAAyC;AAGrD,YAAM,EAAE,MAAM,eAAe,OAAO,SAAS,IAAI,MAAM,cACpD,KAAK,wBAAwB,EAC7B,OAAO,GAAG,EACV,GAAG,SAAS,KAAK,EACjB,OAAO;AAEV,cAAQ,IAAI,2CAA2C;AAAA,QACrD,YAAY;AAAA,QACZ,OAAO;AAAA,MACT,CAAC;AAED,UAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QACnB,OAAO;AAAA,QACP,OAAO;AAAA,UACL,eAAe;AAAA,UACf,iBAAiB,CAAC,CAAC;AAAA,UACnB,kBAAkB,eAAe;AAAA,UACjC,eAAe,CAAC,CAAC,eAAe;AAAA,UAChC,kBAAkB,CAAC,QAAQ,WAAW;AAAA,QACxC;AAAA,MACF,CAAC;AACD;AAAA,IACF;AAEA,YAAQ,IAAI,kDAA6C,WAAW,WAAW;AAG/E,QAAI,CAAC,WAAW,aAAa;AAC3B,cAAQ,IAAI,8EAAoE;AAChF,UAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QACnB,YAAY;AAAA,UACV,IAAI,WAAW;AAAA,UACf,OAAO,WAAW;AAAA,UAClB,iBAAiB,WAAW;AAAA,UAC5B,QAAQ,WAAW;AAAA,UACnB,YAAY,WAAW;AAAA,QACzB;AAAA,QACA,UAAU;AAAA,QACV,iBAAiB,CAAC;AAAA,QAClB,SAAS;AAAA,MACX,CAAC;AACD;AAAA,IACF;AAGA,YAAQ,IAAI,wDAAiD,WAAW,WAAW;AACnF,UAAM,EAAE,MAAM,UAAU,OAAO,cAAc,IAAI,MAAM,cACpD,KAAK,YAAY,EACjB,OAAO,2EAA2E,EAClF,GAAG,MAAM,WAAW,WAAW,EAC/B,OAAO;AAEV,YAAQ,IAAI,0BAA0B;AAAA,MACpC,UAAU,WAAW;AAAA,QACnB,IAAI,SAAS;AAAA,QACb,MAAM,SAAS;AAAA,QACf,OAAO,SAAS;AAAA,QAChB,QAAQ,SAAS;AAAA,MACnB,IAAI;AAAA,MACJ,OAAO;AAAA,IACT,CAAC;AAED,QAAI,iBAAiB,CAAC,UAAU;AAC9B,cAAQ,IAAI,8CAAyC,WAAW,WAAW;AAC3E,UAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QACnB,OAAO;AAAA,QACP,OAAO;AAAA,UACL,aAAa,WAAW;AAAA,UACxB;AAAA,QACF;AAAA,MACF,CAAC;AACD;AAAA,IACF;AAGA,QAAI,kBAAkB;AACtB,QAAI,SAAS,iBAAiB;AAC5B,YAAM,EAAE,MAAM,aAAa,OAAO,iBAAiB,IAAI,MAAM,cAC1D,KAAK,wBAAwB,EAC7B,OAAO,MAAM,EACb,GAAG,MAAM,SAAS,eAAe,EACjC,OAAO;AAEV,UAAI,CAAC,oBAAoB,aAAa;AACpC,0BAAkB,YAAY;AAAA,MAChC;AAAA,IACF;AAGA,YAAQ,IAAI,wDAAiD,SAAS,EAAE;AACxE,UAAM,EAAE,MAAM,iBAAiB,OAAO,WAAW,IAAI,MAAM,cACxD,KAAK,kBAAkB,EACvB,OAAO,4FAA4F,EACnG,GAAG,eAAe,SAAS,EAAE,EAC7B,MAAM,cAAc,EAAE,WAAW,KAAK,CAAC;AAE1C,YAAQ,IAAI,kCAAkC;AAAA,MAC5C,WAAW,iBAAiB,UAAU;AAAA,MACtC,OAAO,iBAAiB,IAAI,QAAM,EAAE,IAAI,EAAE,IAAI,MAAM,EAAE,MAAM,OAAO,EAAE,oBAAoB,EAAE,KAAK,CAAC;AAAA,MACjG,OAAO;AAAA,IACT,CAAC;AAED,QAAI,YAAY;AACd,cAAQ,MAAM,2CAAsC,UAAU;AAC9D,UAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QACnB,OAAO;AAAA,QACP,OAAO,EAAE,WAAW;AAAA,MACtB,CAAC;AACD;AAAA,IACF;AAGA,UAAM,WAAW;AAAA,MACf,UAAU;AAAA,QACR,IAAI,SAAS;AAAA,QACb,MAAM,SAAS;AAAA,QACf,SAAS,SAAS;AAAA,QAClB,aAAa,SAAS;AAAA,QACtB,UAAU;AAAA;AAAA,QACV,mBAAmB;AAAA,QACnB,YAAY,SAAS;AAAA,MACvB;AAAA,MACA,kBAAkB,mBAAmB,CAAC,GAAG,IAAI,WAAS;AAAA,QACpD,IAAI,KAAK;AAAA,QACT,MAAM,KAAK;AAAA,QACX,QAAQ,KAAK,sBAAsB,KAAK,QAAQ,CAAC;AAAA;AAAA,QACjD,aAAa,KAAK;AAAA,QAClB,mBAAmB,KAAK,qBAAqB;AAAA,QAC7C,iBAAiB,KAAK,mBAAmB;AAAA,QACzC,YAAY,KAAK;AAAA,MACnB,EAAE;AAAA,MACF,YAAY;AAAA,QACV,IAAI,WAAW;AAAA,QACf,QAAQ,WAAW;AAAA,QACnB,YAAY,WAAW;AAAA,MACzB;AAAA,IACF;AAEA,YAAQ,IAAI,uCAAkC;AAAA,MAC5C,cAAc,SAAS,SAAS;AAAA,MAChC,WAAW,SAAS,gBAAgB;AAAA,MACpC,kBAAkB,SAAS,WAAW;AAAA,IACxC,CAAC;AAED,QAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAC7B;AAAA,EACF,SAAS,OAAY;AACnB,YAAQ,MAAM,0CAAqC,KAAK;AACxD,QAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MACnB,OAAO;AAAA,MACP,SAAS,MAAM;AAAA,MACf,OAAO,MAAM;AAAA,IACf,CAAC;AACD;AAAA,EACF;AACF;AAEA,IAAO,gCAAQ,kBAAkB,OAAO;",
  "names": ["handler"]
}

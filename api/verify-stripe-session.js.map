{
  "version": 3,
  "sources": ["verify-stripe-session.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport Stripe from 'stripe';\r\n\r\n// Initialize Stripe\r\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\r\n  apiVersion: '2025-02-24.acacia',\r\n  typescript: true,\r\n});\r\n\r\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\r\n  // Enable CORS\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\r\n\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (req.method !== 'POST') {\r\n    return res.status(405).json({ error: 'Method not allowed' });\r\n  }\r\n\r\n  try {\r\n    const { sessionId } = req.body;\r\n\r\n    if (!sessionId) {\r\n      return res.status(400).json({ \r\n        error: 'Missing required parameter: sessionId' \r\n      });\r\n    }\r\n\r\n    // Retrieve the checkout session from Stripe\r\n    const session = await stripe.checkout.sessions.retrieve(sessionId, {\r\n      expand: ['subscription', 'customer']\r\n    });\r\n\r\n    // Verify payment was successful\r\n    if (session.payment_status !== 'paid') {\r\n      return res.status(400).json({ \r\n        error: 'Payment not completed' \r\n      });\r\n    }\r\n\r\n    // Get subscription details\r\n    const subscription = session.subscription as Stripe.Subscription;\r\n    const customer = session.customer as Stripe.Customer;\r\n\r\n    if (!subscription || !customer) {\r\n      return res.status(400).json({ \r\n        error: 'Invalid subscription or customer data' \r\n      });\r\n    }\r\n\r\n    // Get metadata from the session\r\n    const metadata = session.metadata || {};\r\n\r\n    return res.status(200).json({ \r\n      success: true,\r\n      stripeCustomerId: customer.id,\r\n      subscriptionId: subscription.id,\r\n      subscriptionStatus: subscription.status,\r\n      currentPeriodEnd: subscription.current_period_end,\r\n      email: customer.email || session.customer_email,\r\n      metadata: {\r\n        businessId: metadata.businessId,\r\n        tierId: metadata.tierId,\r\n        customerName: metadata.customerName,\r\n        customerPhone: metadata.customerPhone,\r\n        customerAddress: metadata.customerAddress,\r\n        customerCity: metadata.customerCity,\r\n        customerState: metadata.customerState,\r\n        customerZipCode: metadata.customerZipCode,\r\n        customerWinePreferences: metadata.customerWinePreferences,\r\n        customerSpecialRequests: metadata.customerSpecialRequests,\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Error verifying Stripe session:', error);\r\n    \r\n    if (error instanceof Stripe.errors.StripeError) {\r\n      return res.status(400).json({ \r\n        error: error.message \r\n      });\r\n    }\r\n    \r\n    return res.status(500).json({ \r\n      error: 'Failed to verify payment session' \r\n    });\r\n  }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAAmB;AAGnB,IAAM,SAAS,IAAI,cAAAA,QAAO,QAAQ,IAAI,mBAAoB;AAAA,EACxD,YAAY;AAAA,EACZ,YAAY;AACd,CAAC;AAED,eAAO,QAA+B,KAAoB,KAAqB;AAE7E,MAAI,UAAU,+BAA+B,GAAG;AAChD,MAAI,UAAU,gCAAgC,eAAe;AAC7D,MAAI,UAAU,gCAAgC,cAAc;AAE5D,MAAI,IAAI,WAAW,WAAW;AAC5B,WAAO,IAAI,OAAO,GAAG,EAAE,IAAI;AAAA,EAC7B;AAEA,MAAI,IAAI,WAAW,QAAQ;AACzB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qBAAqB,CAAC;AAAA,EAC7D;AAEA,MAAI;AACF,UAAM,EAAE,UAAU,IAAI,IAAI;AAE1B,QAAI,CAAC,WAAW;AACd,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QAC1B,OAAO;AAAA,MACT,CAAC;AAAA,IACH;AAGA,UAAM,UAAU,MAAM,OAAO,SAAS,SAAS,SAAS,WAAW;AAAA,MACjE,QAAQ,CAAC,gBAAgB,UAAU;AAAA,IACrC,CAAC;AAGD,QAAI,QAAQ,mBAAmB,QAAQ;AACrC,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QAC1B,OAAO;AAAA,MACT,CAAC;AAAA,IACH;AAGA,UAAM,eAAe,QAAQ;AAC7B,UAAM,WAAW,QAAQ;AAEzB,QAAI,CAAC,gBAAgB,CAAC,UAAU;AAC9B,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QAC1B,OAAO;AAAA,MACT,CAAC;AAAA,IACH;AAGA,UAAM,WAAW,QAAQ,YAAY,CAAC;AAEtC,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,kBAAkB,SAAS;AAAA,MAC3B,gBAAgB,aAAa;AAAA,MAC7B,oBAAoB,aAAa;AAAA,MACjC,kBAAkB,aAAa;AAAA,MAC/B,OAAO,SAAS,SAAS,QAAQ;AAAA,MACjC,UAAU;AAAA,QACR,YAAY,SAAS;AAAA,QACrB,QAAQ,SAAS;AAAA,QACjB,cAAc,SAAS;AAAA,QACvB,eAAe,SAAS;AAAA,QACxB,iBAAiB,SAAS;AAAA,QAC1B,cAAc,SAAS;AAAA,QACvB,eAAe,SAAS;AAAA,QACxB,iBAAiB,SAAS;AAAA,QAC1B,yBAAyB,SAAS;AAAA,QAClC,yBAAyB,SAAS;AAAA,MACpC;AAAA,IACF,CAAC;AAAA,EACH,SAAS,OAAO;AACd,YAAQ,MAAM,mCAAmC,KAAK;AAEtD,QAAI,iBAAiB,cAAAA,QAAO,OAAO,aAAa;AAC9C,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QAC1B,OAAO,MAAM;AAAA,MACf,CAAC;AAAA,IACH;AAEA,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AACF;",
  "names": ["Stripe"]
}

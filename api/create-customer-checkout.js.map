{
  "version": 3,
  "sources": ["create-customer-checkout.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport Stripe from 'stripe';\r\n\r\n// Inline error handling (no external dependencies)\r\nclass APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nconst errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nconst withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n};\r\n\r\ninterface CreateCustomerCheckoutRequest {\r\n  business_id: string;\r\n  tier_id: string;\r\n  customer_email: string;\r\n  customer_name?: string;\r\n}\r\n\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  // Create Supabase admin client directly in the API (no external dependencies)\r\n  const supabaseAdmin = createClient(\r\n    process.env.SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false\r\n      }\r\n    }\r\n  );\r\n\r\n  // Initialize Stripe client\r\n  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\r\n    apiVersion: '2025-02-24.acacia',\r\n    typescript: true,\r\n  });\r\n  if (req.method !== 'POST') {\r\n    throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n  }\r\n\r\n  const body: CreateCustomerCheckoutRequest = req.body;\r\n  const { business_id, tier_id, customer_email, customer_name } = body;\r\n\r\n  // Validate required fields\r\n  if (!business_id || !tier_id || !customer_email) {\r\n    throw new APIError(400, 'Missing required fields: business_id, tier_id, customer_email', 'MISSING_FIELDS');\r\n  }\r\n\r\n  // Validate email format\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  if (!emailRegex.test(customer_email)) {\r\n    throw new APIError(400, 'Invalid email format', 'INVALID_EMAIL');\r\n  }\r\n\r\n  // Get the business and tier details\r\n  const { data: business, error: businessError } = await supabaseAdmin\r\n    .from('businesses')\r\n    .select('id, name')\r\n    .eq('id', business_id)\r\n    .single();\r\n\r\n  if (businessError || !business) {\r\n    throw new APIError(404, 'Business not found', 'BUSINESS_NOT_FOUND');\r\n  }\r\n\r\n  // Get the membership tier details\r\n  const { data: tier, error: tierError } = await supabaseAdmin\r\n    .from('membership_tiers')\r\n    .select('*')\r\n    .eq('id', tier_id)\r\n    .eq('business_id', business_id)\r\n    .eq('is_active', true)\r\n    .single();\r\n\r\n  if (tierError || !tier) {\r\n    throw new APIError(404, 'Membership tier not found or not ready for signup', 'TIER_NOT_FOUND');\r\n  }\r\n\r\n  if (!tier.stripe_price_id) {\r\n    throw new APIError(400, 'Membership tier is not configured for online signup', 'TIER_NOT_CONFIGURED');\r\n  }\r\n\r\n  // Create Stripe checkout session\r\n  const session = await stripe.checkout.sessions.create({\r\n    mode: 'subscription',\r\n    payment_method_types: ['card'],\r\n    customer_email: customer_email,\r\n    line_items: [\r\n      {\r\n        price: tier.stripe_price_id,\r\n        quantity: 1,\r\n      },\r\n    ],\r\n    success_url: `${process.env.VITE_APP_URL || 'http://localhost:3000'}/join/${business_id}/success?session_id={CHECKOUT_SESSION_ID}`,\r\n    cancel_url: `${process.env.VITE_APP_URL || 'http://localhost:3000'}/join/${business_id}?canceled=true`,\r\n    metadata: {\r\n      business_id: business_id,\r\n      tier_id: tier_id,\r\n      customer_email: customer_email,\r\n      customer_name: customer_name || '',\r\n      type: 'customer_membership'\r\n    },\r\n    subscription_data: {\r\n      metadata: {\r\n        business_id: business_id,\r\n        tier_id: tier_id,\r\n        customer_email: customer_email,\r\n        customer_name: customer_name || ''\r\n      }\r\n    },\r\n    allow_promotion_codes: true, // Allow customers to use discount codes\r\n    billing_address_collection: 'auto'\r\n  });\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    data: {\r\n      sessionId: session.id,\r\n      checkoutUrl: session.url,\r\n      business: business,\r\n      tier: {\r\n        id: tier.id,\r\n        name: tier.name,\r\n        description: tier.description,\r\n        price_cents: tier.monthly_price_cents,\r\n        interval: 'month'\r\n      }\r\n    }\r\n  });\r\n});"],
  "mappings": "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",
  "names": ["Stripe"]
}

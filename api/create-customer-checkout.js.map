{
  "version": 3,
  "sources": ["create-customer-checkout.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport Stripe from 'stripe';\r\n\r\n// Initialize Stripe\r\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\r\n  apiVersion: '2025-02-24.acacia',\r\n  typescript: true,\r\n});\r\n\r\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\r\n  // Enable CORS\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\r\n\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (req.method !== 'POST') {\r\n    return res.status(405).json({ error: 'Method not allowed' });\r\n  }\r\n\r\n  try {\r\n    const { businessId, businessSlug, tierId, priceId, customerData } = req.body;\r\n\r\n    if (!businessId || !tierId || !priceId || !customerData) {\r\n      return res.status(400).json({ \r\n        error: 'Missing required parameters: businessId, tierId, priceId, and customerData are required' \r\n      });\r\n    }\r\n\r\n    // Validate customer data\r\n    const requiredFields = ['name', 'email', 'phone', 'address', 'city', 'state', 'zipCode'];\r\n    for (const field of requiredFields) {\r\n      if (!customerData[field]) {\r\n        return res.status(400).json({ \r\n          error: `Missing required customer field: ${field}` \r\n        });\r\n      }\r\n    }\r\n\r\n    // Create Stripe checkout session with customer metadata\r\n    const session = await stripe.checkout.sessions.create({\r\n      payment_method_types: ['card'],\r\n      mode: 'subscription',\r\n      customer_email: customerData.email,\r\n      line_items: [\r\n        {\r\n          price: priceId,\r\n          quantity: 1,\r\n        },\r\n      ],\r\n      metadata: {\r\n        businessId,\r\n        tierId,\r\n        customerName: customerData.name,\r\n        customerPhone: customerData.phone,\r\n        customerAddress: customerData.address,\r\n        customerCity: customerData.city,\r\n        customerState: customerData.state,\r\n        customerZipCode: customerData.zipCode,\r\n        customerWinePreferences: customerData.winePreferences || '',\r\n        customerSpecialRequests: customerData.specialRequests || '',\r\n      },\r\n      success_url: `${process.env.NEXT_PUBLIC_APP_URL || 'https://club-cuvee.com'}/customer/welcome?session_id={CHECKOUT_SESSION_ID}`,\r\n      cancel_url: `${process.env.NEXT_PUBLIC_APP_URL || 'https://club-cuvee.com'}/join/${businessSlug || businessId}`,\r\n      allow_promotion_codes: true,\r\n    });\r\n\r\n    return res.status(200).json({ \r\n      success: true,\r\n      checkoutUrl: session.url \r\n    });\r\n  } catch (error) {\r\n    console.error('Error creating checkout session:', error);\r\n    \r\n    if (error instanceof Stripe.errors.StripeError) {\r\n      return res.status(400).json({ \r\n        error: error.message \r\n      });\r\n    }\r\n    \r\n    return res.status(500).json({ \r\n      error: 'Failed to create checkout session' \r\n    });\r\n  }\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAAmB;AAGnB,IAAM,SAAS,IAAI,cAAAA,QAAO,QAAQ,IAAI,mBAAoB;AAAA,EACxD,YAAY;AAAA,EACZ,YAAY;AACd,CAAC;AAED,eAAO,QAA+B,KAAoB,KAAqB;AAE7E,MAAI,UAAU,+BAA+B,GAAG;AAChD,MAAI,UAAU,gCAAgC,eAAe;AAC7D,MAAI,UAAU,gCAAgC,cAAc;AAE5D,MAAI,IAAI,WAAW,WAAW;AAC5B,WAAO,IAAI,OAAO,GAAG,EAAE,IAAI;AAAA,EAC7B;AAEA,MAAI,IAAI,WAAW,QAAQ;AACzB,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK,EAAE,OAAO,qBAAqB,CAAC;AAAA,EAC7D;AAEA,MAAI;AACF,UAAM,EAAE,YAAY,cAAc,QAAQ,SAAS,aAAa,IAAI,IAAI;AAExE,QAAI,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,CAAC,cAAc;AACvD,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QAC1B,OAAO;AAAA,MACT,CAAC;AAAA,IACH;AAGA,UAAM,iBAAiB,CAAC,QAAQ,SAAS,SAAS,WAAW,QAAQ,SAAS,SAAS;AACvF,eAAW,SAAS,gBAAgB;AAClC,UAAI,CAAC,aAAa,KAAK,GAAG;AACxB,eAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,UAC1B,OAAO,oCAAoC,KAAK;AAAA,QAClD,CAAC;AAAA,MACH;AAAA,IACF;AAGA,UAAM,UAAU,MAAM,OAAO,SAAS,SAAS,OAAO;AAAA,MACpD,sBAAsB,CAAC,MAAM;AAAA,MAC7B,MAAM;AAAA,MACN,gBAAgB,aAAa;AAAA,MAC7B,YAAY;AAAA,QACV;AAAA,UACE,OAAO;AAAA,UACP,UAAU;AAAA,QACZ;AAAA,MACF;AAAA,MACA,UAAU;AAAA,QACR;AAAA,QACA;AAAA,QACA,cAAc,aAAa;AAAA,QAC3B,eAAe,aAAa;AAAA,QAC5B,iBAAiB,aAAa;AAAA,QAC9B,cAAc,aAAa;AAAA,QAC3B,eAAe,aAAa;AAAA,QAC5B,iBAAiB,aAAa;AAAA,QAC9B,yBAAyB,aAAa,mBAAmB;AAAA,QACzD,yBAAyB,aAAa,mBAAmB;AAAA,MAC3D;AAAA,MACA,aAAa,GAAG,QAAQ,IAAI,uBAAuB,wBAAwB;AAAA,MAC3E,YAAY,GAAG,QAAQ,IAAI,uBAAuB,wBAAwB,SAAS,gBAAgB,UAAU;AAAA,MAC7G,uBAAuB;AAAA,IACzB,CAAC;AAED,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,SAAS;AAAA,MACT,aAAa,QAAQ;AAAA,IACvB,CAAC;AAAA,EACH,SAAS,OAAO;AACd,YAAQ,MAAM,oCAAoC,KAAK;AAEvD,QAAI,iBAAiB,cAAAA,QAAO,OAAO,aAAa;AAC9C,aAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,QAC1B,OAAO,MAAM;AAAA,MACf,CAAC;AAAA,IACH;AAEA,WAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,MAC1B,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AACF;",
  "names": ["Stripe"]
}

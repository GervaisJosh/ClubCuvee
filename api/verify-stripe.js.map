{
  "version": 3,
  "sources": ["verify-stripe.ts", "utils/error-handler.ts", "utils/stripe.ts", "utils/supabase.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { z } from 'zod';\r\nimport { withErrorHandler } from './utils/error-handler';\r\nimport { getSubscription } from './utils/stripe';\r\nimport { getRestaurantInvite } from './utils/supabase';\r\nimport { APIError } from './utils/error-handler';\r\n\r\nconst verifyStripeSchema = z.object({\r\n  token: z.string().uuid(),\r\n  sessionId: z.string(),\r\n});\r\n\r\n/**\r\n * API endpoint for verifying Stripe configuration\r\n * Tests connectivity to Stripe API and verifies environment variables\r\n * Production-ready with comprehensive error handling\r\n */\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  if (req.method !== 'POST') {\r\n    throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n  }\r\n\r\n  const { token, sessionId } = verifyStripeSchema.parse(req.body);\r\n\r\n  // Verify invite exists\r\n  await getRestaurantInvite(token);\r\n\r\n  // Verify subscription status\r\n  const subscription = await getSubscription(sessionId);\r\n\r\n  if (subscription.status !== 'active') {\r\n    throw new APIError(400, 'Subscription is not active', 'INVALID_SUBSCRIPTION');\r\n  }\r\n\r\n  res.status(200).json({\r\n    status: 'success',\r\n    subscription: {\r\n      id: subscription.id,\r\n      status: subscription.status,\r\n      currentPeriodEnd: subscription.current_period_end,\r\n    },\r\n  });\r\n});", "import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { ZodError } from 'zod';\r\n\r\nexport class APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nexport const errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof ZodError) {\r\n    return res.status(400).json({\r\n      error: {\r\n        message: 'Validation error',\r\n        code: 'VALIDATION_ERROR',\r\n        details: error.errors,\r\n      },\r\n    });\r\n  }\r\n\r\n  // Handle Stripe errors\r\n  if (error instanceof Error && error.name === 'StripeError') {\r\n    return res.status(400).json({\r\n      error: {\r\n        message: error.message,\r\n        code: 'STRIPE_ERROR',\r\n      },\r\n    });\r\n  }\r\n\r\n  // Default error\r\n  return res.status(500).json({\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nexport const withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n}; ", "import Stripe from 'stripe';\r\nimport { APIError } from './error-handler';\r\n\r\nif (!process.env.STRIPE_SECRET_KEY) {\r\n  throw new Error('STRIPE_SECRET_KEY is required');\r\n}\r\n\r\nif (!process.env.STRIPE_WEBHOOK_SECRET) {\r\n  throw new Error('STRIPE_WEBHOOK_SECRET is required');\r\n}\r\n\r\nexport const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\r\n  apiVersion: '2025-02-24.acacia',\r\n  typescript: true,\r\n});\r\n\r\nexport const verifyStripeWebhook = (signature: string, payload: string) => {\r\n  try {\r\n    return stripe.webhooks.constructEvent(\r\n      payload,\r\n      signature,\r\n      process.env.STRIPE_WEBHOOK_SECRET!\r\n    );\r\n  } catch (err) {\r\n    throw new APIError(400, 'Invalid webhook signature', 'INVALID_SIGNATURE');\r\n  }\r\n};\r\n\r\nexport const createCheckoutSession = async (data: {\r\n  restaurantName: string;\r\n  email: string;\r\n  membershipTier: string;\r\n  successUrl: string;\r\n  cancelUrl: string;\r\n}) => {\r\n  try {\r\n    const session = await stripe.checkout.sessions.create({\r\n      mode: 'subscription',\r\n      payment_method_types: ['card'],\r\n      line_items: [\r\n        {\r\n          price: process.env[`STRIPE_PRICE_ID_${data.membershipTier.toUpperCase()}`],\r\n          quantity: 1,\r\n        },\r\n      ],\r\n      customer_email: data.email,\r\n      metadata: {\r\n        restaurantName: data.restaurantName,\r\n        membershipTier: data.membershipTier,\r\n      },\r\n      success_url: data.successUrl,\r\n      cancel_url: data.cancelUrl,\r\n    });\r\n\r\n    return session;\r\n  } catch (err) {\r\n    if (err instanceof Stripe.errors.StripeError) {\r\n      throw new APIError(400, err.message, 'STRIPE_ERROR');\r\n    }\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getSubscription = async (subscriptionId: string) => {\r\n  try {\r\n    return await stripe.subscriptions.retrieve(subscriptionId);\r\n  } catch (err) {\r\n    if (err instanceof Stripe.errors.StripeError) {\r\n      throw new APIError(400, err.message, 'STRIPE_ERROR');\r\n    }\r\n    throw err;\r\n  }\r\n}; ", "import { createClient } from '@supabase/supabase-js';\r\nimport { APIError } from './error-handler';\r\n\r\nif (!process.env.SUPABASE_URL) {\r\n  throw new Error('SUPABASE_URL is required');\r\n}\r\n\r\nif (!process.env.SUPABASE_SERVICE_ROLE_KEY) {\r\n  throw new Error('SUPABASE_SERVICE_ROLE_KEY is required');\r\n}\r\n\r\nexport const supabase = createClient(\r\n  process.env.SUPABASE_URL,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false,\r\n    },\r\n  }\r\n);\r\n\r\nexport const getRestaurantInvite = async (token: string) => {\r\n  const { data, error } = await supabase\r\n    .from('restaurant_invites')\r\n    .select('*')\r\n    .eq('token', token)\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new APIError(500, 'Failed to fetch restaurant invite', 'DATABASE_ERROR');\r\n  }\r\n\r\n  if (!data) {\r\n    throw new APIError(404, 'Invite not found', 'INVITE_NOT_FOUND');\r\n  }\r\n\r\n  return data;\r\n};\r\n\r\nexport const createRestaurant = async (data: {\r\n  name: string;\r\n  email: string;\r\n  subscription_id: string;\r\n  membership_tier: string;\r\n}) => {\r\n  const { data: restaurant, error } = await supabase\r\n    .from('restaurants')\r\n    .insert([data])\r\n    .select()\r\n    .single();\r\n\r\n  if (error) {\r\n    throw new APIError(500, 'Failed to create restaurant', 'DATABASE_ERROR');\r\n  }\r\n\r\n  return restaurant;\r\n};\r\n\r\nexport const updateRestaurantInvite = async (token: string, data: {\r\n  status: 'accepted' | 'expired' | 'in_progress';\r\n  accepted_at?: string;\r\n}) => {\r\n  const { error } = await supabase\r\n    .from('restaurant_invites')\r\n    .update(data)\r\n    .eq('token', token);\r\n\r\n  if (error) {\r\n    throw new APIError(500, 'Failed to update restaurant invite', 'DATABASE_ERROR');\r\n  }\r\n}; "],
  "mappings": "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",
  "names": ["import_zod", "Stripe", "Stripe"]
}

{
  "version": 3,
  "sources": ["verify-customer-payment.ts"],
  "sourcesContent": ["import type { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport Stripe from 'stripe';\r\n\r\n// INLINE Supabase client (no external imports)\r\nconst supabaseAdmin = createClient(\r\n  process.env.SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false\r\n    }\r\n  }\r\n);\r\n\r\n// INLINE error handling (no external imports)\r\nclass APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nconst errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nconst withErrorHandling = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n};\r\n\r\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\r\n  apiVersion: '2025-02-24.acacia',\r\n  typescript: true,\r\n});\r\n\r\nconst handler = async (req: VercelRequest, res: VercelResponse) => {\r\n  if (req.method !== 'POST') {\r\n    return res.status(405).json({ error: 'Method not allowed' });\r\n  }\r\n\r\n  try {\r\n    const { sessionId, token } = req.body;\r\n\r\n    if (!sessionId || !token) {\r\n      return res.status(400).json({ error: 'Session ID and token are required' });\r\n    }\r\n\r\n    // Get the Stripe checkout session\r\n    const session = await stripe.checkout.sessions.retrieve(sessionId, {\r\n      expand: ['subscription', 'customer']\r\n    });\r\n\r\n    if (session.payment_status !== 'paid') {\r\n      return res.status(400).json({ error: 'Payment not completed' });\r\n    }\r\n\r\n    if (!session.subscription) {\r\n      return res.status(400).json({ error: 'No subscription found' });\r\n    }\r\n\r\n    // Validate the invitation token\r\n    const { data: invitation, error: invitationError } = await supabaseAdmin\r\n      .from('customer_invitations')\r\n      .select(`\r\n        *,\r\n        businesses!inner (\r\n          id,\r\n          name,\r\n          website\r\n        )\r\n      `)\r\n      .eq('token', token)\r\n      .eq('status', 'pending')\r\n      .single();\r\n\r\n    if (invitationError || !invitation) {\r\n      return res.status(404).json({ \r\n        error: 'Invalid or expired customer invitation' \r\n      });\r\n    }\r\n\r\n    const business = invitation.businesses;\r\n\r\n    // Extract customer data from session metadata\r\n    const metadata = session.metadata || {};\r\n    const subscriptionMetadata = (session.subscription as Stripe.Subscription).metadata || {};\r\n\r\n    // Combine metadata from both sources (session has priority)\r\n    const customerData = {\r\n      name: metadata.name || subscriptionMetadata.name || '',\r\n      email: metadata.email || subscriptionMetadata.email || session.customer_email || '',\r\n      phone: metadata.phone || subscriptionMetadata.phone || '',\r\n      address: metadata.address || subscriptionMetadata.address || '',\r\n      city: metadata.city || subscriptionMetadata.city || '',\r\n      state: metadata.state || subscriptionMetadata.state || '',\r\n      zip_code: metadata.zip_code || subscriptionMetadata.zip_code || '',\r\n      wine_preferences: metadata.wine_preferences || subscriptionMetadata.wine_preferences || '',\r\n      dietary_restrictions: metadata.dietary_restrictions || subscriptionMetadata.dietary_restrictions || '',\r\n      special_requests: metadata.special_requests || subscriptionMetadata.special_requests || '',\r\n      tier_id: metadata.tier_id || subscriptionMetadata.tier_id || ''\r\n    };\r\n\r\n    if (!customerData.email || !customerData.name || !customerData.tier_id) {\r\n      return res.status(400).json({ \r\n        error: 'Missing required customer data from payment session' \r\n      });\r\n    }\r\n\r\n    // Get the membership tier details\r\n    const { data: tier, error: tierError } = await supabaseAdmin\r\n      .from('membership_tiers')\r\n      .select('*')\r\n      .eq('id', customerData.tier_id)\r\n      .eq('restaurant_id', business.id)\r\n      .single();\r\n\r\n    if (tierError || !tier) {\r\n      return res.status(404).json({ \r\n        error: 'Membership tier not found' \r\n      });\r\n    }\r\n\r\n    // Check if customer already exists (prevent duplicates)\r\n    const { data: existingCustomer } = await supabaseAdmin\r\n      .from('customers')\r\n      .select('id')\r\n      .eq('email', customerData.email)\r\n      .eq('business_id', business.id)\r\n      .single();\r\n\r\n    if (existingCustomer) {\r\n      return res.status(409).json({ \r\n        error: 'Customer already exists for this business' \r\n      });\r\n    }\r\n\r\n    // Create customer record\r\n    const customerRecord = {\r\n      business_id: business.id,\r\n      tier_id: customerData.tier_id,\r\n      name: customerData.name,\r\n      email: customerData.email,\r\n      phone: customerData.phone || null,\r\n      address: customerData.address || null,\r\n      city: customerData.city || null,\r\n      state: customerData.state || null,\r\n      zip_code: customerData.zip_code || null,\r\n      wine_preferences: customerData.wine_preferences || null,\r\n      dietary_restrictions: customerData.dietary_restrictions || null,\r\n      special_requests: customerData.special_requests || null,\r\n      stripe_customer_id: typeof session.customer === 'string' ? session.customer : session.customer?.id || null,\r\n      stripe_subscription_id: (session.subscription as Stripe.Subscription).id,\r\n      subscription_status: (session.subscription as Stripe.Subscription).status,\r\n      subscription_start_date: new Date(),\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n\r\n    const { data: customer, error: customerError } = await supabaseAdmin\r\n      .from('customers')\r\n      .insert([customerRecord])\r\n      .select()\r\n      .single();\r\n\r\n    if (customerError) {\r\n      console.error('Error creating customer:', customerError);\r\n      return res.status(500).json({ \r\n        error: 'Failed to create customer record' \r\n      });\r\n    }\r\n\r\n    // Mark the invitation as used\r\n    await supabaseAdmin\r\n      .from('customer_invitations')\r\n      .update({ \r\n        status: 'used',\r\n        used_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('token', token);\r\n\r\n    // Prepare response data\r\n    const subscription = session.subscription as Stripe.Subscription;\r\n    const response = {\r\n      customer: {\r\n        id: customer.id,\r\n        name: customer.name,\r\n        email: customer.email,\r\n        tier_name: tier.name,\r\n        subscription_status: customer.subscription_status\r\n      },\r\n      business: {\r\n        id: business.id,\r\n        name: business.name,\r\n        website: business.website\r\n      },\r\n      subscription: {\r\n        id: subscription.id,\r\n        status: subscription.status,\r\n        current_period_end: new Date(subscription.current_period_end * 1000).toISOString(),\r\n        amount: subscription.items.data[0]?.price.unit_amount || 0\r\n      }\r\n    };\r\n\r\n    return res.status(200).json(response);\r\n  } catch (error: any) {\r\n    console.error('Error in verify-customer-payment:', error);\r\n    return res.status(500).json({ \r\n      error: 'Internal server error',\r\n      message: error.message \r\n    });\r\n  }\r\n};\r\n\r\nexport default withErrorHandling(handler);"],
  "mappings": "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",
  "names": ["handler", "Stripe"]
}

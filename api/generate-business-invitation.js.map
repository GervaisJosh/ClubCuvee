{
  "version": 3,
  "sources": ["generate-business-invitation.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\nimport { randomUUID } from 'crypto';\nimport { createClient } from '@supabase/supabase-js';\nimport { ZodError } from 'zod';\n\n// Inline error handling (no external dependencies)\nclass APIError extends Error {\n  constructor(\n    public statusCode: number,\n    message: string,\n    public code?: string\n  ) {\n    super(message);\n    this.name = 'APIError';\n  }\n}\n\nconst setCommonHeaders = (res: VercelResponse) => {\n  res.setHeader('Content-Type', 'application/json');\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n};\n\nconst errorHandler = (\n  error: unknown,\n  req: VercelRequest,\n  res: VercelResponse\n) => {\n  console.error('API Error:', error);\n  setCommonHeaders(res);\n\n  if (req.method === 'OPTIONS') {\n    return res.status(204).end();\n  }\n\n  if (error instanceof APIError) {\n    return res.status(error.statusCode).json({\n      status: 'error',\n      error: {\n        message: error.message,\n        code: error.code,\n      },\n    });\n  }\n\n  if (error instanceof ZodError) {\n    return res.status(400).json({\n      status: 'error',\n      error: {\n        message: 'Validation error',\n        code: 'VALIDATION_ERROR',\n        details: error.errors,\n      },\n    });\n  }\n\n  if (error instanceof Error && error.name === 'StripeError') {\n    return res.status(400).json({\n      status: 'error',\n      error: {\n        message: error.message,\n        code: 'STRIPE_ERROR',\n      },\n    });\n  }\n\n  return res.status(500).json({\n    status: 'error',\n    error: {\n      message: 'Internal server error',\n      code: 'INTERNAL_ERROR',\n    },\n  });\n};\n\nconst withErrorHandler = (\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\n) => {\n  return async (req: VercelRequest, res: VercelResponse) => {\n    try {\n      setCommonHeaders(res);\n      if (req.method === 'OPTIONS') {\n        return res.status(204).end();\n      }\n      await handler(req, res);\n    } catch (error) {\n      errorHandler(error, req, res);\n    }\n  };\n};\n\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\n  // Create Supabase admin client directly in the API (no external dependencies)\n  const supabaseAdmin = createClient(\n    process.env.SUPABASE_URL!,\n    process.env.SUPABASE_SERVICE_ROLE_KEY!,\n    {\n      auth: {\n        autoRefreshToken: false,\n        persistSession: false\n      }\n    }\n  );\n\n  if (req.method !== 'POST') {\n    throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\n  }\n\n  // Parse request body\n  const { business_name, business_email, pricing_tier } = req.body;\n\n  // Validate required fields\n  if (!business_name || !business_email) {\n    throw new APIError(400, 'Business name and email are required', 'VALIDATION_ERROR');\n  }\n\n  // Validate email format\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  if (!emailRegex.test(business_email)) {\n    throw new APIError(400, 'Invalid email format', 'VALIDATION_ERROR');\n  }\n\n  // Validate pricing tier if provided (should be a UUID)\n  if (pricing_tier) {\n    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    if (!uuidRegex.test(pricing_tier)) {\n      throw new APIError(400, 'Invalid pricing tier ID format', 'VALIDATION_ERROR');\n    }\n\n    // Verify the pricing tier exists\n    const { data: tierExists, error: tierError } = await supabaseAdmin\n      .from('business_pricing_tiers')\n      .select('id')\n      .eq('id', pricing_tier)\n      .eq('is_active', true)\n      .single();\n\n    if (tierError || !tierExists) {\n      throw new APIError(400, 'Invalid pricing tier selected', 'VALIDATION_ERROR');\n    }\n  }\n\n  // Generate invitation token and insert into restaurant_invitations\n  const invitationToken = randomUUID();\n  const expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 days from now\n  \n  const { data, error } = await supabaseAdmin\n    .from('restaurant_invitations')\n    .insert({\n      token: invitationToken,\n      email: business_email,\n      restaurant_name: business_name,\n      tier: pricing_tier || 'standard',\n      expires_at: expiresAt.toISOString(),\n      status: 'pending'\n    })\n    .select('token, expires_at')\n    .single();\n\n  if (error) {\n    console.error('Error generating restaurant invitation:', error);\n    throw new APIError(500, 'Failed to generate restaurant invitation', 'DATABASE_ERROR');\n  }\n\n  if (!data) {\n    throw new APIError(500, 'Failed to generate invitation token', 'DATABASE_ERROR');\n  }\n\n  const invitationData = data;\n  \n  // Environment variable priority: BASE_URL -> NEXT_PUBLIC_BASE_URL -> production fallback\n  // Note: VERCEL_URL is preview/branch deployments, we want production domain for invitations\n  const baseUrl = process.env.BASE_URL || process.env.NEXT_PUBLIC_BASE_URL || 'https://club-cuvee.com';\n  const fullInvitationUrl = `${baseUrl}/onboard/${invitationData.token}`;\n\n  res.status(200).json({\n    success: true,\n    data: {\n      token: invitationData.token,\n      invitation_url: fullInvitationUrl,\n      expires_at: invitationData.expires_at\n    }\n  });\n});"],
  "mappings": "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",
  "names": []
}

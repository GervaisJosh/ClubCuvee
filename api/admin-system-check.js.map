{
  "version": 3,
  "sources": ["admin-system-check.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport Stripe from 'stripe';\r\n\r\n// INLINE Supabase client (no external imports)\r\nconst supabaseAdmin = createClient(\r\n  process.env.SUPABASE_URL!,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false\r\n    }\r\n  }\r\n);\r\n\r\n// INLINE error handling (no external imports)\r\nclass APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nconst errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nconst withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n};\r\n\r\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string, {\r\n  apiVersion: '2025-02-24.acacia',\r\n});\r\n\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse) => {\r\n  if (req.method !== 'GET') {\r\n    throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n  }\r\n\r\n  // Admin check\r\n  const isAdmin = req.headers['x-admin-auth'] === process.env.ADMIN_SECRET;\r\n  if (!isAdmin) {\r\n    throw new APIError(401, 'Unauthorized', 'UNAUTHORIZED');\r\n  }\r\n\r\n  // Supabase check\r\n  let supabaseStatus = 'green';\r\n  try {\r\n    const { error } = await supabaseAdmin.from('restaurant_invitations').select('id').limit(1);\r\n    if (error) supabaseStatus = 'red';\r\n  } catch {\r\n    supabaseStatus = 'red';\r\n  }\r\n\r\n  // Stripe check\r\n  let stripeStatus = 'green';\r\n  try {\r\n    await stripe.customers.list({ limit: 1 });\r\n  } catch {\r\n    stripeStatus = 'red';\r\n  }\r\n\r\n  // Auth check (optional, try to list users)\r\n  let authStatus = 'green';\r\n  try {\r\n    // This will fail if not using service role key\r\n    const { error } = await supabaseAdmin.auth.admin.listUsers({ page: 1, perPage: 1 });\r\n    if (error) authStatus = 'red';\r\n  } catch {\r\n    authStatus = 'red';\r\n  }\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    systems: {\r\n      supabase: supabaseStatus,\r\n      stripe: stripeStatus,\r\n      auth: authStatus,\r\n    },\r\n  });\r\n}); "],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,yBAA6B;AAC7B,oBAAmB;AAGnB,IAAM,oBAAgB;AAAA,EACpB,QAAQ,IAAI;AAAA,EACZ,QAAQ,IAAI;AAAA,EACZ;AAAA,IACE,MAAM;AAAA,MACJ,kBAAkB;AAAA,MAClB,gBAAgB;AAAA,IAClB;AAAA,EACF;AACF;AAGA,IAAM,WAAN,cAAuB,MAAM;AAAA,EAC3B,YACS,YACP,SACO,MACP;AACA,UAAM,OAAO;AAJN;AAEA;AAGP,SAAK,OAAO;AAAA,EACd;AACF;AAEA,IAAM,mBAAmB,CAAC,QAAwB;AAChD,MAAI,UAAU,gBAAgB,kBAAkB;AAChD,MAAI,UAAU,+BAA+B,GAAG;AAChD,MAAI,UAAU,gCAAgC,iCAAiC;AAC/E,MAAI,UAAU,gCAAgC,6BAA6B;AAC7E;AAEA,IAAM,eAAe,CACnB,OACA,KACA,QACG;AACH,UAAQ,MAAM,cAAc,KAAK;AACjC,mBAAiB,GAAG;AAEpB,MAAI,IAAI,WAAW,WAAW;AAC5B,WAAO,IAAI,OAAO,GAAG,EAAE,IAAI;AAAA,EAC7B;AAEA,MAAI,iBAAiB,UAAU;AAC7B,WAAO,IAAI,OAAO,MAAM,UAAU,EAAE,KAAK;AAAA,MACvC,QAAQ;AAAA,MACR,OAAO;AAAA,QACL,SAAS,MAAM;AAAA,QACf,MAAM,MAAM;AAAA,MACd;AAAA,IACF,CAAC;AAAA,EACH;AAEA,SAAO,IAAI,OAAO,GAAG,EAAE,KAAK;AAAA,IAC1B,QAAQ;AAAA,IACR,OAAO;AAAA,MACL,SAAS;AAAA,MACT,MAAM;AAAA,IACR;AAAA,EACF,CAAC;AACH;AAEA,IAAM,mBAAmB,CACvB,YACG;AACH,SAAO,OAAO,KAAoB,QAAwB;AACxD,QAAI;AACF,uBAAiB,GAAG;AACpB,UAAI,IAAI,WAAW,WAAW;AAC5B,eAAO,IAAI,OAAO,GAAG,EAAE,IAAI;AAAA,MAC7B;AACA,YAAM,QAAQ,KAAK,GAAG;AAAA,IACxB,SAAS,OAAO;AACd,mBAAa,OAAO,KAAK,GAAG;AAAA,IAC9B;AAAA,EACF;AACF;AAEA,IAAM,SAAS,IAAI,cAAAA,QAAO,QAAQ,IAAI,mBAA6B;AAAA,EACjE,YAAY;AACd,CAAC;AAED,IAAO,6BAAQ,iBAAiB,OAAO,KAAoB,QAAwB;AACjF,MAAI,IAAI,WAAW,OAAO;AACxB,UAAM,IAAI,SAAS,KAAK,sBAAsB,oBAAoB;AAAA,EACpE;AAGA,QAAM,UAAU,IAAI,QAAQ,cAAc,MAAM,QAAQ,IAAI;AAC5D,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,SAAS,KAAK,gBAAgB,cAAc;AAAA,EACxD;AAGA,MAAI,iBAAiB;AACrB,MAAI;AACF,UAAM,EAAE,MAAM,IAAI,MAAM,cAAc,KAAK,wBAAwB,EAAE,OAAO,IAAI,EAAE,MAAM,CAAC;AACzF,QAAI,MAAO,kBAAiB;AAAA,EAC9B,QAAQ;AACN,qBAAiB;AAAA,EACnB;AAGA,MAAI,eAAe;AACnB,MAAI;AACF,UAAM,OAAO,UAAU,KAAK,EAAE,OAAO,EAAE,CAAC;AAAA,EAC1C,QAAQ;AACN,mBAAe;AAAA,EACjB;AAGA,MAAI,aAAa;AACjB,MAAI;AAEF,UAAM,EAAE,MAAM,IAAI,MAAM,cAAc,KAAK,MAAM,UAAU,EAAE,MAAM,GAAG,SAAS,EAAE,CAAC;AAClF,QAAI,MAAO,cAAa;AAAA,EAC1B,QAAQ;AACN,iBAAa;AAAA,EACf;AAEA,MAAI,OAAO,GAAG,EAAE,KAAK;AAAA,IACnB,SAAS;AAAA,IACT,SAAS;AAAA,MACP,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,MAAM;AAAA,IACR;AAAA,EACF,CAAC;AACH,CAAC;",
  "names": ["Stripe"]
}

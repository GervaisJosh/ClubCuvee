{
  "version": 3,
  "sources": ["business-tiers.ts", "../../lib/supabaseAdmin.ts", "../utils/error-handler.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { supabaseAdmin } from '../../lib/supabaseAdmin';\r\nimport { withErrorHandler, APIError } from '../utils/error-handler';\r\n\r\ninterface RestaurantMembershipTier {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  price_cents: number;\r\n  interval: string;\r\n  stripe_product_id: string;\r\n  stripe_price_id: string;\r\n  is_ready: boolean;\r\n}\r\n\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  if (req.method !== 'GET') {\r\n    throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n  }\r\n\r\n  const business_id = req.query.business_id as string;\r\n\r\n  if (!business_id) {\r\n    throw new APIError(400, 'business_id parameter is required', 'MISSING_BUSINESS_ID');\r\n  }\r\n\r\n  // Get business details\r\n  const { data: business, error: businessError } = await supabaseAdmin\r\n    .from('businesses')\r\n    .select('id, name, email')\r\n    .eq('id', business_id)\r\n    .single();\r\n\r\n  if (businessError || !business) {\r\n    throw new APIError(404, 'Business not found', 'BUSINESS_NOT_FOUND');\r\n  }\r\n\r\n  // Get ready membership tiers for this business\r\n  const { data: tiers, error: tiersError } = await supabaseAdmin.rpc('get_restaurant_membership_tiers', {\r\n    p_business_id: business_id\r\n  });\r\n\r\n  if (tiersError) {\r\n    console.error('Error fetching restaurant membership tiers:', tiersError);\r\n    throw new APIError(500, 'Failed to fetch membership tiers', 'FETCH_TIERS_FAILED');\r\n  }\r\n\r\n  // Format price display for frontend\r\n  const formattedTiers = (tiers || []).map((tier: RestaurantMembershipTier) => ({\r\n    ...tier,\r\n    price_display: `$${(tier.price_cents / 100).toFixed(2)}`,\r\n    price_per_interval: `$${(tier.price_cents / 100).toFixed(2)}/${tier.interval}`\r\n  }));\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    data: {\r\n      business: business,\r\n      tiers: formattedTiers,\r\n      has_tiers: formattedTiers.length > 0\r\n    }\r\n  });\r\n});", "import { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase with service role key for admin operations\nexport const supabaseAdmin = createClient(\n  process.env.SUPABASE_URL as string,\n  process.env.SUPABASE_SERVICE_ROLE_KEY as string,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n); ", "import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { ZodError } from 'zod';\r\n\r\nexport class APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\n// Helper to set common headers for all responses\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nexport const errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  // Handle preflight requests\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof ZodError) {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: 'Validation error',\r\n        code: 'VALIDATION_ERROR',\r\n        details: error.errors,\r\n      },\r\n    });\r\n  }\r\n\r\n  // Handle Stripe errors\r\n  if (error instanceof Error && error.name === 'StripeError') {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: 'STRIPE_ERROR',\r\n      },\r\n    });\r\n  }\r\n\r\n  // Default error\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nexport const withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      // Handle preflight requests\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n}; "],
  "mappings": "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",
  "names": []
}

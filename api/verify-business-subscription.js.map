{
  "version": 3,
  "sources": ["verify-business-subscription.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport Stripe from 'stripe';\r\nimport { ZodError } from 'zod';\r\n\r\n// Inline error handling (no external dependencies)\r\nclass APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nconst errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof ZodError) {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: 'Validation error',\r\n        code: 'VALIDATION_ERROR',\r\n        details: error.errors,\r\n      },\r\n    });\r\n  }\r\n\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nconst withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n};\r\n\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  // Create Supabase admin client directly in the API (no external dependencies)\r\n  const supabaseAdmin = createClient(\r\n    process.env.SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false\r\n      }\r\n    }\r\n  );\r\n\r\n  // Initialize Stripe client\r\n  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\r\n    apiVersion: '2025-02-24.acacia',\r\n    typescript: true,\r\n  });\r\n\r\n  if (req.method !== 'POST') {\r\n    throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n  }\r\n\r\n  const { token, sessionId } = req.body;\r\n\r\n  if (!token || !sessionId) {\r\n    throw new APIError(400, 'Token and sessionId are required', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  try {\r\n    // 1. Validate the invitation token\r\n    const { data: invite, error: inviteError } = await supabaseAdmin\r\n      .from('restaurant_invitations')\r\n      .select('restaurant_name, email, tier, expires_at, status, payment_session_id')\r\n      .eq('token', token)\r\n      .single();\r\n\r\n    if (inviteError || !invite) {\r\n      console.error('Error fetching invitation details:', inviteError);\r\n      throw new APIError(404, 'Invalid invitation token', 'NOT_FOUND');\r\n    }\r\n\r\n    // 2. Verify the session belongs to this invitation\r\n    if (invite.payment_session_id !== sessionId) {\r\n      throw new APIError(400, 'Session ID does not match invitation', 'VALIDATION_ERROR');\r\n    }\r\n\r\n    // 3. Retrieve the Stripe checkout session\r\n    const session = await stripe.checkout.sessions.retrieve(sessionId);\r\n\r\n    if (!session) {\r\n      throw new APIError(404, 'Checkout session not found', 'NOT_FOUND');\r\n    }\r\n\r\n    // 4. Check if payment was successful\r\n    if (session.payment_status !== 'paid') {\r\n      throw new APIError(400, 'Payment not completed', 'PAYMENT_INCOMPLETE');\r\n    }\r\n\r\n    // 5. Retrieve the subscription details\r\n    const subscriptionId = session.subscription as string;\r\n    if (!subscriptionId) {\r\n      throw new APIError(400, 'No subscription found for this session', 'NO_SUBSCRIPTION');\r\n    }\r\n\r\n    const subscription = await stripe.subscriptions.retrieve(subscriptionId);\r\n\r\n    // 6. Update invitation status to show payment completed\r\n    await supabaseAdmin\r\n      .from('restaurant_invitations')\r\n      .update({\r\n        status: 'paid',\r\n        updated_at: new Date().toISOString()\r\n      })\r\n      .eq('token', token);\r\n\r\n    // 7. Return subscription and pricing tier details\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        subscription: {\r\n          id: subscription.id,\r\n          status: subscription.status,\r\n          currentPeriodEnd: subscription.current_period_end,\r\n          customerId: subscription.customer,\r\n          priceId: subscription.items.data[0]?.price.id\r\n        },\r\n        pricing_tier: invite.tier,\r\n        session: {\r\n          id: session.id,\r\n          payment_status: session.payment_status,\r\n          customer_email: session.customer_details?.email\r\n        }\r\n      }\r\n    });\r\n\r\n  } catch (err) {\r\n    if (err instanceof Stripe.errors.StripeError) {\r\n      throw new APIError(400, err.message, 'STRIPE_ERROR');\r\n    }\r\n    throw err;\r\n  }\r\n});"],
  "mappings": "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",
  "names": ["Stripe"]
}

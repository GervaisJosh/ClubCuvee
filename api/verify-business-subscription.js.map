{
  "version": 3,
  "sources": ["verify-business-subscription.ts", "utils/stripe.ts", "utils/error-handler.ts", "../lib/supabaseAdmin.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { stripe } from './utils/stripe';\r\nimport { supabaseAdmin } from '../lib/supabaseAdmin';\r\nimport { withErrorHandler, APIError } from './utils/error-handler';\r\n\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  if (req.method !== 'POST') {\r\n    throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n  }\r\n\r\n  const { token, sessionId } = req.body;\r\n\r\n  if (!token || !sessionId) {\r\n    throw new APIError(400, 'Token and session ID are required', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Validate the business invitation token first\r\n  const { data: tokenValidation, error: validationError } = await supabaseAdmin.rpc('validate_business_invitation_token', {\r\n    p_token: token\r\n  });\r\n\r\n  if (validationError || !tokenValidation || tokenValidation.length === 0) {\r\n    throw new APIError(400, 'Invalid or expired business invitation token', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  const tokenData = tokenValidation[0];\r\n  if (!tokenData.is_valid) {\r\n    throw new APIError(400, 'Business invitation token is not valid', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Retrieve the checkout session from Stripe\r\n  const session = await stripe.checkout.sessions.retrieve(sessionId);\r\n\r\n  if (!session) {\r\n    throw new APIError(404, 'Checkout session not found', 'NOT_FOUND');\r\n  }\r\n\r\n  // Verify the session is completed and matches our token\r\n  if (session.payment_status !== 'paid' || session.metadata?.business_invitation_token !== token) {\r\n    throw new APIError(400, 'Payment verification failed', 'VALIDATION_ERROR');\r\n  }\r\n\r\n  // Get the subscription details\r\n  let subscription = null;\r\n  if (session.subscription) {\r\n    subscription = await stripe.subscriptions.retrieve(session.subscription as string);\r\n  }\r\n\r\n  if (!subscription) {\r\n    throw new APIError(404, 'Subscription not found', 'NOT_FOUND');\r\n  }\r\n\r\n  // Store the temporary business setup data for the business creation process\r\n  const { error: tempDataError } = await supabaseAdmin\r\n    .from('temp_business_setup')\r\n    .upsert({\r\n      invitation_token: token,\r\n      stripe_customer_id: session.customer as string,\r\n      stripe_subscription_id: subscription.id,\r\n      pricing_tier: session.metadata?.pricing_tier || 'neighborhood_cellar',\r\n      setup_completed: false,\r\n      created_at: new Date().toISOString()\r\n    }, {\r\n      onConflict: 'invitation_token'\r\n    });\r\n\r\n  if (tempDataError) {\r\n    console.error('Error storing temp business setup data:', tempDataError);\r\n    // Don't fail completely if temp data storage fails\r\n  }\r\n\r\n  res.status(200).json({\r\n    success: true,\r\n    data: {\r\n      subscription: {\r\n        id: subscription.id,\r\n        status: subscription.status,\r\n        currentPeriodEnd: subscription.current_period_end,\r\n        customerId: session.customer\r\n      },\r\n      pricing_tier: session.metadata?.pricing_tier || 'neighborhood_cellar'\r\n    }\r\n  });\r\n});", "import Stripe from 'stripe';\r\nimport { APIError } from './error-handler';\r\n\r\nif (!process.env.STRIPE_SECRET_KEY) {\r\n  throw new Error('STRIPE_SECRET_KEY is required');\r\n}\r\n\r\nif (!process.env.STRIPE_WEBHOOK_SECRET) {\r\n  throw new Error('STRIPE_WEBHOOK_SECRET is required');\r\n}\r\n\r\nexport const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\r\n  apiVersion: '2025-02-24.acacia',\r\n  typescript: true,\r\n});\r\n\r\nexport const verifyStripeWebhook = (signature: string, payload: string) => {\r\n  try {\r\n    return stripe.webhooks.constructEvent(\r\n      payload,\r\n      signature,\r\n      process.env.STRIPE_WEBHOOK_SECRET!\r\n    );\r\n  } catch (err) {\r\n    throw new APIError(400, 'Invalid webhook signature', 'INVALID_SIGNATURE');\r\n  }\r\n};\r\n\r\nexport const createCheckoutSession = async (data: {\r\n  restaurantName: string;\r\n  email: string;\r\n  membershipTier: string;\r\n  successUrl: string;\r\n  cancelUrl: string;\r\n}) => {\r\n  try {\r\n    const session = await stripe.checkout.sessions.create({\r\n      mode: 'subscription',\r\n      payment_method_types: ['card'],\r\n      line_items: [\r\n        {\r\n          price: process.env[`STRIPE_PRICE_ID_${data.membershipTier.toUpperCase()}`],\r\n          quantity: 1,\r\n        },\r\n      ],\r\n      customer_email: data.email,\r\n      metadata: {\r\n        restaurantName: data.restaurantName,\r\n        membershipTier: data.membershipTier,\r\n      },\r\n      success_url: data.successUrl,\r\n      cancel_url: data.cancelUrl,\r\n    });\r\n\r\n    return session;\r\n  } catch (err) {\r\n    if (err instanceof Stripe.errors.StripeError) {\r\n      throw new APIError(400, err.message, 'STRIPE_ERROR');\r\n    }\r\n    throw err;\r\n  }\r\n};\r\n\r\nexport const getSubscription = async (subscriptionId: string) => {\r\n  try {\r\n    return await stripe.subscriptions.retrieve(subscriptionId);\r\n  } catch (err) {\r\n    if (err instanceof Stripe.errors.StripeError) {\r\n      throw new APIError(400, err.message, 'STRIPE_ERROR');\r\n    }\r\n    throw err;\r\n  }\r\n}; ", "import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { ZodError } from 'zod';\r\n\r\nexport class APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\n// Helper to set common headers for all responses\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nexport const errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  // Handle preflight requests\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  if (error instanceof ZodError) {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: 'Validation error',\r\n        code: 'VALIDATION_ERROR',\r\n        details: error.errors,\r\n      },\r\n    });\r\n  }\r\n\r\n  // Handle Stripe errors\r\n  if (error instanceof Error && error.name === 'StripeError') {\r\n    return res.status(400).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: 'STRIPE_ERROR',\r\n      },\r\n    });\r\n  }\r\n\r\n  // Default error\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nexport const withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      // Handle preflight requests\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n}; ", "import { createClient } from '@supabase/supabase-js';\n\n// Initialize Supabase with service role key for admin operations\nexport const supabaseAdmin = createClient(\n  process.env.SUPABASE_URL as string,\n  process.env.SUPABASE_SERVICE_ROLE_KEY as string,\n  {\n    auth: {\n      autoRefreshToken: false,\n      persistSession: false\n    }\n  }\n); "],
  "mappings": "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",
  "names": ["Stripe"]
}

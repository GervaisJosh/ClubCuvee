{
  "version": 3,
  "sources": ["create-restaurant-tier.ts"],
  "sourcesContent": ["import { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport Stripe from 'stripe';\r\n\r\n// Inline error handling (no external dependencies)\r\nclass APIError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public code?: string\r\n  ) {\r\n    super(message);\r\n    this.name = 'APIError';\r\n  }\r\n}\r\n\r\nconst setCommonHeaders = (res: VercelResponse) => {\r\n  res.setHeader('Content-Type', 'application/json');\r\n  res.setHeader('Access-Control-Allow-Origin', '*');\r\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\r\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\r\n};\r\n\r\nconst errorHandler = (\r\n  error: unknown,\r\n  req: VercelRequest,\r\n  res: VercelResponse\r\n) => {\r\n  console.error('API Error:', error);\r\n  setCommonHeaders(res);\r\n\r\n  if (req.method === 'OPTIONS') {\r\n    return res.status(204).end();\r\n  }\r\n\r\n  if (error instanceof APIError) {\r\n    return res.status(error.statusCode).json({\r\n      status: 'error',\r\n      error: {\r\n        message: error.message,\r\n        code: error.code,\r\n      },\r\n    });\r\n  }\r\n\r\n  return res.status(500).json({\r\n    status: 'error',\r\n    error: {\r\n      message: 'Internal server error',\r\n      code: 'INTERNAL_ERROR',\r\n    },\r\n  });\r\n};\r\n\r\nconst withErrorHandler = (\r\n  handler: (req: VercelRequest, res: VercelResponse) => Promise<void>\r\n) => {\r\n  return async (req: VercelRequest, res: VercelResponse) => {\r\n    try {\r\n      setCommonHeaders(res);\r\n      if (req.method === 'OPTIONS') {\r\n        return res.status(204).end();\r\n      }\r\n      await handler(req, res);\r\n    } catch (error) {\r\n      errorHandler(error, req, res);\r\n    }\r\n  };\r\n};\r\n\r\ninterface CreateRestaurantTierRequest {\r\n  business_id: string;\r\n  name: string;\r\n  description?: string;\r\n  monthly_price_cents: number;\r\n}\r\n\r\nexport default withErrorHandler(async (req: VercelRequest, res: VercelResponse): Promise<void> => {\r\n  // Create Supabase admin client directly in the API (no external dependencies)\r\n  const supabaseAdmin = createClient(\r\n    process.env.SUPABASE_URL!,\r\n    process.env.SUPABASE_SERVICE_ROLE_KEY!,\r\n    {\r\n      auth: {\r\n        autoRefreshToken: false,\r\n        persistSession: false\r\n      }\r\n    }\r\n  );\r\n\r\n  // Initialize Stripe client\r\n  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\r\n    apiVersion: '2025-02-24.acacia',\r\n    typescript: true,\r\n  });\r\n  if (req.method !== 'POST') {\r\n    throw new APIError(405, 'Method not allowed', 'METHOD_NOT_ALLOWED');\r\n  }\r\n\r\n  const authHeader = req.headers.authorization;\r\n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n    throw new APIError(401, 'Unauthorized', 'UNAUTHORIZED');\r\n  }\r\n\r\n  const body: CreateRestaurantTierRequest = req.body;\r\n  const { business_id, name, description, monthly_price_cents } = body;\r\n\r\n  // Validate required fields\r\n  if (!business_id || !name || !monthly_price_cents) {\r\n    throw new APIError(400, 'Missing required fields: business_id, name, monthly_price_cents', 'MISSING_FIELDS');\r\n  }\r\n\r\n  if (monthly_price_cents < 1000) {\r\n    throw new APIError(400, 'Minimum price is $10.00 (1000 cents)', 'INVALID_PRICE');\r\n  }\r\n\r\n  // Verify the business exists and user has permission\r\n  const { data: business, error: businessError } = await supabaseAdmin\r\n    .from('businesses')\r\n    .select('id, name')\r\n    .eq('id', business_id)\r\n    .single();\r\n\r\n  if (businessError || !business) {\r\n    throw new APIError(404, 'Business not found or access denied', 'BUSINESS_NOT_FOUND');\r\n  }\r\n\r\n  // Create the membership tier in database first\r\n  const { data: tier, error: tierError } = await supabaseAdmin\r\n    .from('membership_tiers')\r\n    .insert({\r\n      business_id,\r\n      name,\r\n      description,\r\n      monthly_price_cents,\r\n      is_active: false // Will be set to true after Stripe creation\r\n    })\r\n    .select()\r\n    .single();\r\n\r\n  if (tierError || !tier) {\r\n    throw new APIError(500, 'Failed to create membership tier', 'TIER_CREATION_FAILED');\r\n  }\r\n\r\n  try {\r\n    // Create Stripe Product\r\n    const product = await stripe.products.create({\r\n      name: `${business.name} - ${name}`,\r\n      description: description || `Wine club membership tier for ${business.name}`,\r\n      metadata: {\r\n        business_id: business_id,\r\n        tier_id: tier.id,\r\n        created_by: 'club_cuvee_platform'\r\n      }\r\n    });\r\n\r\n    // Create Stripe Price\r\n    const price = await stripe.prices.create({\r\n      product: product.id,\r\n      unit_amount: monthly_price_cents,\r\n      currency: 'usd',\r\n      recurring: {\r\n        interval: 'month'\r\n      },\r\n      metadata: {\r\n        business_id: business_id,\r\n        tier_id: tier.id,\r\n        created_by: 'club_cuvee_platform'\r\n      }\r\n    });\r\n\r\n    // Update the tier with Stripe IDs and mark as active\r\n    const { error: updateError } = await supabaseAdmin\r\n      .from('membership_tiers')\r\n      .update({\r\n        stripe_product_id: product.id,\r\n        stripe_price_id: price.id,\r\n        is_active: true\r\n      })\r\n      .eq('id', tier.id);\r\n\r\n    if (updateError) {\r\n      console.error('Failed to update tier with Stripe IDs:', updateError);\r\n      // Note: Stripe objects are created but DB update failed\r\n      // TODO: Consider implementing cleanup or retry logic\r\n    }\r\n\r\n    res.status(200).json({\r\n      success: true,\r\n      data: {\r\n        tier_id: tier.id,\r\n        stripe_product_id: product.id,\r\n        stripe_price_id: price.id,\r\n        is_active: !updateError\r\n      }\r\n    });\r\n\r\n  } catch (stripeError: any) {\r\n    console.error('Stripe creation failed:', stripeError);\r\n    \r\n    // Clean up the database tier since Stripe creation failed\r\n    await supabaseAdmin\r\n      .from('membership_tiers')\r\n      .delete()\r\n      .eq('id', tier.id);\r\n\r\n    throw new APIError(500, `Failed to create Stripe products: ${stripeError.message}`, 'STRIPE_ERROR');\r\n  }\r\n});"],
  "mappings": "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",
  "names": ["Stripe"]
}

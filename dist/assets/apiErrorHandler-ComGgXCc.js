class o extends Error{constructor(s,t,e,a,n){super(s),this.name="ApiError",this.status=t,this.statusText=e,this.data=a,this.type=n}static fromResponse(s,t){const e=t||{};return new o(e.error||`API Error: ${s.status} ${s.statusText}`,s.status,s.statusText,e,e.type)}}async function c(r){const s=r.headers.get("content-type");if(!s||!s.includes("application/json")){const t=await r.text();throw console.error(`Non-JSON response (${r.status}):`,t),new o(`Invalid response format: ${s||"unknown"}`,r.status,r.statusText,{rawResponse:t})}try{return await r.json()}catch(t){throw console.error("JSON parse error:",t),new o("Failed to parse JSON response",r.status,r.statusText,{parseError:t.message})}}async function i(r,s){try{const t=await fetch(r,{headers:{"Content-Type":"application/json",...s?.headers},...s}),e=await c(t);if(!t.ok)throw o.fromResponse(t,e);return e}catch(t){throw t instanceof o?t:(console.error("Network or connection error:",t),new o(t.message||"Network connection error",0,"NETWORK_ERROR",{originalError:t}))}}function u(r){return r&&r.status==="error"}function w(r){return r&&r.status==="success"}export{o as ApiError,i as apiRequest,u as isApiError,w as isApiSuccess,c as safeJsonParse};
//# sourceMappingURL=apiErrorHandler-ComGgXCc.js.map

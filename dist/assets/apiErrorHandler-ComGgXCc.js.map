{"version":3,"file":"apiErrorHandler-ComGgXCc.js","sources":["../../src/services/apiErrorHandler.ts"],"sourcesContent":["/**\r\n * Client-side API error handling utilities\r\n * Used to standardize error handling across frontend services\r\n */\r\n\r\n/**\r\n * API error handling utility for client-side code.\r\n * Formats errors consistently across the application\r\n */\r\nexport class ApiError extends Error {\r\n  status: number;\r\n  statusText: string;\r\n  data: any;\r\n  type?: string;\r\n  \r\n  constructor(message: string, status: number, statusText: string, data?: any, type?: string) {\r\n    super(message);\r\n    this.name = 'ApiError';\r\n    this.status = status;\r\n    this.statusText = statusText;\r\n    this.data = data;\r\n    this.type = type;\r\n  }\r\n  \r\n  static fromResponse(response: Response, data?: any): ApiError {\r\n    // Use provided data or default to empty object\r\n    const errorData = data || {};\r\n    return new ApiError(\r\n      errorData.error || `API Error: ${response.status} ${response.statusText}`,\r\n      response.status,\r\n      response.statusText,\r\n      errorData,\r\n      errorData.type\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Standard API error response structure\r\n * Should match the structure returned by the backend\r\n */\r\nexport interface ApiErrorResponse {\r\n  status: 'error';\r\n  error: string;\r\n  code?: number;\r\n  type?: string;\r\n  details?: any;\r\n  deployment_url?: string;\r\n  errorDetails?: any;\r\n}\r\n\r\n/**\r\n * Typed interface for a successful API response\r\n */\r\nexport interface ApiSuccessResponse<T = any> {\r\n  status: 'success';\r\n  message?: string;\r\n  data?: T;\r\n  [key: string]: any; // Allow for additional properties\r\n}\r\n\r\n/**\r\n * Safely parses JSON from an API response with error handling\r\n */\r\nexport async function safeJsonParse(response: Response): Promise<any> {\r\n  const contentType = response.headers.get('content-type');\r\n  \r\n  // Check if response is JSON\r\n  if (!contentType || !contentType.includes('application/json')) {\r\n    const textResponse = await response.text();\r\n    console.error(`Non-JSON response (${response.status}):`, textResponse);\r\n    throw new ApiError(\r\n      `Invalid response format: ${contentType || 'unknown'}`,\r\n      response.status,\r\n      response.statusText,\r\n      { rawResponse: textResponse }\r\n    );\r\n  }\r\n  \r\n  try {\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('JSON parse error:', error);\r\n    throw new ApiError(\r\n      'Failed to parse JSON response',\r\n      response.status,\r\n      response.statusText,\r\n      { parseError: (error as Error).message }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Generic API request handler with consistent error handling\r\n */\r\nexport async function apiRequest<T = any>(\r\n  url: string,\r\n  options?: RequestInit\r\n): Promise<T> {\r\n  try {\r\n    const response = await fetch(url, {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options?.headers,\r\n      },\r\n      ...options,\r\n    });\r\n    \r\n    const data = await safeJsonParse(response);\r\n    \r\n    if (!response.ok) {\r\n      // Handle API error responses (status >= 400)\r\n      throw ApiError.fromResponse(response, data);\r\n    }\r\n    \r\n    return data as T;\r\n  } catch (error) {\r\n    // Re-throw API errors\r\n    if (error instanceof ApiError) {\r\n      throw error;\r\n    }\r\n    \r\n    // Handle network errors, CORS issues, etc.\r\n    console.error('Network or connection error:', error);\r\n    throw new ApiError(\r\n      (error as Error).message || 'Network connection error',\r\n      0, // 0 indicates a connection error rather than an HTTP status\r\n      'NETWORK_ERROR',\r\n      { originalError: error }\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Type guard to check if a response is an error\r\n */\r\nexport function isApiError(response: any): response is ApiErrorResponse {\r\n  return response && response.status === 'error';\r\n}\r\n\r\n/**\r\n * Type guard to check if a response is successful\r\n */\r\nexport function isApiSuccess<T>(response: any): response is ApiSuccessResponse<T> {\r\n  return response && response.status === 'success';\r\n}"],"names":["ApiError","message","status","statusText","data","type","response","errorData","safeJsonParse","contentType","textResponse","error","apiRequest","url","options","isApiError","isApiSuccess"],"mappings":"AASO,MAAMA,UAAiB,KAAM,CAMlC,YAAYC,EAAiBC,EAAgBC,EAAoBC,EAAYC,EAAe,CAC1F,MAAMJ,CAAO,EACb,KAAK,KAAO,WACZ,KAAK,OAASC,EACd,KAAK,WAAaC,EAClB,KAAK,KAAOC,EACZ,KAAK,KAAOC,CAAA,CAGd,OAAO,aAAaC,EAAoBF,EAAsB,CAEtD,MAAAG,EAAYH,GAAQ,CAAC,EAC3B,OAAO,IAAIJ,EACTO,EAAU,OAAS,cAAcD,EAAS,MAAM,IAAIA,EAAS,UAAU,GACvEA,EAAS,OACTA,EAAS,WACTC,EACAA,EAAU,IACZ,CAAA,CAEJ,CA6BA,eAAsBC,EAAcF,EAAkC,CACpE,MAAMG,EAAcH,EAAS,QAAQ,IAAI,cAAc,EAGvD,GAAI,CAACG,GAAe,CAACA,EAAY,SAAS,kBAAkB,EAAG,CACvD,MAAAC,EAAe,MAAMJ,EAAS,KAAK,EACzC,cAAQ,MAAM,sBAAsBA,EAAS,MAAM,KAAMI,CAAY,EAC/D,IAAIV,EACR,4BAA4BS,GAAe,SAAS,GACpDH,EAAS,OACTA,EAAS,WACT,CAAE,YAAaI,CAAa,CAC9B,CAAA,CAGE,GAAA,CACK,OAAA,MAAMJ,EAAS,KAAK,QACpBK,EAAO,CACN,cAAA,MAAM,oBAAqBA,CAAK,EAClC,IAAIX,EACR,gCACAM,EAAS,OACTA,EAAS,WACT,CAAE,WAAaK,EAAgB,OAAQ,CACzC,CAAA,CAEJ,CAKsB,eAAAC,EACpBC,EACAC,EACY,CACR,GAAA,CACI,MAAAR,EAAW,MAAM,MAAMO,EAAK,CAChC,QAAS,CACP,eAAgB,mBAChB,GAAGC,GAAS,OACd,EACA,GAAGA,CAAA,CACJ,EAEKV,EAAO,MAAMI,EAAcF,CAAQ,EAErC,GAAA,CAACA,EAAS,GAEN,MAAAN,EAAS,aAAaM,EAAUF,CAAI,EAGrC,OAAAA,QACAO,EAAO,CAEd,MAAIA,aAAiBX,EACbW,GAIA,QAAA,MAAM,+BAAgCA,CAAK,EAC7C,IAAIX,EACPW,EAAgB,SAAW,2BAC5B,EACA,gBACA,CAAE,cAAeA,CAAM,CACzB,EAAA,CAEJ,CAKO,SAASI,EAAWT,EAA6C,CAC/D,OAAAA,GAAYA,EAAS,SAAW,OACzC,CAKO,SAASU,EAAgBV,EAAkD,CACzE,OAAAA,GAAYA,EAAS,SAAW,SACzC"}
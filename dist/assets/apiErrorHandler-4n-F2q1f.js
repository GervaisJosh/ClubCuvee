var u=Object.defineProperty;var w=(r,s,t)=>s in r?u(r,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[s]=t;var n=(r,s,t)=>w(r,typeof s!="symbol"?s+"":s,t);class e extends Error{constructor(t,a,o,c,i){super(t);n(this,"status");n(this,"statusText");n(this,"data");n(this,"type");this.name="ApiError",this.status=a,this.statusText=o,this.data=c,this.type=i}static fromResponse(t,a){const o=a||{};return new e(o.error||`API Error: ${t.status} ${t.statusText}`,t.status,t.statusText,o,o.type)}}async function h(r){const s=r.headers.get("content-type");if(!s||!s.includes("application/json")){const t=await r.text();throw console.error(`Non-JSON response (${r.status}):`,t),new e(`Invalid response format: ${s||"unknown"}`,r.status,r.statusText,{rawResponse:t})}try{return await r.json()}catch(t){throw console.error("JSON parse error:",t),new e("Failed to parse JSON response",r.status,r.statusText,{parseError:t.message})}}async function f(r,s){try{const t=await fetch(r,{headers:{"Content-Type":"application/json",...s?.headers},...s}),a=await h(t);if(!t.ok)throw e.fromResponse(t,a);return a}catch(t){throw t instanceof e?t:(console.error("Network or connection error:",t),new e(t.message||"Network connection error",0,"NETWORK_ERROR",{originalError:t}))}}function d(r){return r&&r.status==="error"}function l(r){return r&&r.status==="success"}export{e as ApiError,f as apiRequest,d as isApiError,l as isApiSuccess,h as safeJsonParse};
//# sourceMappingURL=apiErrorHandler-4n-F2q1f.js.map

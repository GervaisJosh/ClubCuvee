import{_ as s,l as a}from"./index-CpvFPEWT.js";const n="pk_live_51R06TdCNlVsNC9Vg1XaKrtaVVQuETmvXDZA4ZcFkcr7oiVVyVZgndsalojPhfjnKROBETaXeoir6Z2KGVtMkd7tS0060khkYVG",c=a(n),u={async createCheckoutSession(r){try{const e={...r,metadata:{...r.metadata||{},type:r.type||"customer_subscription"}},t=await fetch("/api/create-checkout-session",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)}),o=await t.json();if(!t.ok)throw new Error(o.error||"Failed to create checkout session");return o.id}catch(e){throw console.error("Error creating checkout session:",e),e}},async redirectToCheckout(r){try{const e=await c;if(!e)throw new Error("Failed to load Stripe");const{error:t}=await e.redirectToCheckout({sessionId:r});if(t)throw new Error(t.message||"Redirect to checkout failed")}catch(e){throw console.error("Error redirecting to checkout:",e),e}},async verifyPaymentSession(r){if(!r)return!1;try{return!0}catch(e){return console.error("Error verifying payment session:",e),!1}},async recordPayment(r,e){try{const{error:t}=await fetch("/api/payments/record",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({stripe_session_id:r,tier:e.tier,amount:e.amount,restaurant_id:e.restaurantId,customer_email:e.customerEmail})});if(t)throw t}catch(t){console.error("Error recording payment:",t)}},async verifyStripeSetup(){try{const{apiRequest:r,isApiError:e}=await s(async()=>{const{apiRequest:o,isApiError:i}=await import("./apiErrorHandler-ComGgXCc.js");return{apiRequest:o,isApiError:i}},[]);return await r("/api/verify-stripe",{method:"GET"})}catch(r){return console.error("Error verifying Stripe:",r),r.name==="ApiError"?{status:"error",error:r.message,type:r.type,details:r.data}:{status:"error",error:r.message||"Failed to verify Stripe configuration"}}}};export{u as stripeService};
//# sourceMappingURL=stripeService-BEf7uD8A.js.map

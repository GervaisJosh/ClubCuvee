{
  "version": 3,
  "sources": ["../../../api/handlers/membershipHandler.ts", "../../../api/utils/stripeClient.ts", "../../../lib/supabaseAdmin.ts", "../../../api/utils/validation.ts", "../../../api/utils/errorHandler.ts", "../../../src/utils/priceUtils.ts"],
  "sourcesContent": ["import { stripe } from '../utils/stripeClient';\r\nimport { supabaseAdmin } from '@/lib/supabaseAdmin';\r\nimport { validateRequest, validatePrice } from '../utils/validation';\r\nimport { sendApiError } from '../utils/errorHandler';\r\nimport type { VercelRequest, VercelResponse } from '@vercel/node';\r\nimport { randomUUID } from 'crypto';\r\n\r\nimport { ensurePriceString, ensurePriceNumber, convertPriceToStripeCents } from '../../src/utils/priceUtils.js';\r\n\r\n// Type definitions for clarity and safety\r\ninterface MembershipTierData {\r\n  name: string;\r\n  price: string; // Always store as string, convert to number when needed for calculations\r\n  description?: string;\r\n  restaurant_id: string;\r\n  stripe_product_id?: string;\r\n  stripe_price_id?: string;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\ninterface InvitationData {\r\n  email: string;\r\n  restaurant_name: string;\r\n  website?: string;\r\n  admin_name?: string;\r\n  tier?: string;\r\n}\r\n\r\n/**\r\n * Create a membership tier with Stripe product/price\r\n */\r\nexport async function createMembershipTier(req: VercelRequest, res: VercelResponse) {\r\n  try {\r\n    const { name, price, description, restaurant_id } = req.body;\r\n    \r\n    // Validate request\r\n    const validation = validateRequest(\r\n      req.body,\r\n      ['name', 'price', 'restaurant_id'],\r\n      {\r\n        price: (value) => \r\n          validatePrice(value) \r\n            ? null \r\n            : { field: 'price', message: 'Price must be a positive number' },\r\n      }\r\n    );\r\n    \r\n    if (!validation.isValid) {\r\n      return res.status(400).json({\r\n        error: 'Validation failed',\r\n        details: validation.errors,\r\n      });\r\n    }\r\n    \r\n    // Get restaurant info\r\n    const { data: restaurant, error: restaurantError } = await supabaseAdmin\r\n      .from('restaurants')\r\n      .select('name')\r\n      .eq('id', restaurant_id)\r\n      .single();\r\n      \r\n    if (restaurantError || !restaurant) {\r\n      return res.status(404).json({\r\n        error: `Restaurant not found: ${restaurantError?.message || \"Unknown error\"}`,\r\n      });\r\n    }\r\n    \r\n    // Create Stripe product with restaurant context\r\n    const product = await stripe.products.create({\r\n      name: `${restaurant.name} - ${name}`,\r\n      description: description || `${name} membership tier`,\r\n      metadata: { \r\n        restaurant_id,\r\n      }\r\n    });\r\n    \r\n    // Create price for the product\r\n    const stripePrice = await stripe.prices.create({\r\n      product: product.id,\r\n      unit_amount: convertPriceToStripeCents(price),\r\n      currency: 'usd',\r\n      recurring: { interval: 'month' },\r\n      metadata: { \r\n        restaurant_id,\r\n      }\r\n    });\r\n    \r\n    // Store in Supabase\r\n    const tierData: MembershipTierData = {\r\n      name,\r\n      price: ensurePriceString(price),\r\n      description: description || '',\r\n      restaurant_id,\r\n      stripe_product_id: product.id,\r\n      stripe_price_id: stripePrice.id,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n    \r\n    const { data: tier, error } = await supabaseAdmin\r\n      .from('membership_tiers')\r\n      .insert([tierData])\r\n      .select()\r\n      .single();\r\n      \r\n    if (error) {\r\n      // If database operation fails, we should clean up Stripe resources\r\n      try {\r\n        await stripe.prices.update(stripePrice.id, { active: false });\r\n        await stripe.products.update(product.id, { active: false });\r\n      } catch (cleanupError) {\r\n        console.error('Error cleaning up Stripe resources:', cleanupError);\r\n      }\r\n      \r\n      return res.status(500).json({\r\n        error: `Database error: ${error.message}`,\r\n      });\r\n    }\r\n    \r\n    // Update Stripe metadata with tier_id now that we have it\r\n    try {\r\n      await stripe.products.update(product.id, {\r\n        metadata: { tier_id: tier.id, restaurant_id },\r\n      });\r\n      \r\n      await stripe.prices.update(stripePrice.id, {\r\n        metadata: { tier_id: tier.id, restaurant_id },\r\n      });\r\n    } catch (metadataError) {\r\n      console.error('Error updating Stripe metadata:', metadataError);\r\n      // Non-critical error, continue\r\n    }\r\n    \r\n    return res.status(200).json(tier);\r\n  } catch (error: any) {\r\n    console.error('Error creating membership tier:', error);\r\n    return res.status(500).json({\r\n      error: error.message || 'Internal server error',\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Update a membership tier, potentially creating a new Stripe price\r\n */\r\nexport async function updateMembershipTier(req: VercelRequest, res: VercelResponse) {\r\n  try {\r\n    const { id, name, price, description, restaurant_id, stripe_product_id, stripe_price_id } = req.body;\r\n    \r\n    // Validate request\r\n    const validation = validateRequest(\r\n      req.body,\r\n      ['id', 'name', 'price', 'restaurant_id'],\r\n      {\r\n        price: (value) => \r\n          validatePrice(value) \r\n            ? null \r\n            : { field: 'price', message: 'Price must be a positive number' },\r\n      }\r\n    );\r\n    \r\n    if (!validation.isValid) {\r\n      return res.status(400).json({\r\n        error: 'Validation failed',\r\n        details: validation.errors,\r\n      });\r\n    }\r\n    \r\n    // Verify the tier exists and belongs to this restaurant (security check)\r\n    const { data: existingTier, error: fetchError } = await supabaseAdmin\r\n      .from('membership_tiers')\r\n      .select('*')\r\n      .eq('id', id)\r\n      .eq('restaurant_id', restaurant_id)\r\n      .single();\r\n      \r\n    if (fetchError || !existingTier) {\r\n      return res.status(404).json({\r\n        error: `Tier not found: ${fetchError?.message || \"Unknown error\"}`,\r\n      });\r\n    }\r\n    \r\n    // Prepare tier data for update\r\n    const updateData: Partial<MembershipTierData> = {\r\n      name,\r\n      price: ensurePriceString(price),\r\n      description: description || '',\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n    \r\n    // Update Stripe if we have Stripe IDs\r\n    if (stripe_product_id && stripe_price_id) {\r\n      // Check what needs to be updated in Stripe\r\n      const hasNameChanged = existingTier.name !== name;\r\n      const hasDescriptionChanged = existingTier.description !== description;\r\n      const hasPriceChanged = ensurePriceNumber(existingTier.price) !== ensurePriceNumber(price);\r\n      \r\n      try {\r\n        // 1. Update product if name or description changed\r\n        if (hasNameChanged || hasDescriptionChanged) {\r\n          // Get restaurant info for product name\r\n          const { data: restaurant } = await supabaseAdmin\r\n            .from('restaurants')\r\n            .select('name')\r\n            .eq('id', restaurant_id)\r\n            .single();\r\n          \r\n          if (restaurant) {\r\n            await stripe.products.update(stripe_product_id, {\r\n              name: `${restaurant.name} - ${name}`,\r\n              description: description || `${name} membership tier`,\r\n            });\r\n          }\r\n        }\r\n        \r\n        // 2. Handle price update if needed\r\n        if (hasPriceChanged) {\r\n          // Stripe doesn't allow updating prices, so we create a new one\r\n          // and mark the old one as inactive\r\n          \r\n          // Archive the old price\r\n          await stripe.prices.update(stripe_price_id, {\r\n            active: false,\r\n          });\r\n          \r\n          // Create new price\r\n          const newPrice = await stripe.prices.create({\r\n            product: stripe_product_id,\r\n            unit_amount: convertPriceToStripeCents(price),\r\n            currency: 'usd',\r\n            recurring: { interval: 'month' },\r\n            metadata: {\r\n              restaurant_id,\r\n              tier_id: id,\r\n            },\r\n          });\r\n          \r\n          // Update our data object with new price ID\r\n          updateData.stripe_price_id = newPrice.id;\r\n        }\r\n      } catch (stripeError: any) {\r\n        console.error('Stripe update error:', stripeError);\r\n        // Continue with Supabase update, but include warning\r\n        return res.status(200).json({\r\n          warning: `Stripe update failed: ${stripeError.message}`,\r\n          tier: existingTier,\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Update the tier in Supabase\r\n    const { data: updatedTier, error: updateError } = await supabaseAdmin\r\n      .from('membership_tiers')\r\n      .update(updateData)\r\n      .eq('id', id)\r\n      .select()\r\n      .single();\r\n    \r\n    if (updateError) {\r\n      return res.status(500).json({\r\n        error: `Failed to update tier: ${updateError.message}`,\r\n      });\r\n    }\r\n    \r\n    return res.status(200).json(updatedTier);\r\n  } catch (error: any) {\r\n    console.error('Error updating membership tier:', error);\r\n    return res.status(500).json({\r\n      error: error.message || 'Internal server error',\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Generate a secure invitation link for a restaurant\r\n */\r\nexport async function createInvitationLink(req: VercelRequest, res: VercelResponse) {\r\n  try {\r\n    const { email, restaurant_name, website, admin_name, tier = 'standard' } = req.body as InvitationData;\r\n    \r\n    // Validate request\r\n    const validation = validateRequest(\r\n      req.body,\r\n      ['email', 'restaurant_name'],\r\n      {\r\n        email: (value) => {\r\n          const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n          return emailRegex.test(value) \r\n            ? null \r\n            : { field: 'email', message: 'Invalid email format' };\r\n        },\r\n      }\r\n    );\r\n    \r\n    if (!validation.isValid) {\r\n      return res.status(400).json({\r\n        error: 'Validation failed',\r\n        details: validation.errors,\r\n      });\r\n    }\r\n    \r\n    // Check if email is already registered\r\n    const { data: existingUser, error: userError } = await supabaseAdmin\r\n      .from('restaurants')\r\n      .select('id')\r\n      .eq('admin_email', email)\r\n      .maybeSingle();\r\n    \r\n    if (existingUser) {\r\n      return res.status(400).json({\r\n        error: 'This email is already associated with a restaurant account'\r\n      });\r\n    }\r\n    \r\n    // Generate a secure token\r\n    const token = randomUUID();\r\n    const expiresAt = new Date();\r\n    expiresAt.setDate(expiresAt.getDate() + 7); // Token valid for 7 days\r\n    \r\n    // Create invitation data\r\n    const invitationData = {\r\n      token,\r\n      email,\r\n      restaurant_name,\r\n      website: website || '',\r\n      admin_name: admin_name || '',\r\n      tier,\r\n      created_at: new Date().toISOString(),\r\n      expires_at: expiresAt.toISOString(),\r\n      status: 'pending'\r\n    };\r\n    \r\n    // Store invitation in the database\r\n    const { data: invitation, error: inviteError } = await supabaseAdmin\r\n      .from('restaurant_invitations')\r\n      .insert([invitationData])\r\n      .select()\r\n      .single();\r\n    \r\n    if (inviteError) {\r\n      return res.status(500).json({\r\n        error: `Failed to create invitation: ${inviteError.message}`\r\n      });\r\n    }\r\n    \r\n    // Generate invitation URL using the deployment URL from Vercel\r\n    // Or fallback to the FRONTEND_URL environment variable\r\n    const deployUrl = process.env.VERCEL_URL || process.env.FRONTEND_URL;\r\n    const baseUrl = deployUrl \r\n      ? (deployUrl.startsWith('http') ? deployUrl : `https://${deployUrl}`) \r\n      : 'https://your-deployment-url.vercel.app';\r\n    \r\n    const invitationUrl = `${baseUrl}/onboarding/${token}`;\r\n    \r\n    // Here's where you'd send an email with the invitation link\r\n    // Commented out for future implementation\r\n    \r\n    /*\r\n    // Example implementation with SendGrid or similar email service\r\n    const sendInvitationEmail = async (recipient: string, restaurantName: string, inviteUrl: string) => {\r\n      try {\r\n        // Using SendGrid (would require @sendgrid/mail package)\r\n        // const sgMail = require('@sendgrid/mail');\r\n        // sgMail.setApiKey(process.env.SENDGRID_API_KEY);\r\n        \r\n        // const msg = {\r\n        //   to: recipient,\r\n        //   from: 'noreply@clubcuvee.com',\r\n        //   subject: `Join Club Cuvee - ${restaurantName} Restaurant Invitation`,\r\n        //   text: `You've been invited to set up ${restaurantName} on Club Cuvee. Click this link to get started: ${inviteUrl}`,\r\n        //   html: `\r\n        //     <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\r\n        //       <h2>Welcome to Club Cuvee</h2>\r\n        //       <p>You've been invited to set up <strong>${restaurantName}</strong> on Club Cuvee's wine membership platform.</p>\r\n        //       <p>Click the button below to start your onboarding:</p>\r\n        //       <div style=\"text-align: center; margin: 30px 0;\">\r\n        //         <a href=\"${inviteUrl}\" style=\"background-color: #872657; color: white; padding: 12px 20px; text-decoration: none; border-radius: 4px; font-weight: bold;\">\r\n        //           Set Up Your Restaurant\r\n        //         </a>\r\n        //       </div>\r\n        //       <p>This invitation link will expire in 7 days.</p>\r\n        //     </div>\r\n        //   `,\r\n        // };\r\n        \r\n        // await sgMail.send(msg);\r\n        return true;\r\n      } catch (error) {\r\n        console.error('Error sending invitation email:', error);\r\n        return false;\r\n      }\r\n    };\r\n    \r\n    // Send the email\r\n    const emailSent = await sendInvitationEmail(email, restaurant_name, invitationUrl);\r\n    */\r\n    \r\n    // Return invitation data and URL\r\n    return res.status(200).json({\r\n      success: true,\r\n      invitation: {\r\n        id: invitation.id,\r\n        token: invitation.token,\r\n        email: invitation.email,\r\n        restaurant_name: invitation.restaurant_name,\r\n        status: invitation.status,\r\n        expires_at: invitation.expires_at,\r\n        created_at: invitation.created_at\r\n      },\r\n      invitation_url: invitationUrl,\r\n      // email_sent: emailSent || false, // Would be included if email sending was implemented\r\n      message: 'Invitation created successfully'\r\n    });\r\n  } catch (error: any) {\r\n    console.error('Error creating invitation:', error);\r\n    return res.status(500).json({\r\n      success: false,\r\n      error: error.message || 'Internal server error',\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Verify Stripe configuration and connectivity\r\n */\r\nexport async function verifyStripeSetup(req: VercelRequest, res: VercelResponse) {\r\n  try {\r\n    // First, validate that we have the necessary environment variables\r\n    const stripeSecretKey = process.env.STRIPE_SECRET_KEY;\r\n    \r\n    if (!stripeSecretKey) {\r\n      const configError = new Error('Missing Stripe configuration. STRIPE_SECRET_KEY is not set in environment variables.');\r\n      // Add properties to the error for better categorization\r\n      Object.assign(configError, { \r\n        type: 'ConfigurationError',\r\n        config: {\r\n          STRIPE_SECRET_KEY: 'missing',\r\n          STRIPE_WEBHOOK_SECRET: !!process.env.STRIPE_WEBHOOK_SECRET ? 'configured' : 'missing',\r\n          VITE_STRIPE_PUBLIC_KEY: !!(process.env.VITE_STRIPE_PUBLIC_KEY || process.env.STRIPE_PUBLIC_KEY) ? 'configured' : 'missing',\r\n        }\r\n      });\r\n      return sendApiError(res, configError, 500, true);\r\n    }\r\n    \r\n    // Verify we can connect to Stripe API\r\n    const balance = await stripe.balance.retrieve();\r\n    \r\n    // Check for required environment variables\r\n    const configStatus = {\r\n      STRIPE_SECRET_KEY: 'configured',\r\n      STRIPE_WEBHOOK_SECRET: !!process.env.STRIPE_WEBHOOK_SECRET ? 'configured' : 'missing',\r\n      VITE_STRIPE_PUBLIC_KEY: !!(process.env.VITE_STRIPE_PUBLIC_KEY || process.env.STRIPE_PUBLIC_KEY) ? 'configured' : 'missing',\r\n    };\r\n    \r\n    return res.status(200).json({\r\n      status: 'success',\r\n      message: 'Stripe API connection successful',\r\n      livemode: balance.livemode,\r\n      config: configStatus,\r\n      balance: {\r\n        available: balance.available.map(b => ({ \r\n          amount: (b.amount / 100).toFixed(2),\r\n          currency: b.currency \r\n        })),\r\n        pending: balance.pending.map(b => ({ \r\n          amount: (b.amount / 100).toFixed(2),\r\n          currency: b.currency \r\n        })),\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    // Let our error handler determine the appropriate status code\r\n    // and format the error response consistently\r\n    const statusCode = getErrorStatusCodeForStripe(error);\r\n    return sendApiError(res, error, statusCode, true);\r\n  }\r\n}\r\n\r\n/**\r\n * Helper function to determine the appropriate status code for Stripe-specific errors\r\n */\r\nfunction getErrorStatusCodeForStripe(error: any): number {\r\n  if (error.type === 'StripeAuthenticationError') {\r\n    return 401; // Unauthorized\r\n  } else if (error.type === 'StripeConnectionError') {\r\n    return 503; // Service Unavailable\r\n  } else if (error.type === 'StripeAPIError') {\r\n    return 502; // Bad Gateway\r\n  } else if (error.type === 'StripeInvalidRequestError') {\r\n    return 400; // Bad Request\r\n  } else if (error.type === 'StripeRateLimitError') {\r\n    return 429; // Too Many Requests\r\n  } else if (error.type === 'ConfigurationError') {\r\n    return 500; // Internal Server Error due to misconfiguration\r\n  }\r\n  \r\n  // Default to internal server error\r\n  return 500;\r\n}\r\n\r\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\r\n  if (req.method === 'POST' && req.url?.includes('/invite')) {\r\n    return createInvitationLink(req, res);\r\n  } else if (req.method === 'POST') {\r\n    return createMembershipTier(req, res);\r\n  } else if (req.method === 'PUT') {\r\n    return updateMembershipTier(req, res);\r\n  } else if (req.method === 'GET' && req.url?.includes('/verify-stripe')) {\r\n    return verifyStripeSetup(req, res);\r\n  } else {\r\n    return res.status(405).json({ error: 'Method not allowed' });\r\n  }\r\n}", "import Stripe from 'stripe';\r\n\r\n// Check if the Stripe secret key is configured\r\nconst stripeSecretKey = process.env.STRIPE_SECRET_KEY;\r\n\r\nif (!stripeSecretKey) {\r\n  console.error('STRIPE_SECRET_KEY is not configured in environment variables');\r\n}\r\n\r\n// Initialize Stripe for server-side operations with proper configuration\r\nexport const stripe = new Stripe(stripeSecretKey || 'invalid_key', {\r\n  apiVersion: '2023-10-16', // Using a specific API version for stability\r\n  maxNetworkRetries: 3, // Retry on network failures for better reliability\r\n});", "import { createClient } from '@supabase/supabase-js';\r\n\r\n// Initialize Supabase with service role key for admin operations\r\nexport const supabaseAdmin = createClient(\r\n  process.env.SUPABASE_URL as string,\r\n  process.env.SUPABASE_SERVICE_ROLE_KEY as string,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false\r\n    }\r\n  }\r\n); ", "// API request validation utilities\r\n\r\nexport interface ValidationError {\r\n  field: string;\r\n  message: string;\r\n}\r\n\r\nexport function validateRequired(\r\n  data: Record<string, any>,\r\n  requiredFields: string[]\r\n): ValidationError[] {\r\n  const errors: ValidationError[] = [];\r\n  \r\n  for (const field of requiredFields) {\r\n    const value = data[field];\r\n    if (value === undefined || value === null || value === '') {\r\n      errors.push({\r\n        field,\r\n        message: `${field} is required`,\r\n      });\r\n    }\r\n  }\r\n  \r\n  return errors;\r\n}\r\n\r\nexport function validateEmail(email: string): boolean {\r\n  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n  return emailRegex.test(email);\r\n}\r\n\r\nexport function validatePrice(price: string | number): boolean {\r\n  if (typeof price === 'number') {\r\n    return price > 0;\r\n  }\r\n  const priceNum = parseFloat(price);\r\n  return !isNaN(priceNum) && priceNum > 0;\r\n}\r\n\r\nexport function validateRequest(\r\n  data: Record<string, any>,\r\n  requiredFields: string[],\r\n  customValidators?: {\r\n    [field: string]: (value: any) => ValidationError | null;\r\n  }\r\n): { isValid: boolean; errors: ValidationError[] } {\r\n  const errors: ValidationError[] = validateRequired(data, requiredFields);\r\n  \r\n  // Run custom validators if provided\r\n  if (customValidators) {\r\n    for (const [field, validator] of Object.entries(customValidators)) {\r\n      if (data[field] !== undefined && data[field] !== null) {\r\n        const validationResult = validator(data[field]);\r\n        if (validationResult) {\r\n          errors.push(validationResult);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors,\r\n  };\r\n}\r\n", "import type { VercelResponse } from '@vercel/node';\r\n\r\nexport interface ApiErrorResponse {\r\n  status: 'error';\r\n  error: string;\r\n  code?: number;\r\n  type?: string;\r\n  details?: any;\r\n  deployment_url?: string;\r\n  errorDetails?: any;\r\n}\r\n\r\n/**\r\n * Formats an error into a consistent API error response\r\n * \r\n * @param error The error object to format\r\n * @param includeDetails Whether to include detailed error information (default: false)\r\n * @returns A structured API error response object\r\n */\r\nexport function formatApiError(error: any, includeDetails = false): ApiErrorResponse {\r\n  // Extract common error properties\r\n  const errorResponse: ApiErrorResponse = {\r\n    status: 'error',\r\n    error: error.message || 'Internal server error',\r\n  };\r\n\r\n  // Add error type if available\r\n  if (error.type) {\r\n    errorResponse.type = error.type;\r\n  }\r\n\r\n  // Add error code if available\r\n  if (error.code || error.statusCode) {\r\n    errorResponse.code = error.code || error.statusCode;\r\n  }\r\n\r\n  // Include deployment context to help with debugging\r\n  const deployUrl = process.env.VERCEL_URL || process.env.FRONTEND_URL;\r\n  if (deployUrl) {\r\n    errorResponse.deployment_url = deployUrl.startsWith('http') ? deployUrl : `https://${deployUrl}`;\r\n  }\r\n\r\n  // Include detailed error information in development mode\r\n  if (includeDetails || process.env.NODE_ENV === 'development') {\r\n    errorResponse.errorDetails = {\r\n      message: error.message,\r\n      code: error.code,\r\n      type: error.type,\r\n      stack: error.stack,\r\n      // Additional properties that might be useful\r\n      name: error.name,\r\n      cause: error.cause,\r\n    };\r\n  }\r\n\r\n  return errorResponse;\r\n}\r\n\r\n/**\r\n * Sends a formatted error response\r\n * \r\n * @param res The Vercel response object\r\n * @param error The error to format and send\r\n * @param statusCode The HTTP status code to use (default: 500)\r\n * @param includeDetails Whether to include detailed error information (default: false)\r\n */\r\nexport function sendApiError(\r\n  res: VercelResponse,\r\n  error: any,\r\n  statusCode = 500,\r\n  includeDetails = false\r\n): void {\r\n  // Log the error for server-side debugging\r\n  console.error(`API Error (${statusCode}):`, error);\r\n  \r\n  // Send the formatted error response\r\n  res.status(statusCode).json(formatApiError(error, includeDetails));\r\n}\r\n\r\n/**\r\n * Returns common error status codes based on error types\r\n * \r\n * @param error The error to analyze\r\n * @returns An appropriate HTTP status code\r\n */\r\nexport function getErrorStatusCode(error: any): number {\r\n  // Authentication errors\r\n  if (\r\n    error.type === 'StripeAuthenticationError' ||\r\n    error.message?.toLowerCase().includes('authentication') ||\r\n    error.message?.toLowerCase().includes('api key') ||\r\n    error.code === 'auth_error'\r\n  ) {\r\n    return 401;\r\n  }\r\n\r\n  // Validation errors\r\n  if (\r\n    error.type === 'StripeInvalidRequestError' || \r\n    error.message?.toLowerCase().includes('validation') ||\r\n    error.message?.toLowerCase().includes('invalid')\r\n  ) {\r\n    return 400;\r\n  }\r\n\r\n  // Resource not found\r\n  if (\r\n    error.type === 'StripeInvalidRequestError' && \r\n    error.message?.toLowerCase().includes('no such') ||\r\n    error.code === 'resource_missing'\r\n  ) {\r\n    return 404;\r\n  }\r\n\r\n  // Rate limiting errors\r\n  if (\r\n    error.type === 'StripeRateLimitError' ||\r\n    error.code === 'rate_limit_exceeded'\r\n  ) {\r\n    return 429;\r\n  }\r\n\r\n  // External service errors\r\n  if (\r\n    error.type === 'StripeAPIError' ||\r\n    error.type === 'StripeConnectionError'\r\n  ) {\r\n    return 502;\r\n  }\r\n\r\n  // Default to internal server error\r\n  return 500;\r\n}\r\n\r\n/**\r\n * Wrapper for API handler functions to catch and format errors consistently\r\n * \r\n * @param handler The API handler function to wrap\r\n * @returns A wrapped handler function with error handling\r\n */\r\nexport function withErrorHandling(\r\n  handler: (req: any, res: any) => Promise<any>\r\n) {\r\n  return async (req: any, res: any) => {\r\n    try {\r\n      return await handler(req, res);\r\n    } catch (error: any) {\r\n      const statusCode = getErrorStatusCode(error);\r\n      sendApiError(res, error, statusCode);\r\n    }\r\n  };\r\n}", "/**\r\n * Utility functions for handling price conversions between string and number formats\r\n * This ensures consistent handling of prices throughout the application\r\n */\r\n\r\n/**\r\n * Convert a price from any format (string or number) to a string\r\n * @param price - The price value to convert to string\r\n * @returns The price as a formatted string\r\n */\r\nexport function ensurePriceString(price: string | number): string {\r\n  if (typeof price === 'number') {\r\n    return price.toString();\r\n  }\r\n  return price;\r\n}\r\n\r\n/**\r\n * Convert a price from any format (string or number) to a number\r\n * @param price - The price value to convert to number\r\n * @returns The price as a number\r\n */\r\nexport function ensurePriceNumber(price: string | number): number {\r\n  if (typeof price === 'string') {\r\n    return parseFloat(price);\r\n  }\r\n  return price;\r\n}\r\n\r\n/**\r\n * Validate if a price is a valid positive number\r\n * @param price - The price value to validate\r\n * @returns True if the price is valid\r\n */\r\nexport function isValidPrice(price: string | number): boolean {\r\n  const priceNum = typeof price === 'string' ? parseFloat(price) : price;\r\n  return !isNaN(priceNum) && priceNum > 0;\r\n}\r\n\r\n/**\r\n * Convert a price to Stripe's format (cents)\r\n * @param price - The price value in dollars/euros\r\n * @returns The price in cents for Stripe API\r\n */\r\nexport function convertPriceToStripeCents(price: string | number): number {\r\n  const priceNum = typeof price === 'string' ? parseFloat(price) : price;\r\n  return Math.round(priceNum * 100);\r\n}"],
  "mappings": "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",
  "names": ["Stripe", "stripeSecretKey"]
}

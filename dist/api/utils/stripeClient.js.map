{
  "version": 3,
  "sources": ["stripeClient.ts", "../../lib/utils/errorHandler.ts"],
  "sourcesContent": ["import Stripe from 'stripe';\r\nimport { handleStripeError } from '@/lib/utils/errorHandler';\r\n\r\nconst stripeSecretKey = process.env.STRIPE_SECRET_KEY;\r\nif (!stripeSecretKey) {\r\n  console.error('STRIPE_SECRET_KEY is not configured in environment variables');\r\n}\r\n\r\nexport const stripe = new Stripe(stripeSecretKey || 'invalid_key', {\r\n  apiVersion: '2025-02-24.acacia',\r\n  maxNetworkRetries: 3,\r\n  typescript: true,\r\n  appInfo: {\r\n    name: 'Club Cuvee',\r\n    version: '1.0.0'\r\n  }\r\n});\r\n\r\n// Wrapper for Stripe API calls with error handling\r\nexport const stripeApi = {\r\n  createCheckoutSession: async (data: Stripe.Checkout.SessionCreateParams) => {\r\n    try {\r\n      const idempotencyKey = crypto.randomUUID();\r\n      return await stripe.checkout.sessions.create(data, {\r\n        idempotencyKey\r\n      });\r\n    } catch (error) {\r\n      throw handleStripeError(error);\r\n    }\r\n  },\r\n\r\n  createCustomer: async (data: Stripe.CustomerCreateParams) => {\r\n    try {\r\n      const idempotencyKey = crypto.randomUUID();\r\n      return await stripe.customers.create(data, {\r\n        idempotencyKey\r\n      });\r\n    } catch (error) {\r\n      throw handleStripeError(error);\r\n    }\r\n  },\r\n\r\n  createSubscription: async (data: Stripe.SubscriptionCreateParams) => {\r\n    try {\r\n      const idempotencyKey = crypto.randomUUID();\r\n      return await stripe.subscriptions.create(data, {\r\n        idempotencyKey\r\n      });\r\n    } catch (error) {\r\n      throw handleStripeError(error);\r\n    }\r\n  },\r\n\r\n  constructEvent: async (payload: string | Buffer, signature: string, secret: string) => {\r\n    try {\r\n      return stripe.webhooks.constructEvent(payload, signature, secret);\r\n    } catch (error) {\r\n      throw handleStripeError(error);\r\n    }\r\n  }\r\n};", "import type { VercelResponse } from '@vercel/node';\r\n\r\nexport class AppError extends Error {\r\n  constructor(\r\n    public statusCode: number,\r\n    message: string,\r\n    public details?: any\r\n  ) {\r\n    super(message);\r\n    this.name = 'AppError';\r\n  }\r\n}\r\n\r\nexport function formatApiError(error: any) {\r\n  if (error instanceof AppError) {\r\n    return {\r\n      status: 'error',\r\n      error: error.message,\r\n      details: error.details\r\n    };\r\n  }\r\n\r\n  return {\r\n    status: 'error',\r\n    error: error.message || 'Internal server error',\r\n    details: process.env.NODE_ENV === 'development' ? error : undefined\r\n  };\r\n}\r\n\r\nexport function sendErrorResponse(res: VercelResponse, error: Error) {\r\n  const statusCode = error instanceof AppError ? error.statusCode : 500;\r\n  const formattedError = formatApiError(error);\r\n  \r\n  return res.status(statusCode).json(formattedError);\r\n}\r\n\r\nexport function handleStripeError(error: any) {\r\n  if (error.type === 'StripeAuthenticationError') {\r\n    return new AppError(401, 'Invalid Stripe API key');\r\n  } else if (error.type === 'StripeConnectionError') {\r\n    return new AppError(503, 'Stripe API connection error');\r\n  } else if (error.type === 'StripeAPIError') {\r\n    return new AppError(502, 'Stripe API error');\r\n  } else if (error.type === 'StripeInvalidRequestError') {\r\n    return new AppError(400, error.message);\r\n  } else if (error.type === 'StripeRateLimitError') {\r\n    return new AppError(429, 'Too many requests to Stripe API');\r\n  }\r\n  \r\n  return new AppError(500, 'Internal server error');\r\n} "],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAmB;;;ACEZ,IAAM,WAAN,cAAuB,MAAM;AAAA,EAClC,YACS,YACP,SACO,SACP;AACA,UAAM,OAAO;AAJN;AAEA;AAGP,SAAK,OAAO;AAAA,EACd;AACF;AAyBO,SAAS,kBAAkB,OAAY;AAC5C,MAAI,MAAM,SAAS,6BAA6B;AAC9C,WAAO,IAAI,SAAS,KAAK,wBAAwB;AAAA,EACnD,WAAW,MAAM,SAAS,yBAAyB;AACjD,WAAO,IAAI,SAAS,KAAK,6BAA6B;AAAA,EACxD,WAAW,MAAM,SAAS,kBAAkB;AAC1C,WAAO,IAAI,SAAS,KAAK,kBAAkB;AAAA,EAC7C,WAAW,MAAM,SAAS,6BAA6B;AACrD,WAAO,IAAI,SAAS,KAAK,MAAM,OAAO;AAAA,EACxC,WAAW,MAAM,SAAS,wBAAwB;AAChD,WAAO,IAAI,SAAS,KAAK,iCAAiC;AAAA,EAC5D;AAEA,SAAO,IAAI,SAAS,KAAK,uBAAuB;AAClD;;;AD/CA,IAAM,kBAAkB,QAAQ,IAAI;AACpC,IAAI,CAAC,iBAAiB;AACpB,UAAQ,MAAM,8DAA8D;AAC9E;AAEO,IAAM,SAAS,IAAI,cAAAA,QAAO,mBAAmB,eAAe;AAAA,EACjE,YAAY;AAAA,EACZ,mBAAmB;AAAA,EACnB,YAAY;AAAA,EACZ,SAAS;AAAA,IACP,MAAM;AAAA,IACN,SAAS;AAAA,EACX;AACF,CAAC;AAGM,IAAM,YAAY;AAAA,EACvB,uBAAuB,OAAO,SAA8C;AAC1E,QAAI;AACF,YAAM,iBAAiB,OAAO,WAAW;AACzC,aAAO,MAAM,OAAO,SAAS,SAAS,OAAO,MAAM;AAAA,QACjD;AAAA,MACF,CAAC;AAAA,IACH,SAAS,OAAO;AACd,YAAM,kBAAkB,KAAK;AAAA,IAC/B;AAAA,EACF;AAAA,EAEA,gBAAgB,OAAO,SAAsC;AAC3D,QAAI;AACF,YAAM,iBAAiB,OAAO,WAAW;AACzC,aAAO,MAAM,OAAO,UAAU,OAAO,MAAM;AAAA,QACzC;AAAA,MACF,CAAC;AAAA,IACH,SAAS,OAAO;AACd,YAAM,kBAAkB,KAAK;AAAA,IAC/B;AAAA,EACF;AAAA,EAEA,oBAAoB,OAAO,SAA0C;AACnE,QAAI;AACF,YAAM,iBAAiB,OAAO,WAAW;AACzC,aAAO,MAAM,OAAO,cAAc,OAAO,MAAM;AAAA,QAC7C;AAAA,MACF,CAAC;AAAA,IACH,SAAS,OAAO;AACd,YAAM,kBAAkB,KAAK;AAAA,IAC/B;AAAA,EACF;AAAA,EAEA,gBAAgB,OAAO,SAA0B,WAAmB,WAAmB;AACrF,QAAI;AACF,aAAO,OAAO,SAAS,eAAe,SAAS,WAAW,MAAM;AAAA,IAClE,SAAS,OAAO;AACd,YAAM,kBAAkB,KAAK;AAAA,IAC/B;AAAA,EACF;AACF;",
  "names": ["Stripe"]
}
